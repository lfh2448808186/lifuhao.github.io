<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Docker安装使用</title>
    <url>/2020/03/18/Docker%E5%AE%89%E8%A3%85%E4%BD%BF%E7%94%A8/</url>
    <content><![CDATA[<p>Ubuntu18.04服务器上安装docker及使用</p>
<h2 id="一、安装"><a href="#一、安装" class="headerlink" title="一、安装"></a>一、安装</h2><h3 id="1-卸载旧版本"><a href="#1-卸载旧版本" class="headerlink" title="1.卸载旧版本"></a>1.卸载旧版本</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo apt-get remove docker docker-engine docker.io containerd runc</span><br></pre></td></tr></table></figure>

<h3 id="2-使用存储库安装："><a href="#2-使用存储库安装：" class="headerlink" title="2.使用存储库安装："></a>2.使用存储库安装：</h3><h4 id="1-更新apt包索引"><a href="#1-更新apt包索引" class="headerlink" title="1).更新apt包索引"></a>1).更新apt包索引</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo apt-get update</span><br></pre></td></tr></table></figure>

<h4 id="2-安装软件包以允许apt通过HTTPS使用存储库："><a href="#2-安装软件包以允许apt通过HTTPS使用存储库：" class="headerlink" title="2).安装软件包以允许apt通过HTTPS使用存储库："></a>2).安装软件包以允许<code>apt</code>通过HTTPS使用存储库：</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo apt-get install \</span><br><span class="line">   apt-transport-https \</span><br><span class="line">   ca-certificates \</span><br><span class="line">   curl \</span><br><span class="line">   gnupg-agent \</span><br><span class="line">   software-properties-common</span><br></pre></td></tr></table></figure>

<h4 id="3-添加Docker的官方GPG密钥："><a href="#3-添加Docker的官方GPG密钥：" class="headerlink" title="3).添加Docker的官方GPG密钥："></a>3).添加Docker的官方GPG密钥：</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">curl -fsSL https:&#x2F;&#x2F;download.docker.com&#x2F;linux&#x2F;ubuntu&#x2F;gpg | sudo apt-key add -</span><br></pre></td></tr></table></figure>

<p>验证您现在是否拥有带有指纹的密钥 。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo apt-key fingerprint 0EBFCD88</span><br></pre></td></tr></table></figure>

<h4 id="4-使用以下命令来设置稳定的存储库"><a href="#4-使用以下命令来设置稳定的存储库" class="headerlink" title="4)使用以下命令来设置稳定的存储库"></a>4)使用以下命令来设置稳定的存储库</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo add-apt-repository \</span><br><span class="line">   "deb [arch=amd64] https://download.docker.com/linux/ubuntu \</span><br><span class="line"><span class="meta">   $</span><span class="bash">(lsb_release -cs) \</span></span><br><span class="line">   stable"</span><br></pre></td></tr></table></figure>
<a id="more"></a>
<h3 id="3-安装docker-ENGINFE-社区"><a href="#3-安装docker-ENGINFE-社区" class="headerlink" title="3.安装docker-ENGINFE-社区"></a>3.安装docker-ENGINFE-社区</h3><h4 id="1-更新apt包索引-1"><a href="#1-更新apt包索引-1" class="headerlink" title="1).更新apt包索引"></a>1).更新apt包索引</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo apt-get update</span><br></pre></td></tr></table></figure>

<h4 id="2-安装最新版本的Docker-Engine-Community和containerd"><a href="#2-安装最新版本的Docker-Engine-Community和containerd" class="headerlink" title="2).安装最新版本的Docker Engine-Community和containerd"></a>2).安装<em>最新版本</em>的Docker Engine-Community和containerd</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> sudo apt-get install docker-ce docker-ce-cli containerd.io</span></span><br></pre></td></tr></table></figure>

<p>  也可以安装自己需要的版本</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> apt-cache madison docker-ce</span></span><br><span class="line"></span><br><span class="line">  docker-ce | 5:18.09.1~3-0~ubuntu-xenial | https://download.docker.com/linux/ubuntu  xenial/stable amd64 Packages</span><br><span class="line">  docker-ce | 5:18.09.0~3-0~ubuntu-xenial | https://download.docker.com/linux/ubuntu  xenial/stable amd64 Packages</span><br><span class="line">  docker-ce | 18.06.1~ce~3-0~ubuntu       | https://download.docker.com/linux/ubuntu  xenial/stable amd64 Packages</span><br><span class="line">  docker-ce | 18.06.0~ce~3-0~ubuntu       | https://download.docker.com/linux/ubuntu  xenial/stable amd64 Packages</span><br><span class="line">  ...</span><br></pre></td></tr></table></figure>

<p>​    例如安装 5:18.09.1<del>3-0</del>ubuntu-xenial</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo apt-get install docker-ce=&lt;VERSION_STRING&gt; docker-ce-cli=&lt;VERSION_STRING&gt; containerd.io</span><br></pre></td></tr></table></figure>

<h4 id="3-运行hello-world测试"><a href="#3-运行hello-world测试" class="headerlink" title="3.运行hello-world测试"></a>3.运行hello-world测试</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo docker run hello-world</span><br></pre></td></tr></table></figure>

<h3 id="4-卸载docker"><a href="#4-卸载docker" class="headerlink" title="4.卸载docker"></a>4.卸载docker</h3><h4 id="1-卸载Docker-Engine-Community软件包："><a href="#1-卸载Docker-Engine-Community软件包：" class="headerlink" title="1).卸载Docker Engine-Community软件包："></a>1).卸载Docker Engine-Community软件包：</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo apt-get purge docker-ce</span><br></pre></td></tr></table></figure>

<h4 id="2-主机上的映像，容器，卷或自定义配置文件不会自动删除。要删除所有图像，容器和卷："><a href="#2-主机上的映像，容器，卷或自定义配置文件不会自动删除。要删除所有图像，容器和卷：" class="headerlink" title="2).主机上的映像，容器，卷或自定义配置文件不会自动删除。要删除所有图像，容器和卷："></a>2).主机上的映像，容器，卷或自定义配置文件不会自动删除。要删除所有图像，容器和卷：</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo rm -rf /var/lib/docker</span><br></pre></td></tr></table></figure>

<p><a href="https://docs.docker.com/install/linux/docker-ce/ubuntu/" target="_blank" rel="noopener">参考官方文档</a></p>
<h2 id="二、docker使用"><a href="#二、docker使用" class="headerlink" title="二、docker使用"></a>二、docker使用</h2><h3 id="1-更换docker下载源"><a href="#1-更换docker下载源" class="headerlink" title="1.更换docker下载源"></a>1.更换docker下载源</h3><h4 id="1-国内镜像地址"><a href="#1-国内镜像地址" class="headerlink" title="1).国内镜像地址"></a>1).国内镜像地址</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#Docker 官方中国区</span><br><span class="line">https:&#x2F;&#x2F;registry.docker-cn.com</span><br><span class="line">#网易</span><br><span class="line">http:&#x2F;&#x2F;hub-mirror.c.163.com</span><br><span class="line">#ustc</span><br><span class="line">https:&#x2F;&#x2F;docker.mirrors.ustc.edu.cn</span><br></pre></td></tr></table></figure>

<h4 id="2-为了永久性保留更改，您可以修改-etc-docker-daemon-json-文件并添加上-registry-mirrors-键值。"><a href="#2-为了永久性保留更改，您可以修改-etc-docker-daemon-json-文件并添加上-registry-mirrors-键值。" class="headerlink" title="2).为了永久性保留更改，您可以修改 /etc/docker/daemon.json 文件并添加上 registry-mirrors 键值。"></a>2).为了永久性保留更改，您可以修改 /etc/docker/daemon.json 文件并添加上 registry-mirrors 键值。</h4><figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"registry-mirrors"</span>: [<span class="string">"http://hub-mirror.c.163.com"</span>]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="3-保存后重新启动docker"><a href="#3-保存后重新启动docker" class="headerlink" title="3).保存后重新启动docker"></a>3).保存后重新启动docker</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">systemctl restart docker</span><br></pre></td></tr></table></figure>

<h2 id=""><a href="#" class="headerlink" title=""></a></h2><h3 id="2-Docker常用命令-amp-操作"><a href="#2-Docker常用命令-amp-操作" class="headerlink" title="2.Docker常用命令&amp;操作"></a>2.Docker常用命令&amp;操作</h3><h4 id="1）镜像操作"><a href="#1）镜像操作" class="headerlink" title="1）镜像操作"></a>1）镜像操作</h4><table>
<thead>
<tr>
<th>操作</th>
<th>命令</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>检索</td>
<td>docker  search 关键字  eg：docker  search redis</td>
<td>我们经常去docker  hub上检索镜像的详细信息，如镜像的TAG。</td>
</tr>
<tr>
<td>拉取</td>
<td>docker pull 镜像名:tag</td>
<td>:tag是可选的，tag表示标签，多为软件的版本，默认是latest</td>
</tr>
<tr>
<td>列表</td>
<td>docker images</td>
<td>查看所有本地镜像</td>
</tr>
<tr>
<td>删除</td>
<td>docker rmi image-id</td>
<td>删除指定的本地镜像</td>
</tr>
</tbody></table>
<p>​    <a href="https://docs.docker.com/engine/reference/commandline/docker/" target="_blank" rel="noopener">更多命令</a></p>
<h4 id="2）容器操作"><a href="#2）容器操作" class="headerlink" title="2）容器操作"></a>2）容器操作</h4><p>步骤：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">1、搜索镜像</span><br><span class="line">[root@localhost ~]# docker search tomcat</span><br><span class="line">2、拉取镜像</span><br><span class="line">[root@localhost ~]# docker pull tomcat</span><br><span class="line">3、根据镜像启动容器</span><br><span class="line">docker run --name mytomcat -d tomcat:latest</span><br><span class="line">4、docker ps  </span><br><span class="line">查看运行中的容器</span><br><span class="line">5、 停止运行中的容器</span><br><span class="line">docker stop  容器的id</span><br><span class="line">6、查看所有的容器</span><br><span class="line">docker ps -a</span><br><span class="line">7、启动容器</span><br><span class="line">docker start 容器id</span><br><span class="line">8、删除一个容器</span><br><span class="line"> docker rm 容器id</span><br><span class="line">9、启动一个做了端口映射的tomcat</span><br><span class="line">[root@localhost ~]# docker run -d -p 8888:8080 tomcat</span><br><span class="line">-d：后台运行</span><br><span class="line">-p: 将主机的端口映射到容器的一个端口    主机端口:容器内部的端口</span><br><span class="line"></span><br><span class="line">10、为了演示简单关闭了linux的防火墙</span><br><span class="line">service firewalld status ；查看防火墙状态</span><br><span class="line">service firewalld stop：关闭防火墙</span><br><span class="line">11、查看容器的日志</span><br><span class="line">docker logs container-name/container-id</span><br></pre></td></tr></table></figure>

<h4 id="3-安装mysql-Image"><a href="#3-安装mysql-Image" class="headerlink" title="3)安装mysql Image"></a>3)安装mysql Image</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker pull mysql</span><br></pre></td></tr></table></figure>

<h5 id="a-启动一个mysql容器"><a href="#a-启动一个mysql容器" class="headerlink" title="a).启动一个mysql容器"></a>a).启动一个mysql容器</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">docker run --name some-mysql -e MYSQL_ROOT_PASSWORD&#x3D;my-secret-pw -d mysql:tag</span><br></pre></td></tr></table></figure>

<p><code>some-mysql</code>是您要分配给容器的名称，<code>my-secret-pw</code>是要为MySQL根用户设置的密码，并且<code>tag</code>是指定所需MySQL版本的标记</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">root@iZ8vbf1et9j34b0ufvna0mZ:/# docker run --name mysql02 -e MYSQL_ROOT_PASSWORD=root -d mysql</span><br><span class="line">d34973aab2c96fab6b2e6a6aeb0625cedc816c78e47fcc390fd5bd8e60d69bfb</span><br><span class="line">root@iZ8vbf1et9j34b0ufvna0mZ:/# docker ps </span><br><span class="line">CONTAINER ID  IMAGE     COMMAND           CREATED         STATUS         PORTS             NAMES</span><br><span class="line">d34973aab2c9|mysql|"docker-entrypoint.s…"|11 seconds ago|Up 10 seconds|3306/tcp, 33060/tcp |mysql02</span><br></pre></td></tr></table></figure>

<h5 id="b-端口映射"><a href="#b-端口映射" class="headerlink" title="b)端口映射"></a>b)端口映射</h5><p><strong>-p 3307:3306 ：映射容器服务的 3306 端口到宿主机的 3307 端口，外部主机可以直接通过 **宿主机ip:3307</strong> 访问到 MySQL 的服务。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker run -p 3307:3306 --name mysql01 -e MYSQL_ROOT_PASSWORD=root -d mysql:tags</span><br></pre></td></tr></table></figure>

<p>​    tags: 替换成运行的容器的版本 若省略则自动运行最新版本</p>
<p><em>*注意一下我这里的端口是3307，需要在阿里云服务器的安全组中进行添加映射规则，不然无法访问</em></p>
<h5 id="c-通过docker-exec进入容器"><a href="#c-通过docker-exec进入容器" class="headerlink" title="c)通过docker exec进入容器"></a>c)通过docker exec进入容器</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">docker exec -it mysql bash</span><br><span class="line">退出容器</span><br><span class="line">1）Ctrl + d 退出并停止容器；</span><br><span class="line">2）Ctrl + p + q 退出并在后台运行容器；</span><br></pre></td></tr></table></figure>

<h5 id="d-删除一个运行的容器三连"><a href="#d-删除一个运行的容器三连" class="headerlink" title="d)删除一个运行的容器三连"></a>d)删除一个运行的容器三连</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">docker stop CONTAINER ID </span><br><span class="line">docker rm CONTAINER ID</span><br><span class="line">docker rmi image id</span><br></pre></td></tr></table></figure>





























]]></content>
      <categories>
        <category>Docker</category>
      </categories>
      <tags>
        <tag>Docker</tag>
      </tags>
  </entry>
  <entry>
    <title>单例模式</title>
    <url>/2020/03/15/%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F/</url>
    <content><![CDATA[<h1 id="单例模式"><a href="#单例模式" class="headerlink" title="单例模式"></a>单例模式</h1><p>单例模式（Singleton Pattern）涉及到一个单一的类，该类负责创建自己的对象，同时确保只有单个对象被创建。这个类提供了一种访问其唯一的对象的方式，可以直接访问，不需要实例化该类的对象。</p>
<ul>
<li>1、单例类只能有一个实例。</li>
<li>2、单例类必须自己创建自己的唯一实例。</li>
<li>3、单例类必须给所有其他对象提供这一实例。</li>
</ul>
<h2 id="1-饿汉式："><a href="#1-饿汉式：" class="headerlink" title="1.饿汉式："></a>1.饿汉式：</h2><p> 多线程安全 ，容易产生垃圾对象，类加载的时候就会初始化，浪费内存</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Singleton</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Singleton</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Singleton instance = <span class="keyword">new</span> Singleton();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Singleton  <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> instance;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="2-懒汉式，线程不安全"><a href="#2-懒汉式，线程不安全" class="headerlink" title="2.懒汉式，线程不安全"></a>2.懒汉式，线程不安全</h2><p>只有在第一次调用的时候才初始化，避免浪费内存</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Singleton2</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Singleton instance;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Singleton</span><span class="params">()</span></span>&#123;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Singleton <span class="title">getInstance</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span> ( instance == <span class="keyword">null</span>)</span><br><span class="line">            instance = <span class="keyword">new</span> Singleton();</span><br><span class="line">        <span class="keyword">return</span> instance;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<a id="more"></a>
<h2 id="3-懒汉式，线程安全"><a href="#3-懒汉式，线程安全" class="headerlink" title="3.懒汉式，线程安全"></a>3.懒汉式，线程安全</h2><p>使用synchronized来确保单例，影响效率</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Singleton</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Singleton instance;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Singleton</span><span class="params">()</span></span>&#123;&#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">synchronized</span> Singleton <span class="title">getInstance</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (instance == <span class="keyword">null</span>)</span><br><span class="line">            instance = <span class="keyword">new</span> Singleton();</span><br><span class="line">        <span class="keyword">return</span> instance;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="4-懒汉式-双重校验锁"><a href="#4-懒汉式-双重校验锁" class="headerlink" title="4.懒汉式+双重校验锁"></a>4.懒汉式+双重校验锁</h2><p>  第三种实现，同步锁都会一直存在影响效率</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Singleton</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Singleton</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Singleton singleton;</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Singleton <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (singleton==<span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">synchronized</span> (Singleton<span class="class">.<span class="keyword">class</span>) </span>&#123;</span><br><span class="line">                <span class="keyword">if</span> (singleton == <span class="keyword">null</span>) &#123;</span><br><span class="line">                    singleton = <span class="keyword">new</span> Singleton();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> singleton;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>使用测试验证性能差异可以看到时间差距很大方法三的运行时间是18523，方法四的时间为3 。差距五千倍</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public static void main(String[] args)&#123;</span><br><span class="line">    long start &#x3D; System.currentTimeMillis();</span><br><span class="line">    for(int i&#x3D; 0;i&lt;999999999;i++)&#123;</span><br><span class="line">        Singleton s &#x3D; Singleton.getInstance();</span><br><span class="line">    &#125;</span><br><span class="line">    System.out.println(System.currentTimeMillis()-start);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="5-懒汉式-双重校验锁-防止指令重拍"><a href="#5-懒汉式-双重校验锁-防止指令重拍" class="headerlink" title="5.懒汉式+双重校验锁+防止指令重拍"></a>5.懒汉式+双重校验锁+防止指令重拍</h2><p>instance = new Singleton(); 其实JVM内部已经转换为多条指令：</p>
<p>memory = allocate(); //1：分配对象的内存空间</p>
<p>ctorInstance(memory); //2：初始化对象</p>
<p>instance = memory; //3：设置instance指向刚分配的内存地址</p>
<p>但是经过重排序后如下：</p>
<p>memory = allocate(); //1：分配对象的内存空间</p>
<p>instance = memory; //3：设置instance指向刚分配的内存地址，此时对象还没被初始化</p>
<p>ctorInstance(memory); //2：初始化对象</p>
<p>可以看到指令重排之后，instance指向分配好的内存放在了前面，而这段内存的初始化被排在了后面，在线程A初始化完成这段内存之前，线程B虽然进不去同步代码块，但是在同步代码块之前的判断就会发现instance不为空，此时线程B获得instance对象进行使用就可能发生错误。</p>
<p>加上volatile关键字:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Singleton</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Singleton</span><span class="params">()</span></span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">volatile</span> <span class="keyword">static</span> Singleton instance;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Singleton <span class="title">getInstance</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (instance == <span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">synchronized</span> (Singleton<span class="class">.<span class="keyword">class</span>) </span>&#123;</span><br><span class="line">                <span class="keyword">if</span> (instance == <span class="keyword">null</span>)</span><br><span class="line">                    instance = <span class="keyword">new</span> Singleton4();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> instance;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="6-静态内部类"><a href="#6-静态内部类" class="headerlink" title="6.静态内部类"></a>6.静态内部类</h2><p>不仅实现了懒加载，而且线程安全</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Singleton</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">LazyHolder</span></span>&#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Singleton instance</span><br><span class="line">                = <span class="keyword">new</span> Singleton();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Singleton</span><span class="params">()</span></span>&#123;&#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Singleton <span class="title">getInstance</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> LazyHolder.instance;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="7-枚举"><a href="#7-枚举" class="headerlink" title="7.枚举"></a>7.枚举</h2><p>线程安全，效率高</p>
<p>涉及到反序列化创建对象时，可以尝试使用枚举方式</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">enum</span> Singleton6 &#123;</span><br><span class="line"></span><br><span class="line">    INSTANCE;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> String word;</span><br><span class="line">    </span><br><span class="line">    Singleton6()&#123;<span class="keyword">this</span>.word=<span class="string">"hello,World"</span>;&#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Singleton6 <span class="title">getInstance</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> INSTANCE;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getWord</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> word;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>设计模式</category>
      </categories>
      <tags>
        <tag>设计模式</tag>
      </tags>
  </entry>
  <entry>
    <title>并查集</title>
    <url>/2020/03/14/%E5%B9%B6%E6%9F%A5%E9%9B%86/</url>
    <content><![CDATA[<h1 id="并查集"><a href="#并查集" class="headerlink" title="并查集"></a>并查集</h1><p> 并查集是一种数据结构, 常用于描述集合,经常用于解决此类问题:某个元素是否属于某个集合,或者 某个元素 和 另一个元素是否同属于一个集合</p>
<h2 id="1-基本实现："><a href="#1-基本实现：" class="headerlink" title="1.基本实现："></a>1.基本实现：</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">id    0	  1	  2	  3	  4	   5   6	7</span><br><span class="line">集合 	0	1	0	1	0	1	0	 1</span><br></pre></td></tr></table></figure>

<p>​    当元素2，3进行合并的时候使用将2所在的集合全部添加到3所在的集合中</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">id    0	  1	  2	  3	  4	   5   6	7</span><br><span class="line">集合 	1	1	1	1	1	1	1	 1</span><br></pre></td></tr></table></figure>
<a id="more"></a>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UnionFind1</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//数组表示并查集所有元素</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span>[] id;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> size; <span class="comment">//并查集的个数</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">UnionFind1</span><span class="params">(<span class="keyword">int</span> size)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.size = size;</span><br><span class="line">        id = <span class="keyword">new</span> <span class="keyword">int</span>[size];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; size; i++) &#123;</span><br><span class="line">            id[i] = i;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 查看元素属于那个集合</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> element</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">int</span> <span class="title">find</span><span class="params">(<span class="keyword">int</span> element)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> id[element];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     *  查看两个元素是否属于一个集合</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> firstElement</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> secondElement</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isConnected</span><span class="params">(<span class="keyword">int</span> firstElement,<span class="keyword">int</span> secondElement)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> id[firstElement] == id[secondElement];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 合并集合： 将第一个集合中的所有元素都加入到第二个集合当中</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> firstElement</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> seconElement</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">unionElements</span><span class="params">(<span class="keyword">int</span> firstElement,<span class="keyword">int</span> seconElement)</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> firstUnion = find(firstElement);</span><br><span class="line">        <span class="keyword">int</span> secondUnion = find(seconElement);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (firstUnion != secondUnion)&#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="keyword">this</span>.size; i++) &#123;</span><br><span class="line">                <span class="keyword">if</span> ( id[i] == firstUnion )</span><br><span class="line">                    id[i] = secondUnion;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 本并查集使用数组实现，为了更直观地看清内部数据，采用打印数组</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">printArr</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> id : <span class="keyword">this</span>.id) &#123;</span><br><span class="line">            System.out.print(id + <span class="string">"\t"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> n = <span class="number">10</span>;</span><br><span class="line">        UnionFind1 union = <span class="keyword">new</span> UnionFind1(n);</span><br><span class="line">        System.out.println(<span class="string">"初始："</span>);</span><br><span class="line">        union.printArr();</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">"连接了5 6"</span>);</span><br><span class="line">        union.unionElements(<span class="number">5</span>, <span class="number">6</span>);</span><br><span class="line">        union.printArr();</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">"连接了1 2"</span>);</span><br><span class="line">        union.unionElements(<span class="number">1</span>, <span class="number">2</span>);</span><br><span class="line">        union.printArr();</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">"连接了2 3"</span>);</span><br><span class="line">        union.unionElements(<span class="number">2</span>, <span class="number">3</span>);</span><br><span class="line">        union.printArr();</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">"连接了1 4"</span>);</span><br><span class="line">        union.unionElements(<span class="number">1</span>, <span class="number">4</span>);</span><br><span class="line">        union.printArr();</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">"连接了1 5"</span>);</span><br><span class="line">        union.unionElements(<span class="number">1</span>, <span class="number">5</span>);</span><br><span class="line">        union.printArr();</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">"1  6 是否连接："</span> + union.isConnected(<span class="number">1</span>, <span class="number">6</span>));</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">"1  8 是否连接："</span> + union.isConnected(<span class="number">1</span>, <span class="number">8</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="2-快速Union，慢Find"><a href="#2-快速Union，慢Find" class="headerlink" title="2.快速Union，慢Find"></a>2.快速Union，慢Find</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">id     0	1	2	3	4	5	6</span><br><span class="line">集合   1	  2    3   5   6    5   6  数组元素内容</span><br></pre></td></tr></table></figure>

<p>这种情况只需要将自己的上级保存在自己的元素中</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UnionFind2</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span>[] parent;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> size;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">UnionFind2</span><span class="params">(<span class="keyword">int</span> size)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.size = size;</span><br><span class="line">        parent = <span class="keyword">new</span> <span class="keyword">int</span>[size];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; size; i++) &#123;</span><br><span class="line">            parent[i] = i;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**  2  3  4  4</span></span><br><span class="line"><span class="comment">     *   1-&gt;2-&gt;3-&gt;4  类似于指令寻址</span></span><br><span class="line"><span class="comment">     * 就是数组元素所对应的索引和内容都表示一个集合，通过找一个元素的最终树与哪一个集合</span></span><br><span class="line"><span class="comment">     *    需要不断的去通过内容作为索引，再根据索引去找内容，再通过内容找索引，</span></span><br><span class="line"><span class="comment">     *    最终的条件是这个值自己的索引就是自己本身将其返回</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> element  返回元素所在最终集合 其实就是索引</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">find</span><span class="params">(<span class="keyword">int</span> element)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//不断去查询自己的父亲节点, 直到到达根节点</span></span><br><span class="line">        <span class="comment">// 根节点的特点: parent[p] == p</span></span><br><span class="line">        <span class="keyword">while</span> (element != parent[element]) &#123;</span><br><span class="line">            element = parent[element];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> element;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isConnected</span><span class="params">(<span class="keyword">int</span> firstElement, <span class="keyword">int</span> secondElement)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> find(firstElement) == find(secondElement);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 将两个不同集合的元素进行合并，只需要将第一个集合加入到第二个集合当中</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> firstElement</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> secondElement</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">unionElements</span><span class="params">(<span class="keyword">int</span> firstElement, <span class="keyword">int</span> secondElement)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> firstRoot = find(firstElement);</span><br><span class="line">        <span class="keyword">int</span> secondRoot = find(secondElement);</span><br><span class="line">        <span class="keyword">if</span> (firstRoot == secondRoot) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        parent[firstRoot] = secondRoot;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="3-使用权重进行合并"><a href="#3-使用权重进行合并" class="headerlink" title="3.使用权重进行合并"></a>3.使用权重进行合并</h2><p>通过对于两个集合个数进行比较，个数多的将保函个数少的集合</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UnionFind3</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span>[] parent;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span>[] weight;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> size;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">UnionFind3</span><span class="params">(<span class="keyword">int</span> size)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.parent = <span class="keyword">new</span> <span class="keyword">int</span>[size];</span><br><span class="line">        <span class="keyword">this</span>.weight = <span class="keyword">new</span> <span class="keyword">int</span>[size];</span><br><span class="line">        <span class="keyword">this</span>.size = size;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; parent.length; i++) &#123;</span><br><span class="line">            <span class="keyword">this</span>.parent[i] = i;</span><br><span class="line">            <span class="keyword">this</span>.weight[i] = <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">find</span><span class="params">(<span class="keyword">int</span> element)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">while</span> (element != parent[element])</span><br><span class="line">            element = parent[element];</span><br><span class="line">        <span class="keyword">return</span> element;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isConnected</span><span class="params">(<span class="keyword">int</span> firstElement, <span class="keyword">int</span> secondElement)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> find(firstElement) == find(secondElement);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">unionElements</span><span class="params">(<span class="keyword">int</span> firstElement, <span class="keyword">int</span> secondElement)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> firstRoot = find(firstElement);</span><br><span class="line">        <span class="keyword">int</span> secondRoot = find(secondElement);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//如果已经属于同一个集合了，就不用再合并了。</span></span><br><span class="line">        <span class="keyword">if</span> (firstRoot == secondRoot) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (weight[firstRoot] &gt; weight[secondRoot]) &#123;</span><br><span class="line">            parent[secondRoot] = firstRoot;</span><br><span class="line">            weight[firstRoot] += weight[secondRoot];</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;<span class="comment">//weight[firstRoot] &lt;= weight[secondRoot]</span></span><br><span class="line">            parent[firstRoot] = secondRoot;</span><br><span class="line">            weight[secondRoot] += weight[firstRoot];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>数据结构</category>
      </categories>
      <tags>
        <tag>并查集</tag>
      </tags>
  </entry>
  <entry>
    <title>字典树</title>
    <url>/2020/03/14/%E5%AD%97%E5%85%B8%E6%A0%91/</url>
    <content><![CDATA[<h1 id="字典树"><a href="#字典树" class="headerlink" title="字典树"></a>字典树</h1><p>Trie又被称为前缀树、字典树，所以当然是一棵树。上面这棵Trie树包含的字符串集合是{in, inn, int, tea, ten, to}。每个节点的编号是我们为了描述方便加上去的。树中的每一条边上都标识有一个字符。这些字符可以是任意一个字符集中的字符。比如对于都是小写字母的字符串，字符集就是’a’-‘z’；对于都是数字的字符串，字符集就是’0’-‘9’；对于二进制字符串，字符集就是0和1。</p>
<p><img src="%5Cimage%5Ctire-01.png" alt="1584191688083"></p>
<p> 首先字典树,用于处理大量字符串.,优点在于利用字符串的公共前缀,在存储时节约存储空间,并在查询时最大限度的减少无谓的字符串比较.。</p>
<p>使用TreeMap来完成字典树的实现</p>
<a id="more"></a>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> datastructure.tire;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.TreeMap;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>: 字典树</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: LFH</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span>: 2020/3/14  14:23</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Trie</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="class"><span class="keyword">class</span> <span class="title">Node</span></span>&#123;</span><br><span class="line">		<span class="comment">//用于标识此节点是否是一个单词的结尾</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">boolean</span> isWord;</span><br><span class="line">        <span class="keyword">public</span> TreeMap&lt;Character, Node&gt; next;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">Node</span><span class="params">(<span class="keyword">boolean</span> isWord)</span></span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.isWord = isWord;</span><br><span class="line">            next = <span class="keyword">new</span> TreeMap&lt;&gt;();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">Node</span><span class="params">()</span></span>&#123;</span><br><span class="line">            <span class="keyword">this</span>(<span class="keyword">false</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Node root;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> size;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Trie</span><span class="params">()</span></span>&#123;</span><br><span class="line">        root = <span class="keyword">new</span> Node();</span><br><span class="line">        size = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//获得trie中的单词数量</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getSize</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> size;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//向Trie中添加一个新的单词</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(String word)</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        Node cur = root;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; word.length(); i++) &#123;</span><br><span class="line">            <span class="keyword">char</span> c = word.charAt(i);</span><br><span class="line">            <span class="keyword">if</span> (cur.next.get(c) == <span class="keyword">null</span>)</span><br><span class="line">                cur.next.put(c,<span class="keyword">new</span> Node());</span><br><span class="line">            cur = cur.next.get(c);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (!cur.isWord)</span><br><span class="line">            cur.isWord = <span class="keyword">true</span>;</span><br><span class="line">            size ++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//判断是否包含某个单词</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">contains</span><span class="params">(String word)</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        Node cur = root;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; word.length(); i++) &#123;</span><br><span class="line">            <span class="keyword">char</span> c = word.charAt(i);</span><br><span class="line">            <span class="keyword">if</span> (cur.next.get(c) == <span class="keyword">null</span>)</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">            cur = cur.next.get(c);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span>  cur.isWord;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//判断是否存在以prefix为前缀的单词</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isPrefix</span><span class="params">(String prefix)</span></span>&#123;</span><br><span class="line">        Node cur = root;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; prefix.length(); i++) &#123;</span><br><span class="line">            <span class="keyword">char</span> c = prefix.charAt(i);</span><br><span class="line">            <span class="keyword">if</span> (cur.next.get(c) == <span class="keyword">null</span>)</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">            cur = cur.next.get(c);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p>对于leetcode667题使用字典树进行解决</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>:</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: LFH</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span>: 2020/3/14  16:00</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MapSum_677</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="class"><span class="keyword">class</span> <span class="title">Node</span></span>&#123;</span><br><span class="line">		<span class="comment">//表示节点后的单词的数量</span></span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">int</span> value;</span><br><span class="line">        <span class="keyword">private</span> TreeMap&lt;Character,Node&gt; next;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">Node</span><span class="params">(<span class="keyword">int</span> value)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.value = value;</span><br><span class="line">            <span class="keyword">this</span>.next = <span class="keyword">new</span> TreeMap&lt;&gt;();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">Node</span><span class="params">()</span></span>&#123;</span><br><span class="line">            <span class="keyword">this</span>(<span class="number">0</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Node root;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MapSum_677</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        root = <span class="keyword">new</span> Node();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">insert</span><span class="params">(String word, <span class="keyword">int</span> val)</span> </span>&#123;</span><br><span class="line">        Node cur = root;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; word.length(); i++) &#123;</span><br><span class="line">            <span class="keyword">char</span> c = word.charAt(i);</span><br><span class="line">            <span class="keyword">if</span> (cur.next.get(c) == <span class="keyword">null</span>)</span><br><span class="line">                cur.next.put(c,<span class="keyword">new</span> Node());</span><br><span class="line">            cur = cur.next.get(c);</span><br><span class="line">        &#125;</span><br><span class="line">        cur.value = val;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">sum</span><span class="params">(String prefix)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        Node cur = root;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; prefix.length(); i++) &#123;</span><br><span class="line">            <span class="keyword">char</span> c = prefix.charAt(i);</span><br><span class="line">            <span class="keyword">if</span> ( cur.next.get(c) == <span class="keyword">null</span>)</span><br><span class="line">                <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">            cur = cur.next.get(c);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> sum(cur);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">int</span> <span class="title">sum</span><span class="params">(Node node)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> res = node.value;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">char</span> c : node.next.keySet())</span><br><span class="line">            res += sum(node.next.get(c));</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>数据结构</category>
        <category>树形结构</category>
      </categories>
      <tags>
        <tag>字典树</tag>
      </tags>
  </entry>
  <entry>
    <title>递归算法的简单认识</title>
    <url>/2020/03/14/%E9%80%92%E5%BD%92%E7%AE%97%E6%B3%95%E7%9A%84%E7%AE%80%E5%8D%95%E8%AE%A4%E8%AF%86/</url>
    <content><![CDATA[<h1 id="递归算法的认识"><a href="#递归算法的认识" class="headerlink" title="递归算法的认识"></a>递归算法的认识</h1><p>１．先展示一个数组的递归求和。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ArraySum</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">sum</span><span class="params">(<span class="keyword">int</span> [] array)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span>  sum(array,<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//调用sum重载函数,l是数组的长度</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">sum</span><span class="params">(<span class="keyword">int</span> [] array, <span class="keyword">int</span> l)</span></span>&#123;</span><br><span class="line">        <span class="comment">//递归的返回条件</span></span><br><span class="line">        <span class="keyword">if</span> ( l == array.length)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">       <span class="comment">//实现的功能体现在相加</span></span><br><span class="line">        <span class="keyword">return</span> array[l] + sum(array,l+<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> [] nums = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>&#125;;</span><br><span class="line">        System.out.println(sum(nums));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<a id="more"></a>
<p>２．使用链表实现删除某个元素的递归</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> datastructure.recursion;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>:</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: LFH</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span>: 2020/2/27  上午12:12</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ListNode</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> value;</span><br><span class="line">    <span class="keyword">public</span> ListNode next;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ListNode</span><span class="params">(<span class="keyword">int</span> value)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.value = value;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 直接构造一个数组的链表</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> arr</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ListNode</span><span class="params">(<span class="keyword">int</span>[] arr)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (arr == <span class="keyword">null</span> || arr.length == <span class="number">0</span>)</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">" 数组空不能插入 "</span>);</span><br><span class="line">        <span class="keyword">this</span>.value = arr[<span class="number">0</span>];</span><br><span class="line">        ListNode cur = <span class="keyword">this</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; arr.length-<span class="number">1</span>; i++) &#123;</span><br><span class="line">            cur.next = <span class="keyword">new</span> ListNode(arr[i]);</span><br><span class="line">            cur = cur.next;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span></span>&#123;</span><br><span class="line">        StringBuilder res = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">        res.append(<span class="string">"链表"</span>);</span><br><span class="line">        ListNode cur = <span class="keyword">this</span>;</span><br><span class="line">        <span class="keyword">while</span> (cur!= <span class="keyword">null</span>)&#123;</span><br><span class="line">            res.append(cur.value+<span class="string">"-&gt;"</span>);</span><br><span class="line">            cur = cur.next;</span><br><span class="line">        &#125;</span><br><span class="line">        res.append(<span class="string">"NULL"</span>);</span><br><span class="line">        <span class="keyword">return</span> res.toString();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LinkedListRemove</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> ListNode <span class="title">removeElements</span><span class="params">(ListNode head,<span class="keyword">int</span> value)</span></span>&#123;</span><br><span class="line">		</span><br><span class="line">        <span class="comment">//有一个跳出递归返回条件</span></span><br><span class="line">        <span class="comment">//最小条件，当遍历到最后一个元素后链表为空，</span></span><br><span class="line">        <span class="keyword">if</span> (head == <span class="keyword">null</span>)</span><br><span class="line">            <span class="keyword">return</span> head;</span><br><span class="line">  <span class="comment">/*</span></span><br><span class="line"><span class="comment">            函数实现的功能删除一个节点。如果满足了删除的效果，就会实现从链表的头部重新</span></span><br><span class="line"><span class="comment">            插入一个数据，当返回到原来的链表中的节点，满足删除条件，将当前节点的下一个节点返回</span></span><br><span class="line"><span class="comment">            完成了删除操作。</span></span><br><span class="line"><span class="comment">           对于此操作的链表递归，相当于从链表中将每一个节点进行拆分，到了最后一个节点判断是否满足条件，</span></span><br><span class="line"><span class="comment">           使用头插的方式进行对符合条件的节点组合。</span></span><br><span class="line"><span class="comment">       */</span></span><br><span class="line">        head.next = removeElements(head.next, value);</span><br><span class="line">        <span class="keyword">return</span> head.value == value ? head.next : head ;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span>[] nums= &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>&#125;;</span><br><span class="line">        ListNode head = <span class="keyword">new</span> ListNode(nums);</span><br><span class="line">        System.out.println(head.toString());</span><br><span class="line">        ListNode res = removeElements(head, <span class="number">5</span>);</span><br><span class="line">        System.out.println(res.toString());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>对于上述链表的一个解析：</p>
<p><img src="/image/image-recursion-01.png" alt="image-20200227103019501"></p>
<p>个人总结：</p>
<p>１．本质上就是自己函数内部去调用自己的函数；</p>
<p>２．递归函数本身要有一个跳出递归循环的一个条件，如果符合这个条件才能构成递归，最后一次递归结果要能确定。</p>
<p>３．在返回结果的时候，需要去实现对函数的某个功能进行操作。例如删除。</p>
]]></content>
      <categories>
        <category>递归</category>
      </categories>
      <tags>
        <tag>递归</tag>
      </tags>
  </entry>
  <entry>
    <title>第一个简单SSM的图书管理系统</title>
    <url>/2020/03/14/%E7%AC%AC%E4%B8%80%E4%B8%AA%E7%AE%80%E5%8D%95SSM%E7%9A%84%E5%9B%BE%E4%B9%A6%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F/</url>
    <content><![CDATA[<h1 id="第一个简单的SSM图书管理系统"><a href="#第一个简单的SSM图书管理系统" class="headerlink" title="第一个简单的SSM图书管理系统"></a>第一个简单的SSM图书管理系统</h1><p>​    对于Spring，SpringMVC，Mybatis学习之后想要做一个对SSM项目的案例</p>
<h2 id="1-运行环境："><a href="#1-运行环境：" class="headerlink" title="1.运行环境："></a>1.运行环境：</h2><p>IDEA，MySQL8.0.17，Tomcat 9， Maven3.5</p>
<p>数据库环境</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">DATABASE</span> <span class="string">`ssmbook`</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">USE</span> <span class="string">`ssmbook`</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> <span class="keyword">IF</span> <span class="keyword">EXISTS</span> <span class="string">`books`</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="string">`books`</span> (</span><br><span class="line">  <span class="string">`bookNo`</span> <span class="built_in">INT</span>(<span class="number">10</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> AUTO_INCREMENT <span class="keyword">COMMENT</span> <span class="string">'书号'</span>,</span><br><span class="line">  <span class="string">`bookName`</span> <span class="built_in">VARCHAR</span>(<span class="number">48</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'书名'</span>,</span><br><span class="line">  <span class="string">`author`</span> <span class="built_in">VARCHAR</span>(<span class="number">20</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'作者'</span>,</span><br><span class="line">  <span class="string">`publish`</span> <span class="built_in">varchar</span>(<span class="number">48</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'出版社'</span>,</span><br><span class="line">  <span class="string">`publishtime`</span> <span class="built_in">VARCHAR</span>(<span class="number">48</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'出版时间'</span>,</span><br><span class="line">  <span class="string">`price`</span> <span class="built_in">INT</span>(<span class="number">10</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'价格'</span>,</span><br><span class="line">  <span class="string">`detail`</span> <span class="built_in">VARCHAR</span>(<span class="number">200</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'描述'</span>,</span><br><span class="line">  <span class="keyword">KEY</span> <span class="string">`bookNo`</span> (<span class="string">`bookNo`</span>)</span><br><span class="line">) <span class="keyword">ENGINE</span>=<span class="keyword">INNODB</span> <span class="keyword">DEFAULT</span> <span class="keyword">CHARSET</span>=utf8;</span><br><span class="line"></span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> <span class="string">`books`</span> (<span class="string">`bookNo`</span>,<span class="string">`bookName`</span>,<span class="string">`author`</span>,<span class="string">`publish`</span>,<span class="string">`publishtime`</span>,<span class="string">`price`</span>,<span class="string">`detail`</span>)</span><br><span class="line"><span class="keyword">values</span>   (<span class="number">1</span>,<span class="string">'三国演义'</span>,<span class="string">'罗贯中'</span>,<span class="string">'西安科技大学出版社'</span>,<span class="string">'2020-02-15'</span>,<span class="number">35</span>,<span class="string">'四大名著之一'</span>),</span><br><span class="line">		(<span class="number">2</span>,<span class="string">'红楼梦'</span>,<span class="string">'曹雪芹'</span>,<span class="string">'西安科技大学出版社'</span>,<span class="string">'2020-02-15'</span>,<span class="number">35</span>,<span class="string">'四大名著之一'</span>),</span><br><span class="line">		(<span class="number">3</span>,<span class="string">'西游记'</span>,<span class="string">'吴承恩'</span>,<span class="string">'西安科技大学出版社'</span>,<span class="string">'2020-02-15'</span>,<span class="number">35</span>,<span class="string">'四大名著之一'</span>),</span><br><span class="line">		(<span class="number">4</span>,<span class="string">'水浒传'</span>,<span class="string">'施耐庵'</span>,<span class="string">'西安科技大学出版社'</span>,<span class="string">'2020-02-15'</span>,<span class="number">35</span>,<span class="string">'四大名著之一'</span>);</span><br></pre></td></tr></table></figure>
<a id="more"></a>
<h2 id="2-创建一个maven项目，导入web支持，pom-xml相关配置"><a href="#2-创建一个maven项目，导入web支持，pom-xml相关配置" class="headerlink" title="2.创建一个maven项目，导入web支持，pom.xml相关配置"></a>2.创建一个maven项目，导入web支持，pom.xml相关配置</h2><h3 id="1-添加依赖"><a href="#1-添加依赖" class="headerlink" title="1.添加依赖"></a>1.添加依赖</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--junit--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.11<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--数据库驱动--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>8.0.17<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--c3p0数据库连接池--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.mchange<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>c3p0<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.9.5.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--servlet jsp--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.servlet<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>servlet-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.4<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.servlet<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jsp-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.servlet<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jstl<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--mybatis--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.5.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-spring<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.0.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--Spring--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-webmvc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.1.9.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-jdbc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.1.9.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">     <span class="comment">&lt;!--lombok--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.16.18<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="2-资源过滤"><a href="#2-资源过滤" class="headerlink" title="2.资源过滤"></a>2.资源过滤</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">resources</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">resource</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">directory</span>&gt;</span>src/main/java<span class="tag">&lt;/<span class="name">directory</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">includes</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*.properties<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*.xml<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">includes</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">filtering</span>&gt;</span>false<span class="tag">&lt;/<span class="name">filtering</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">resource</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">resource</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">directory</span>&gt;</span>src/main/resources<span class="tag">&lt;/<span class="name">directory</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">includes</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*.properties<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*.xml<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">includes</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">filtering</span>&gt;</span>false<span class="tag">&lt;/<span class="name">filtering</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">resource</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">resources</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="3-构建整个项目的骨架"><a href="#3-构建整个项目的骨架" class="headerlink" title="3.构建整个项目的骨架."></a>3.构建整个项目的骨架.</h2><p><img src="C:%5CUsers%5CLFH%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5C1581756493942.png" alt="1581756493942"></p>
<h4 id="3-1对于数据库连接池的基本配置"><a href="#3-1对于数据库连接池的基本配置" class="headerlink" title="3.1对于数据库连接池的基本配置"></a>3.1对于数据库连接池的基本配置</h4><p>创建database.properties</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="meta">jdbc.driver</span>=<span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line"><span class="meta">jdbc.url</span>=<span class="string">jdbc:mysql://localhost:3306/ssmbook?useUnicode=true&amp;characterEncoding=utf8&amp;serverTimezone=GMT%2B8&amp;useSSL=false</span></span><br><span class="line"><span class="meta">jdbc.username</span>=<span class="string">root</span></span><br><span class="line"><span class="meta">jdbc.password</span>=<span class="string">1234</span></span><br></pre></td></tr></table></figure>

<p>3.2.编写BookMapper接口</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">BookMapper</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//增加一本书</span></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">addBook</span><span class="params">(Books book)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//删除一本书</span></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">deleteBookByNo</span><span class="params">(<span class="keyword">int</span> bookNo)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//修改一本书</span></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">updateBook</span><span class="params">(Books book)</span></span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//根据书号查询</span></span><br><span class="line">    <span class="function">Books <span class="title">queryBookByNo</span><span class="params">(<span class="keyword">int</span> bookNo)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//查询全部书</span></span><br><span class="line">    <span class="function">List&lt;Books&gt; <span class="title">queryAllBook</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>3.2编写BookMapper.xml</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8" ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">mapper</span></span></span><br><span class="line"><span class="meta">        <span class="meta-keyword">PUBLIC</span> <span class="meta-string">"-//mybatis.org//DTD Mapper 3.0//EN"</span></span></span><br><span class="line"><span class="meta">        <span class="meta-string">"http://mybatis.org/dtd/mybatis-3-mapper.dtd"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">"xust.lfh.dao.BookMapper"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--增加一本书--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">"addBook"</span> <span class="attr">parameterType</span>=<span class="string">"Books"</span>&gt;</span></span><br><span class="line">        insert into ssmbook.books (bookNo,bookName, author, publish, publishtime, price, detail)</span><br><span class="line">        values(#&#123;bookNo&#125;,#&#123;bookName&#125;,#&#123;author&#125;,#&#123;publish&#125;,#&#123;publishtime&#125;,#&#123;price&#125;,#&#123;detail&#125;)</span><br><span class="line">    <span class="tag">&lt;/<span class="name">insert</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--删除一本书--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">delete</span> <span class="attr">id</span>=<span class="string">"deleteBookByNo"</span> <span class="attr">parameterType</span>=<span class="string">"bookNo"</span>&gt;</span></span><br><span class="line">        delete from ssmbook.books</span><br><span class="line">        where bookNo = #&#123;bookNo&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">delete</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--修改一本书--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">update</span> <span class="attr">id</span>=<span class="string">"updateBook"</span> <span class="attr">parameterType</span>=<span class="string">"Books"</span>&gt;</span></span><br><span class="line">        update ssmbook.books</span><br><span class="line">        set bookNo=#&#123;bookNo&#125;,bookName=#&#123;bookName&#125;,author=#&#123;author&#125;,publish = #&#123;publish&#125;,</span><br><span class="line">            publishtime=#&#123;publishtime&#125;,price=#&#123;price&#125;,detail=#&#123;detail&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">update</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--查询一本书--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"queryBookByNo"</span> <span class="attr">resultType</span>=<span class="string">"Books"</span>&gt;</span></span><br><span class="line">        select * from ssmbook.books</span><br><span class="line">         where bookNo=#&#123;bookNo&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--查询全部书--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"queryAllBook"</span> <span class="attr">resultType</span>=<span class="string">"Books"</span>&gt;</span></span><br><span class="line">        select * from books</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="3-2编写Service层的接口和实现类"><a href="#3-2编写Service层的接口和实现类" class="headerlink" title="3.2编写Service层的接口和实现类"></a>3.2编写Service层的接口和实现类</h4><p>​    接口</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//BookService:底下需要去实现,调用dao层</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">BookService</span> </span>&#123;</span><br><span class="line">    <span class="comment">//增加一个Book</span></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">addBook</span><span class="params">(Books book)</span></span>;</span><br><span class="line">    <span class="comment">//根据id删除一个Book</span></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">deleteBookById</span><span class="params">(<span class="keyword">int</span> id)</span></span>;</span><br><span class="line">    <span class="comment">//更新Book</span></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">updateBook</span><span class="params">(Books books)</span></span>;</span><br><span class="line">    <span class="comment">//根据id查询,返回一个Book</span></span><br><span class="line">    <span class="function">Books <span class="title">queryBookById</span><span class="params">(<span class="keyword">int</span> id)</span></span>;</span><br><span class="line">    <span class="comment">//查询全部Book,返回list集合</span></span><br><span class="line">    <span class="function">List&lt;Books&gt; <span class="title">queryAllBook</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>实现类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BookServiceImpl</span> <span class="keyword">implements</span> <span class="title">BookService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> BookMapper bookMapper;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setBookMapper</span><span class="params">(BookMapper bookMapper)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.bookMapper = bookMapper;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">addBook</span><span class="params">(Books book)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> bookMapper.addBook(book);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">deleteBookByNo</span><span class="params">(<span class="keyword">int</span> bookNo)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> bookMapper.deleteBookByNo(bookNo);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">updateBook</span><span class="params">(Books book)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> bookMapper.updateBook(book);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Books <span class="title">queryBookByNo</span><span class="params">(<span class="keyword">int</span> bookNo)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> bookMapper.queryBookByNo(bookNo);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;Books&gt; <span class="title">queryAllBook</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> bookMapper.queryAllBook();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="4-配置Spring层"><a href="#4-配置Spring层" class="headerlink" title="4.配置Spring层"></a>4.配置Spring层</h2><h4 id="4-1创建spring-dao-xml"><a href="#4-1创建spring-dao-xml" class="headerlink" title="4.1创建spring-dao.xml"></a>4.1创建spring-dao.xml</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;!--配置整合mybatis--&gt;</span><br><span class="line">&lt;!--1.关联数据库文件--&gt;</span><br><span class="line">&lt;!--2.配置数据库连接池--&gt;</span><br><span class="line">&lt;!--3.配置SqlSessionFactory对象--&gt;</span><br><span class="line">&lt;!--4.扫描Dao接口包，动态实现Dao接口注册到SPring容器中--&gt;</span><br></pre></td></tr></table></figure>

<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">"http://www.springframework.org/schema/context"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="tag"><span class="string">http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">http://www.springframework.org/schema/context</span></span></span><br><span class="line"><span class="tag"><span class="string">https://www.springframework.org/schema/context/spring-context.xsd"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 配置整合mybatis --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 1.关联数据库文件 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:property-placeholder</span> <span class="attr">location</span>=<span class="string">"classpath:database.properties"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 2.数据库连接池 --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--数据库连接池</span></span><br><span class="line"><span class="comment">dbcp  半自动化操作  不能自动连接</span></span><br><span class="line"><span class="comment">c3p0  自动化操作（自动的加载配置文件 并且设置到对象里面）</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"dataSource"</span> <span class="attr">class</span>=<span class="string">"com.mchange.v2.c3p0.ComboPooledDataSource"</span>&gt;</span></span><br><span class="line">		<span class="comment">&lt;!-- 配置连接池属性 --&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"driverClass"</span> <span class="attr">value</span>=<span class="string">"$&#123;jdbc.driver&#125;"</span>/&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"jdbcUrl"</span> <span class="attr">value</span>=<span class="string">"$&#123;jdbc.url&#125;"</span>/&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"user"</span> <span class="attr">value</span>=<span class="string">"$&#123;jdbc.username&#125;"</span>/&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">value</span>=<span class="string">"$&#123;jdbc.password&#125;"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">		<span class="comment">&lt;!-- c3p0连接池的私有属性 --&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"maxPoolSize"</span> <span class="attr">value</span>=<span class="string">"30"</span>/&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"minPoolSize"</span> <span class="attr">value</span>=<span class="string">"10"</span>/&gt;</span></span><br><span class="line">		<span class="comment">&lt;!-- 关闭连接后不自动commit --&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"autoCommitOnClose"</span> <span class="attr">value</span>=<span class="string">"false"</span>/&gt;</span></span><br><span class="line">		<span class="comment">&lt;!-- 获取连接超时时间 --&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"checkoutTimeout"</span> <span class="attr">value</span>=<span class="string">"10000"</span>/&gt;</span></span><br><span class="line">		<span class="comment">&lt;!-- 当获取连接失败重试次数 --&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"acquireRetryAttempts"</span> <span class="attr">value</span>=<span class="string">"2"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 3.配置SqlSessionFactory对象 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"sqlSessionFactory"</span> <span class="attr">class</span>=<span class="string">"org.mybatis.spring.SqlSessionFactoryBean"</span>&gt;</span></span><br><span class="line">		<span class="comment">&lt;!-- 注入数据库连接池 --&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"dataSource"</span> <span class="attr">ref</span>=<span class="string">"dataSource"</span>/&gt;</span></span><br><span class="line">		<span class="comment">&lt;!-- 配置MyBaties全局配置文件:mybatis-config.xml --&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"configLocation"</span> <span class="attr">value</span>=<span class="string">"classpath:mybatis-config.xml"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 4.配置扫描Dao接口包，动态实现Dao接口注入到spring容器中 --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--解释 ： https://www.cnblogs.com/jpfss/p/7799806.html--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.mybatis.spring.mapper.MapperScannerConfigurer"</span>&gt;</span></span><br><span class="line">		<span class="comment">&lt;!-- 注入sqlSessionFactory --&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"sqlSessionFactoryBeanName"</span> <span class="attr">value</span>=<span class="string">"sqlSessionFactory"</span>/&gt;</span></span><br><span class="line">		<span class="comment">&lt;!-- 给出需要扫描Dao接口包 --&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"basePackage"</span> <span class="attr">value</span>=<span class="string">"com.kuang.dao"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="4-2创建spring-service-xml文件"><a href="#4-2创建spring-service-xml文件" class="headerlink" title="4.2创建spring-service.xml文件"></a>4.2创建spring-service.xml文件</h4><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">"http://www.springframework.org/schema/context"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="tag"><span class="string">    http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">    http://www.springframework.org/schema/context</span></span></span><br><span class="line"><span class="tag"><span class="string">    http://www.springframework.org/schema/context/spring-context.xsd"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 扫描service相关的bean --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">"xust.lfh.service"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--BookServiceImpl注入到IOC容器中--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"BookServiceImpl"</span> <span class="attr">class</span>=<span class="string">"xust.lfh.service.BookServiceImpl"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"bookMapper"</span> <span class="attr">ref</span>=<span class="string">"bookMapper"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 配置事务管理器 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"transactionManager"</span> <span class="attr">class</span>=<span class="string">"org.springframework.jdbc.datasource.DataSourceTransactionManager"</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 注入数据库连接池 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"dataSource"</span> <span class="attr">ref</span>=<span class="string">"dataSource"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="5-配置SpringMVC层"><a href="#5-配置SpringMVC层" class="headerlink" title="5.配置SpringMVC层"></a>5.配置SpringMVC层</h2><h4 id="5-1web-xml中注册DispatcherServlet"><a href="#5-1web-xml中注册DispatcherServlet" class="headerlink" title="5.1web.xml中注册DispatcherServlet"></a>5.1web.xml中注册DispatcherServlet</h4><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--DispatcherServlet--&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>DispatcherServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>org.springframework.web.servlet.DispatcherServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>contextConfigLocation<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>classpath:applicationContext.xml<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">load-on-startup</span>&gt;</span>1<span class="tag">&lt;/<span class="name">load-on-startup</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>DispatcherServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line"></span><br><span class="line">   <span class="comment">&lt;!--encodingFilter--&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">filter</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>encodingFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">filter-class</span>&gt;</span></span><br><span class="line">           org.springframework.web.filter.CharacterEncodingFilter</span><br><span class="line">       <span class="tag">&lt;/<span class="name">filter-class</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>encoding<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>utf-8<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>encodingFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/*<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line">   </span><br><span class="line">   <span class="comment">&lt;!--Session过期时间--&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">session-config</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">session-timeout</span>&gt;</span>15<span class="tag">&lt;/<span class="name">session-timeout</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">session-config</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="5-2创建spring-mvc-xml"><a href="#5-2创建spring-mvc-xml" class="headerlink" title="5.2创建spring-mvc.xml"></a>5.2创建spring-mvc.xml</h4><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">"http://www.springframework.org/schema/context"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:mvc</span>=<span class="string">"http://www.springframework.org/schema/mvc"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="tag"><span class="string">    http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">    http://www.springframework.org/schema/context</span></span></span><br><span class="line"><span class="tag"><span class="string">    http://www.springframework.org/schema/context/spring-context.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">    http://www.springframework.org/schema/mvc</span></span></span><br><span class="line"><span class="tag"><span class="string">    https://www.springframework.org/schema/mvc/spring-mvc.xsd"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 配置SpringMVC --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 1.开启SpringMVC注解驱动 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mvc:annotation-driven</span> /&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 2.静态资源默认servlet配置--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mvc:default-servlet-handler</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 3.配置jsp 显示ViewResolver视图解析器 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.springframework.web.servlet.view.InternalResourceViewResolver"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"viewClass"</span> <span class="attr">value</span>=<span class="string">"org.springframework.web.servlet.view.JstlView"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"prefix"</span> <span class="attr">value</span>=<span class="string">"/WEB-INF/jsp/"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"suffix"</span> <span class="attr">value</span>=<span class="string">".jsp"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 4.扫描web相关的bean --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">"xust.lfh.controller"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="5-3Spring配置整合文件，applicationContext-xml"><a href="#5-3Spring配置整合文件，applicationContext-xml" class="headerlink" title="5.3Spring配置整合文件，applicationContext.xml"></a>5.3<strong>Spring配置整合文件，applicationContext.xml</strong></h4><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/beans/spring-beans.xsd"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">import</span> <span class="attr">resource</span>=<span class="string">"spring/spring-dao.xml"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">import</span> <span class="attr">resource</span>=<span class="string">"spring/spring-service.xml"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">import</span> <span class="attr">resource</span>=<span class="string">"spring/spring-mvc.xml"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="6-编写Contller和视图层"><a href="#6-编写Contller和视图层" class="headerlink" title="6.编写Contller和视图层"></a>6.编写Contller和视图层</h2><p>6.1BookController类编写</p>
]]></content>
      <categories>
        <category>SSM</category>
      </categories>
      <tags>
        <tag>springMVC</tag>
        <tag>mybatis</tag>
        <tag>spring</tag>
      </tags>
  </entry>
  <entry>
    <title>数组的简单实现</title>
    <url>/2020/03/14/%E6%95%B0%E7%BB%84%E7%9A%84%E7%AE%80%E5%8D%95%E5%AE%9E%E7%8E%B0/</url>
    <content><![CDATA[<h1 id="数组的简单应用"><a href="#数组的简单应用" class="headerlink" title="数组的简单应用"></a>数组的简单应用</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> datastructure.arraydemo;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>:  注意对象转换的问题</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: LFH</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span>: 2020/2/29  下午1:50</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Array</span>&lt;<span class="title">E</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> E [] data;<span class="comment">//声明一个空的数组</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> size;<span class="comment">//表示数组中的元素个数</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> capacity 数组容量</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Array</span><span class="params">(<span class="keyword">int</span> capacity)</span></span>&#123;</span><br><span class="line">        data = (E[]) <span class="keyword">new</span> Object [capacity];</span><br><span class="line">        size = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Array</span><span class="params">(E[] arr)</span></span>&#123;</span><br><span class="line">        data = (E[] )<span class="keyword">new</span> Object [arr.length];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">            data[i] = arr[i];</span><br><span class="line">            size = arr.length;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Array</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>(<span class="number">10</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getSize</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> size;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getCapacity</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> data.length;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isEmpty</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> size == <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isFull</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> size == data.length;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 实现按顺序进行插入</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> e</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addByOrder</span><span class="params">(E e)</span></span>&#123;</span><br><span class="line">        <span class="comment">/*1.需要找到插入的位置</span></span><br><span class="line"><span class="comment">            2.对插入位置后面的元素进行后移</span></span><br><span class="line"><span class="comment">            3.赋值给索引即可</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="keyword">int</span> i = serach(e);</span><br><span class="line">        <span class="keyword">if</span> (i!=-<span class="number">1</span>)&#123;</span><br><span class="line">            <span class="comment">//完成数据移动</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = size; j &lt;i ; j--) &#123;</span><br><span class="line">                data[j+<span class="number">1</span>] = data[size] ;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//对指定位置插入</span></span><br><span class="line">            data[i] = e;</span><br><span class="line">            size++; <span class="comment">//完成插入后对数组长度进行＋１</span></span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"插入数据出错 "</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 在指定位置进行插入元素</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> index</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> e</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addByIndex</span><span class="params">(<span class="keyword">int</span> index,E e)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (isFull())</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"数组满,不能进进行插入"</span>);</span><br><span class="line">        <span class="keyword">if</span> (index &lt; <span class="number">0</span> || index &gt; size)&#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"s数组异常"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = size - <span class="number">1</span>; i &gt;= index ; i--) &#123;</span><br><span class="line">            data[i+<span class="number">1</span>] = data[i] ;</span><br><span class="line">        &#125;</span><br><span class="line">        data [index] = e;</span><br><span class="line">        size ++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 直接进行头插调用带索引的插入</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> num</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addFirst</span><span class="params">(E num)</span></span>&#123;</span><br><span class="line">        addByIndex(<span class="number">0</span>,num);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 实现数组的尾插方法</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> e</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addLast</span><span class="params">(E e)</span></span>&#123;</span><br><span class="line">        addByIndex(size,e);</span><br><span class="line">        <span class="comment">//if (isFull())</span></span><br><span class="line">        <span class="comment">//    throw new IllegalArgumentException("Add c出错 ");</span></span><br><span class="line">        <span class="comment">//data[size]=e;</span></span><br><span class="line">        <span class="comment">//size ++;</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 修改索引处的值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> index</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> e</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">set</span><span class="params">( <span class="keyword">int</span> index,E e)</span></span>&#123;</span><br><span class="line">        data[index] = e;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 实现获取索引位置处的数值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> index</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> E <span class="title">get</span><span class="params">(<span class="keyword">int</span> index)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (index &lt; <span class="number">0</span> || index &gt; size)</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"s数组异常"</span>);</span><br><span class="line">        <span class="keyword">return</span> data[index];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 判断是否包含某只元素</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> num</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span>　</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">contains</span><span class="params">(E num)</span></span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; size; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (data[i]==num)</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> E <span class="title">getLast</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (size ==<span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">" 数组为空 "</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> data[size-<span class="number">1</span>];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 删除数组中的一个元素,并且返回</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> num</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> E <span class="title">delete</span><span class="params">(E num)</span></span>&#123;</span><br><span class="line">       <span class="keyword">if</span> (isEmpty())&#123;</span><br><span class="line">           System.out.println(<span class="string">"数组为空，不能进行删除"</span>);</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">int</span> index = serach(num);</span><br><span class="line">       <span class="keyword">if</span> (index==-<span class="number">1</span>)&#123;</span><br><span class="line">           System.out.println(<span class="string">"找不到此元素，无法进行删除"</span>);</span><br><span class="line">       &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">           <span class="keyword">for</span> (<span class="keyword">int</span> i = index; i &lt; size-<span class="number">1</span>; i++) &#123;</span><br><span class="line">               data[index] = data[index+<span class="number">1</span>];</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br><span class="line">       size-- ;</span><br><span class="line">       <span class="keyword">return</span> num;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> E <span class="title">removeLast</span><span class="params">()</span></span>&#123;</span><br><span class="line">        E temp = data[size-<span class="number">1</span>];</span><br><span class="line">        delete(data[size-<span class="number">1</span>]);</span><br><span class="line">        <span class="keyword">return</span> temp;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据元素值，返回在数组中的索引,如果找不到返回－１</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> num　</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span>　索引值</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">serach</span><span class="params">(E num)</span></span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; size; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (data[i]==num)</span><br><span class="line">                <span class="keyword">return</span> i;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 交换两个索引位置的数据</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> i</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> j</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">swap</span><span class="params">(<span class="keyword">int</span> i,<span class="keyword">int</span> j)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>( i &lt; <span class="number">0</span> || i &gt;= size || j &lt; <span class="number">0</span> || j &gt;=  size)</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">" index is illegal"</span>);</span><br><span class="line">        E t = data[i];</span><br><span class="line">        data[i] = data[j];</span><br><span class="line">        data[j] = t;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        StringBuilder res = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; size; i++) &#123;</span><br><span class="line">            res.append(data[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span>  res.toString();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>数据结构</category>
        <category>数组</category>
      </categories>
      <tags>
        <tag>数组</tag>
      </tags>
  </entry>
  <entry>
    <title>数组单项队列的简单使用</title>
    <url>/2020/03/14/%E6%95%B0%E7%BB%84%E5%8D%95%E9%A1%B9%E9%98%9F%E5%88%97%E7%9A%84%E7%AE%80%E5%8D%95%E4%BD%BF%E7%94%A8/</url>
    <content><![CDATA[<p><strong>数组单向队列的简单使用</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ArrayQueue</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> maxSize;    <span class="comment">//数组最大容量</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> front; <span class="comment">//队列头</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> rear;  <span class="comment">//队尾</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span>[] arr; <span class="comment">//存放队列数据</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//创建队列的构造器</span></span><br><span class="line">    ArrayQueue(<span class="keyword">int</span> arrMaxSize)&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">this</span>.maxSize = arrMaxSize;</span><br><span class="line">        <span class="keyword">this</span>.arr = <span class="keyword">new</span> <span class="keyword">int</span>[arrMaxSize];</span><br><span class="line">        <span class="keyword">this</span>.front =  -<span class="number">1</span>; <span class="comment">//空队列首位指针值相等</span></span><br><span class="line">        <span class="keyword">this</span>.rear = -<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//判断队列是否满</span></span><br><span class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">isFull</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> rear == maxSize - <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//判断队列是否空</span></span><br><span class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">isEmpty</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> rear == front;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//添加数据到队列</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">addQueue</span><span class="params">(<span class="keyword">int</span> n)</span></span>&#123;</span><br><span class="line">        <span class="comment">//判断队列是否满</span></span><br><span class="line">        <span class="keyword">if</span> (isFull())&#123;</span><br><span class="line">            System.out.println(<span class="string">"队列满不能加入数据"</span>);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        rear++; <span class="comment">//队尾指针后移</span></span><br><span class="line">        arr[rear] = n;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//出队 先进先出bug,并没有修改</span></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">getQueue</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">//判断队列是否空</span></span><br><span class="line">        <span class="keyword">if</span> (isEmpty())&#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"队列空，不能取数据"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        front++;</span><br><span class="line">        <span class="keyword">int</span> temp = arr[front];</span><br><span class="line">        <span class="comment">//从队列中将先前的元素移除</span></span><br><span class="line">        <span class="comment">//出队列操作后要将所有数据向前移动；</span></span><br><span class="line">        <span class="keyword">return</span> temp;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//显示队列的所有数据</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">showQueue</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">//遍历</span></span><br><span class="line">        <span class="keyword">if</span> (isEmpty())&#123;</span><br><span class="line">            System.out.println(<span class="string">"队列空"</span>);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;arr.length ; i++) &#123;</span><br><span class="line">            System.out.println(<span class="string">"arr["</span>+i+<span class="string">"]\t=\t"</span>+arr[i]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">int</span>  <span class="title">headQueue</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (isEmpty())&#123;</span><br><span class="line">            <span class="keyword">throw</span>  <span class="keyword">new</span> RuntimeException(<span class="string">"队列囧的没有数据"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> arr[front + <span class="number">1</span>];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<a id="more"></a>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ArrayQueueDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        ArrayQueue arrayQueue = <span class="keyword">new</span> ArrayQueue(<span class="number">3</span>);</span><br><span class="line">        Scanner sc = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">        <span class="keyword">char</span> key =  <span class="string">' '</span>;</span><br><span class="line">        <span class="keyword">boolean</span> loop = <span class="keyword">true</span>;</span><br><span class="line">        <span class="keyword">while</span>(loop)&#123;</span><br><span class="line">            System.out.println(<span class="string">"s(show): 显示队列"</span>);</span><br><span class="line">            System.out.println(<span class="string">"e(exit): 退出程序"</span>);</span><br><span class="line">            System.out.println(<span class="string">"a(add)：  添加数据"</span> );</span><br><span class="line">            System.out.println(<span class="string">"g(get):  出队"</span>);</span><br><span class="line">            System.out.println(<span class="string">"h(head):  查看对头数据"</span>);</span><br><span class="line">            key = sc.next().charAt(<span class="number">0</span>);</span><br><span class="line">            <span class="keyword">switch</span> (key)&#123;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">'s'</span>:</span><br><span class="line">                    arrayQueue.showQueue();</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">'e'</span>:</span><br><span class="line">                    sc.close();</span><br><span class="line">                    loop = <span class="keyword">false</span>;</span><br><span class="line"></span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">'a'</span>:</span><br><span class="line">                    System.out.println(<span class="string">"输入一个数"</span>);</span><br><span class="line">                    <span class="keyword">int</span> value = sc.nextInt();</span><br><span class="line">                    arrayQueue.addQueue(value);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">'g'</span>:</span><br><span class="line">                    <span class="keyword">try</span>&#123;</span><br><span class="line">                        <span class="keyword">int</span> res = arrayQueue.getQueue();</span><br><span class="line">                        System.out.println(<span class="string">"取出的数据是"</span>+res);</span><br><span class="line">                    &#125;<span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">                        System.out.println(e.getMessage());</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">'h'</span>:</span><br><span class="line">                    <span class="keyword">try</span>&#123;</span><br><span class="line">                        <span class="keyword">int</span> res = arrayQueue.headQueue();</span><br><span class="line">                        System.out.println(<span class="string">"队列头数据是"</span>+res);</span><br><span class="line">                    &#125;<span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">                        System.out.println(e.getMessage());</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">"程序退出"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>数据结构</category>
      </categories>
      <tags>
        <tag>数组</tag>
        <tag>队列</tag>
      </tags>
  </entry>
  <entry>
    <title>数组与稀疏矩阵的简单应用</title>
    <url>/2020/03/14/%E6%95%B0%E7%BB%84%E4%B8%8E%E7%A8%80%E7%96%8F%E7%9F%A9%E9%98%B5%E7%9A%84%E7%AE%80%E5%8D%95%E5%BA%94%E7%94%A8/</url>
    <content><![CDATA[<h1 id="数组与稀疏矩阵的简单应用"><a href="#数组与稀疏矩阵的简单应用" class="headerlink" title="数组与稀疏矩阵的简单应用"></a>数组与稀疏矩阵的简单应用</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>:此程序是一个五子棋的一个保存当前对局，还有对已经保存对局恢复的一段代码</span></span><br><span class="line"><span class="comment"> *      整个过程分为，将棋盘上的二维数组，转换为稀疏数组，将稀疏数组在转换为二维数组</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: LFH</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span>: 2020/2/17  20:30</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SparseArry</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**创建一个原始的二维数组，11*11</span></span><br><span class="line"><span class="comment">                0：表示没有其子，1 黑子 2 白字</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="keyword">int</span> chessArr1[][] = <span class="keyword">new</span> <span class="keyword">int</span> [<span class="number">11</span>][<span class="number">11</span>];</span><br><span class="line">        chessArr1[<span class="number">1</span>][<span class="number">2</span>] = <span class="number">1</span>;</span><br><span class="line">        chessArr1[<span class="number">2</span>][<span class="number">3</span>] = <span class="number">2</span>;</span><br><span class="line">        System.out.println(<span class="string">"原始二维数组-----------"</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span>[] row: chessArr1) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> data : row)&#123;</span><br><span class="line">                System.out.printf(data+<span class="string">"\t"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println(<span class="string">" "</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">"将二维数组遍历为一维数组"</span>);</span><br><span class="line">        <span class="keyword">int</span> sum = <span class="number">0</span>;<span class="comment">//通过sum获取数组的大小  创建出数组</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">11</span>; i++)&#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; <span class="number">11</span>; j++)&#123;</span><br><span class="line">                <span class="keyword">if</span> (chessArr1[i][j]!=<span class="number">0</span>)&#123;</span><br><span class="line">                    sum++;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">            /稀疏数组的固定为3列        row   col       value</span></span><br><span class="line"><span class="comment">                         第一行       行长  列长     总共多少个不为0的值</span></span><br><span class="line"><span class="comment">             每当二维数组存在一个不为0的数；稀疏数组都会增加一行</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="keyword">int</span> sparseArr[][] = <span class="keyword">new</span> <span class="keyword">int</span>[sum + <span class="number">1</span>][<span class="number">3</span>];</span><br><span class="line">        sparseArr[<span class="number">0</span>][<span class="number">0</span>] = <span class="number">11</span>;</span><br><span class="line">        sparseArr[<span class="number">0</span>][<span class="number">1</span>] = <span class="number">11</span>;</span><br><span class="line">        sparseArr[<span class="number">0</span>][<span class="number">2</span>] = sum;</span><br><span class="line">        <span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">11</span>; i++)&#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; <span class="number">11</span>; j++)&#123;</span><br><span class="line">                <span class="keyword">if</span> (chessArr1[i][j]!=<span class="number">0</span>)&#123;</span><br><span class="line">                    count++;</span><br><span class="line">                    sparseArr[count][<span class="number">0</span>] = i;</span><br><span class="line">                    sparseArr[count][<span class="number">1</span>] = j;</span><br><span class="line">                    sparseArr[count][<span class="number">2</span>] = chessArr1[i][j];</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">            输出系数数组在文件中</span></span><br><span class="line"><span class="comment">            文件读取步骤</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        File file = <span class="keyword">new</span> File(<span class="string">"D:/sparse.txt"</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">"输出稀疏数组————————"</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; sparseArr.length ; i++) &#123;</span><br><span class="line">            System.out.println(sparseArr[i][<span class="number">0</span>]+<span class="string">"\t"</span>+sparseArr[i][<span class="number">1</span>]+<span class="string">"\t"</span>+sparseArr[i][<span class="number">2</span>]+<span class="string">"\t"</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 将稀疏数组保存在文件中</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        System.out.println(<span class="string">"将稀疏数组转换为二维数组------------"</span>);</span><br><span class="line">        <span class="comment">//                              系数矩阵的00 为行  01 为列</span></span><br><span class="line">        <span class="keyword">int</span> chessArr2[][] = <span class="keyword">new</span> <span class="keyword">int</span> [sparseArr[<span class="number">0</span>][<span class="number">0</span>]][sparseArr[<span class="number">0</span>][<span class="number">1</span>]];</span><br><span class="line">        <span class="comment">//先创建一个数组出来</span></span><br><span class="line">        <span class="comment">//2.对数组进行赋值遍历稀疏数组</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;sparseArr.length ; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; <span class="number">3</span>; j++) &#123;</span><br><span class="line">                <span class="comment">//稀疏数组的第一行</span></span><br><span class="line">                <span class="comment">/*</span></span><br><span class="line"><span class="comment">                          row             col             value</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">                            二维数组的某个值就是  稀疏数组的某一行</span></span><br><span class="line"><span class="comment">                      二维数组      [i]         [j]    =    值</span></span><br><span class="line"><span class="comment">                                [i][0]        [i][1]        [i][2]</span></span><br><span class="line"><span class="comment">                   */</span></span><br><span class="line">                chessArr2[sparseArr[i][<span class="number">0</span>]][sparseArr[i][<span class="number">1</span>]] = sparseArr[i][<span class="number">2</span>];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">"恢复后的二维数组"</span>);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span>[] row :chessArr2)&#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> data: row) &#123;</span><br><span class="line">                System.out.print(data+<span class="string">"\t"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println(<span class="string">" "</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>数据结构</category>
        <category>数组</category>
      </categories>
      <tags>
        <tag>稀疏数组</tag>
        <tag>数组</tag>
      </tags>
  </entry>
  <entry>
    <title>对于前端布局使用bootstarp可视化布局进行设计</title>
    <url>/2020/03/14/%E5%AF%B9%E4%BA%8E%E5%89%8D%E7%AB%AF%E5%B8%83%E5%B1%80%E4%BD%BF%E7%94%A8bootstarp%E5%8F%AF%E8%A7%86%E5%8C%96%E5%B8%83%E5%B1%80%E8%BF%9B%E8%A1%8C%E8%AE%BE%E8%AE%A1/</url>
    <content><![CDATA[<h1 id="对于前端布局使用bootstarp可视化布局进行设计"><a href="#对于前端布局使用bootstarp可视化布局进行设计" class="headerlink" title="对于前端布局使用bootstarp可视化布局进行设计"></a>对于前端布局使用bootstarp可视化布局进行设计</h1><h1 id="处理json乱码的问题"><a href="#处理json乱码的问题" class="headerlink" title="处理json乱码的问题"></a>处理json乱码的问题</h1><p>配置上一种方法比较麻烦，如果项目中有许多请求则每一个都要添加，可以通过Spring配置统一指定，这样就不用每次都去处理了！</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mvc:annotation-driven</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mvc:message-converters</span> <span class="attr">register-defaults</span>=<span class="string">"true"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.springframework.http.converter.StringHttpMessageConverter"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">value</span>=<span class="string">"UTF-8"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.springframework.http.converter.json.MappingJackson2HttpMessageConverter"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"objectMapper"</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.springframework.http.converter.json.Jackson2ObjectMapperFactoryBean"</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"failOnEmptyBeans"</span> <span class="attr">value</span>=<span class="string">"false"</span>/&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">mvc:message-converters</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">mvc:annotation-driven</span>&gt;</span></span><br></pre></td></tr></table></figure>
<a id="more"></a>
<p>对于时间的打印</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/time"</span>)</span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">json2</span><span class="params">()</span> <span class="keyword">throws</span> JsonProcessingException </span>&#123;</span><br><span class="line"></span><br><span class="line">        ObjectMapper mapper = <span class="keyword">new</span> ObjectMapper();</span><br><span class="line">        <span class="comment">//不使用时间戳的方式</span></span><br><span class="line">        mapper.configure(SerializationFeature.WRITE_DATES_AS_TIMESTAMPS, <span class="keyword">false</span>);</span><br><span class="line">        <span class="comment">//自定义日期格式对象</span></span><br><span class="line">        SimpleDateFormat sdf = <span class="keyword">new</span> SimpleDateFormat(<span class="string">"yyyy-MM-dd HH:mm:ss"</span>);</span><br><span class="line">        <span class="comment">//指定日期格式</span></span><br><span class="line">        mapper.setDateFormat(sdf);</span><br><span class="line"></span><br><span class="line">        Date date = <span class="keyword">new</span> Date();</span><br><span class="line">        String str = mapper.writeValueAsString(date);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> str; <span class="comment">//由于@ResponseBody注解，这里会将str转成json格式返回；十分方便</span></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p>jsonUtil</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JsonUtils</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">getJson</span><span class="params">(Object object)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> getJson(object,<span class="string">"yyyy-MM-dd HH:mm:ss"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">getJson</span><span class="params">(Object object,String dateFormat)</span> </span>&#123;</span><br><span class="line">        ObjectMapper mapper = <span class="keyword">new</span> ObjectMapper();</span><br><span class="line">        <span class="comment">//不使用时间差的方式</span></span><br><span class="line">        mapper.configure(SerializationFeature.WRITE_DATES_AS_TIMESTAMPS, <span class="keyword">false</span>);</span><br><span class="line">        <span class="comment">//自定义日期格式对象</span></span><br><span class="line">        SimpleDateFormat sdf = <span class="keyword">new</span> SimpleDateFormat(dateFormat);</span><br><span class="line">        <span class="comment">//指定日期格式</span></span><br><span class="line">        mapper.setDateFormat(sdf);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> mapper.writeValueAsString(object);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (JsonProcessingException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>实用工具类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/utils"</span>)</span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">json3</span><span class="params">()</span> <span class="keyword">throws</span> JsonProcessingException </span>&#123;</span><br><span class="line"></span><br><span class="line">        Date date = <span class="keyword">new</span> Date();</span><br><span class="line">        String json = JsonUtils.getJson(date);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> json;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<h1 id="Ajax"><a href="#Ajax" class="headerlink" title="Ajax"></a>Ajax</h1><p><strong>利用AJAX可以做：</strong></p>
<p>注册时，输入用户名自动检测用户是否已经存在。<br>登陆时，提示用户名密码错误<br>删除数据行时，将行ID发送到后台，后台在数据库中删除，数据库删除成功后，在页面DOM中将数据行也删除。</p>
<p><img src="/home/lfh/.config/Typora/typora-user-images/image-20200221222240270.png" alt="image-20200221222240270"></p>
<h1 id="拦截器的实现"><a href="#拦截器的实现" class="headerlink" title="拦截器的实现"></a>拦截器的实现</h1><p>​    </p>
<h1 id="springmvc文件上传"><a href="#springmvc文件上传" class="headerlink" title="springmvc文件上传"></a>springmvc文件上传</h1><p> 文件上传是项目开发中最常见的功能之一 ,springMVC 可以很好的支持文件上传，但是SpringMVC上下文中默认没有装配MultipartResolver，因此默认情况下其不能处理文件上传工作。如果想使用Spring的文件上传功能，则需要在上下文中配置MultipartResolver。</p>
<p> 前端表单要求：为了能上传文件，必须将表单的method设置为POST，并将enctype设置为multipart/form-data。只有在这样的情况下，浏览器才会把用户选择的文件以二进制数据发送给服务器；</p>
<p><strong>对表单中的 enctype 属性做个详细的说明：</strong></p>
<ul>
<li><p>application/x-www=form-urlencoded：默认方式，只处理表单域中的 value 属性值，采用这种编码方式的表单会将表单域中的值处理成 URL 编码方式。</p>
</li>
<li><p>multipart/form-data：这种编码方式会以二进制流的方式来处理表单数据，这种编码方式会把文件域指定文件的内容也封装到请求参数中，不会对字符编码。</p>
</li>
<li><p>text/plain：除了把空格转换为 “+” 号外，其他字符都不做编码处理，这种方式适用直接通过表单发送邮件。</p>
<p>前端</p>
<form action="" enctype="multipart/form-data" method="post">    <input type="file" name="file"/>    <input type="submit"> </form>

</li>
</ul>
<p>倒入依赖</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--文件上传--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>commons-fileupload<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-fileupload<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.3.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--servlet-api导入高版本的--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.servlet<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>javax.servlet-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.0.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>配置文件</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--文件上传配置--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"multipartResolver"</span>  <span class="attr">class</span>=<span class="string">"org.springframework.web.multipart.commons.CommonsMultipartResolver"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 请求的编码格式，必须和jSP的pageEncoding属性一致，以便正确读取表单的内容，默认为ISO-8859-1 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"defaultEncoding"</span> <span class="attr">value</span>=<span class="string">"utf-8"</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 上传文件大小上限，单位为字节（10485760=10M） --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"maxUploadSize"</span> <span class="attr">value</span>=<span class="string">"10485760"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"maxInMemorySize"</span> <span class="attr">value</span>=<span class="string">"40960"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>CommonsMultipartFile 的 常用方法：</p>
<ul>
<li><pre><code>- **String getOriginalFilename()：获取上传文件的原名**
- **InputStream getInputStream()：获取文件流**
- **void transferTo(File dest)：将上传文件保存到一个目录文件中**
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">编写Controller进行测试</span><br><span class="line"></span><br><span class="line">&#96;&#96;&#96;java</span><br><span class="line"></span><br><span class="line">import org.springframework.stereotype.Controller;</span><br><span class="line">import org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line">import org.springframework.web.bind.annotation.RequestParam;</span><br><span class="line">import org.springframework.web.multipart.commons.CommonsMultipartFile;</span><br><span class="line"></span><br><span class="line">import javax.servlet.http.HttpServletRequest;</span><br><span class="line">import java.io.*;</span><br><span class="line"></span><br><span class="line">@Controller</span><br><span class="line">public class FileController &#123;</span><br><span class="line">    &#x2F;&#x2F;@RequestParam(&quot;file&quot;) 将name&#x3D;file控件得到的文件封装成CommonsMultipartFile 对象</span><br><span class="line">    &#x2F;&#x2F;批量上传CommonsMultipartFile则为数组即可</span><br><span class="line">    @RequestMapping(&quot;&#x2F;upload&quot;)</span><br><span class="line">    public String fileUpload(@RequestParam(&quot;file&quot;) CommonsMultipartFile file , HttpServletRequest request) throws IOException &#123;</span><br><span class="line"></span><br><span class="line">        &#x2F;&#x2F;获取文件名 : file.getOriginalFilename();</span><br><span class="line">        String uploadFileName &#x3D; file.getOriginalFilename();</span><br><span class="line"></span><br><span class="line">        &#x2F;&#x2F;如果文件名为空，直接回到首页！</span><br><span class="line">        if (&quot;&quot;.equals(uploadFileName))&#123;</span><br><span class="line">            return &quot;redirect:&#x2F;index.jsp&quot;;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(&quot;上传文件名 : &quot;+uploadFileName);</span><br><span class="line"></span><br><span class="line">        &#x2F;&#x2F;上传路径保存设置</span><br><span class="line">        String path &#x3D; request.getServletContext().getRealPath(&quot;&#x2F;upload&quot;);</span><br><span class="line">        &#x2F;&#x2F;如果路径不存在，创建一个</span><br><span class="line">        File realPath &#x3D; new File(path);</span><br><span class="line">        if (!realPath.exists())&#123;</span><br><span class="line">            realPath.mkdir();</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(&quot;上传文件保存地址：&quot;+realPath);</span><br><span class="line"></span><br><span class="line">        InputStream is &#x3D; file.getInputStream(); &#x2F;&#x2F;文件输入流</span><br><span class="line">        OutputStream os &#x3D; new FileOutputStream(new File(realPath,uploadFileName)); &#x2F;&#x2F;文件输出流</span><br><span class="line"></span><br><span class="line">        &#x2F;&#x2F;读取写出</span><br><span class="line">        int len&#x3D;0;</span><br><span class="line">        byte[] buffer &#x3D; new byte[1024];</span><br><span class="line">        while ((len&#x3D;is.read(buffer))!&#x3D;-1)&#123;</span><br><span class="line">            os.write(buffer,0,len);</span><br><span class="line">            os.flush();</span><br><span class="line">        &#125;</span><br><span class="line">        os.close();</span><br><span class="line">        is.close();</span><br><span class="line">        return &quot;redirect:&#x2F;index.jsp&quot;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</code></pre></li>
</ul>
<p>采用file.Transto 来保存上传的文件</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">*</span><br><span class="line"> * 采用file.Transto 来保存上传的文件</span><br><span class="line"> */</span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/upload2"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String  <span class="title">fileUpload2</span><span class="params">(@RequestParam(<span class="string">"file"</span>)</span> CommonsMultipartFile file, HttpServletRequest request) <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//上传路径保存设置</span></span><br><span class="line">    String path = request.getServletContext().getRealPath(<span class="string">"/upload"</span>);</span><br><span class="line">    File realPath = <span class="keyword">new</span> File(path);</span><br><span class="line">    <span class="keyword">if</span> (!realPath.exists())&#123;</span><br><span class="line">        realPath.mkdir();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//上传文件地址</span></span><br><span class="line">    System.out.println(<span class="string">"上传文件保存地址："</span>+realPath);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//通过CommonsMultipartFile的方法直接写文件（注意这个时候）</span></span><br><span class="line">    file.transferTo(<span class="keyword">new</span> File(realPath +<span class="string">"/"</span>+ file.getOriginalFilename()));</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="string">"redirect:/index.jsp"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="文件下载"><a href="#文件下载" class="headerlink" title="文件下载"></a>文件下载</h3><p>文件下载步骤：</p>
<ol>
<li><p>设置 response 响应头</p>
</li>
<li><p>读取文件 – InputStream</p>
</li>
<li><p>写出文件 – OutputStream</p>
</li>
<li><p>执行操作</p>
</li>
<li><p>关闭流 （先开后关）</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping</span>(value=<span class="string">"/download"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">downloads</span><span class="params">(HttpServletResponse response ,HttpServletRequest request)</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">    <span class="comment">//要下载的图片地址</span></span><br><span class="line">    String  path = request.getServletContext().getRealPath(<span class="string">"/upload"</span>);</span><br><span class="line">    String  fileName = <span class="string">"基础语法.jpg"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//1、设置response 响应头</span></span><br><span class="line">    response.reset(); <span class="comment">//设置页面不缓存,清空buffer</span></span><br><span class="line">    response.setCharacterEncoding(<span class="string">"UTF-8"</span>); <span class="comment">//字符编码</span></span><br><span class="line">    response.setContentType(<span class="string">"multipart/form-data"</span>); <span class="comment">//二进制传输数据</span></span><br><span class="line">    <span class="comment">//设置响应头</span></span><br><span class="line">    response.setHeader(<span class="string">"Content-Disposition"</span>,</span><br><span class="line">            <span class="string">"attachment;fileName="</span>+URLEncoder.encode(fileName, <span class="string">"UTF-8"</span>));</span><br><span class="line"></span><br><span class="line">    File file = <span class="keyword">new</span> File(path,fileName);</span><br><span class="line">    <span class="comment">//2、 读取文件--输入流</span></span><br><span class="line">    InputStream input=<span class="keyword">new</span> FileInputStream(file);</span><br><span class="line">    <span class="comment">//3、 写出文件--输出流</span></span><br><span class="line">    OutputStream out = response.getOutputStream();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">byte</span>[] buff =<span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span>];</span><br><span class="line">    <span class="keyword">int</span> index=<span class="number">0</span>;</span><br><span class="line">    <span class="comment">//4、执行 写出操作</span></span><br><span class="line">    <span class="keyword">while</span>((index= input.read(buff))!= -<span class="number">1</span>)&#123;</span><br><span class="line">        out.write(buff, <span class="number">0</span>, index);</span><br><span class="line">        out.flush();</span><br><span class="line">    &#125;</span><br><span class="line">    out.close();</span><br><span class="line">    input.close();</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>编写前端页面下载</p>
<p><a href="/download">点击下载</a></p>
</li>
</ol>
<h1 id="实现图书管理系统"><a href="#实现图书管理系统" class="headerlink" title="实现图书管理系统"></a>实现图书管理系统</h1><p>ssm技术</p>
<p>​    1.完成登录(异步请求)</p>
<p>​        要用到ajax,使用jQuery.js 或者,vue.js</p>
<p>2.拦截器配置,文件上传,图片数据库,</p>
]]></content>
  </entry>
  <entry>
    <title>多线程</title>
    <url>/2020/03/14/%E5%A4%9A%E7%BA%BF%E7%A8%8B/</url>
    <content><![CDATA[<h2 id="1-什么是线程"><a href="#1-什么是线程" class="headerlink" title="1.什么是线程"></a>1.什么是线程</h2><p><strong>基本概念</strong></p>
<p>我们先从线程的基本概念开始，给大家复习一下，不知道有多少同学是基础不太好，说什么是线程都不知道的，如果这样的话，花时间去补初级内容的课。</p>
<p><img src="img/01_02.jpg" alt="01_02"></p>
<p>什么是叫一个进程？ 什么叫一个线程？ </p>
<ul>
<li><p>Program app -&gt;QQ.exe</p>
<p><strong>进程：</strong>做一个简单的解释，你的硬盘上有一个简单的程序，这个程序叫QQ.exe，这是一个程序，这个程序是一个静态的概念，它被扔在硬盘上也没人理他，但是当你双击它，弹出一个界面输入账号密码登录进去了，OK，这个时候叫做一个进程。进程相对于程序来说它是一个动态的概念</p>
<p><strong>线程：</strong>作为一个进程里面最小的执行单元它就叫一个线程，用简单的话讲一个程序里不同的执行路径就叫做一个线程</p>
</li>
</ul>
<p><strong>示例：什么叫做线程</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.mashibing.juc.c_000;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.TimeUnit;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">T01_WhatIsThread</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">T1</span> <span class="keyword">extends</span> <span class="title">Thread</span> </span>&#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">           <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;<span class="number">10</span>; i++) &#123;</span><br><span class="line">               <span class="keyword">try</span> &#123;</span><br><span class="line">                   TimeUnit.MICROSECONDS.sleep(<span class="number">1</span>);</span><br><span class="line">               &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                   e.printStackTrace();</span><br><span class="line">               &#125;</span><br><span class="line">               System.out.println(<span class="string">"T1"</span>);</span><br><span class="line">           &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//new T1().run();</span></span><br><span class="line">        <span class="keyword">new</span> T1().start();</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;<span class="number">10</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                TimeUnit.MICROSECONDS.sleep(<span class="number">1</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println(<span class="string">"main"</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p> 观察上面程序的数据结果，你会看到字符串“T1”和“Main”的交替输出，这就是程序中有两条不同的执行路径在交叉执行，这就是直观概念上的线程，概念性的东西，理解就好，没有必要咬文嚼字的去背文字的定义。</p>
<a id="more"></a>


<h2 id="2-线程常用方法"><a href="#2-线程常用方法" class="headerlink" title="2.线程常用方法"></a>2.线程常用方法</h2><p><strong>我们来认识几个线程的方法</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.mashibing.juc.c_000;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">T03_Sleep_Yield_Join</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">					<span class="comment">//testSleep();</span></span><br><span class="line">					<span class="comment">//testYield();</span></span><br><span class="line">        testJoin();</span><br><span class="line">    &#125; </span><br><span class="line">		<span class="comment">/*Sleep,意思就是睡眠，当前线程暂停一段时间让给别的线程去运行。Sleep是怎么复活的？由你的睡眠时间而定，等睡眠到规定的时间自动复活*/</span></span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">testSleep</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">new</span> Thread(()-&gt;&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;<span class="number">100</span>; i++) &#123;</span><br><span class="line">                System.out.println(<span class="string">"A"</span> + i);</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    Thread.sleep(<span class="number">500</span>);</span><br><span class="line">                    <span class="comment">//TimeUnit.Milliseconds.sleep(500)</span></span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;).start();</span><br><span class="line">    &#125;</span><br><span class="line">		<span class="comment">/*Yield,就是当前线程正在执行的时候停止下来进入等待队列，回到等待队列里在系统的调度算法里头呢还是依然有可能把你刚回去的这个线程拿回来继续执行，当然，更大的可能性是把原来等待的那些拿出一个来执行，所以yield的意思是我让出一下CPU，后面你们能不能抢到那我不管*/</span></span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">testYield</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">new</span> Thread(()-&gt;&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;<span class="number">100</span>; i++) &#123;</span><br><span class="line">                System.out.println(<span class="string">"A"</span> + i);</span><br><span class="line">                <span class="keyword">if</span>(i%<span class="number">10</span> == <span class="number">0</span>) Thread.yield();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;).start();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">new</span> Thread(()-&gt;&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;<span class="number">100</span>; i++) &#123;</span><br><span class="line">                System.out.println(<span class="string">"------------B"</span> + i);</span><br><span class="line">                <span class="keyword">if</span>(i%<span class="number">10</span> == <span class="number">0</span>) Thread.yield();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;).start();</span><br><span class="line">    &#125;</span><br><span class="line">		<span class="comment">/*join， 意思就是在自己当前线程加入你调用Join的线程（），本线程等待。等调用的线程运行完了，自己再去执行。t1和t2两个线程，在t1的某个点上调用了t2.join,它会跑到t2去运行，t1等待t2运行完毕继续t1运行（自己join自己没有意义） */</span></span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">testJoin</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Thread t1 = <span class="keyword">new</span> Thread(()-&gt;&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;<span class="number">100</span>; i++) &#123;</span><br><span class="line">                System.out.println(<span class="string">"A"</span> + i);</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    Thread.sleep(<span class="number">500</span>);</span><br><span class="line">                    <span class="comment">//TimeUnit.Milliseconds.sleep(500)</span></span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        Thread t2 = <span class="keyword">new</span> Thread(()-&gt;&#123;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                t1.join();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;<span class="number">100</span>; i++) &#123;</span><br><span class="line">                System.out.println(<span class="string">"A"</span> + i);</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    Thread.sleep(<span class="number">500</span>);</span><br><span class="line">                    <span class="comment">//TimeUnit.Milliseconds.sleep(500)</span></span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        t1.start();</span><br><span class="line">        t2.start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="3-启动线程的五种方式"><a href="#3-启动线程的五种方式" class="headerlink" title="3.启动线程的五种方式"></a>3.启动线程的五种方式</h2><p><strong>创建线程的几种方式</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.mashibing.juc.c_000;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.Callable;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.ExecutorService;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.Executors;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.FutureTask;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">T02_HowToCreateThread</span> </span>&#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">MyThread</span> <span class="keyword">extends</span> <span class="title">Thread</span> </span>&#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            System.out.println(<span class="string">"Hello MyThread!"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">MyRun</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            System.out.println(<span class="string">"Hello MyRun!"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">MyCall</span> <span class="keyword">implements</span> <span class="title">Callable</span>&lt;<span class="title">String</span>&gt; </span>&#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> String <span class="title">call</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            System.out.println(<span class="string">"Hello MyCall"</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="string">"success"</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//启动线程的5种方式</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">new</span> MyThread().start();</span><br><span class="line">        <span class="keyword">new</span> Thread(<span class="keyword">new</span> MyRun()).start();</span><br><span class="line">        <span class="keyword">new</span> Thread(()-&gt;&#123;</span><br><span class="line">            System.out.println(<span class="string">"Hello Lambda!"</span>);</span><br><span class="line">        &#125;).start();</span><br><span class="line"></span><br><span class="line">        Thread t = <span class="keyword">new</span> Thread(<span class="keyword">new</span> FutureTask&lt;String&gt;(<span class="keyword">new</span> MyCall()));</span><br><span class="line">        t.start();</span><br><span class="line"></span><br><span class="line">        ExecutorService service = Executors.newCachedThreadPool();</span><br><span class="line">        service.execute(()-&gt;&#123;</span><br><span class="line">            System.out.println(<span class="string">"Hello ThreadPool"</span>);</span><br><span class="line">        &#125;);</span><br><span class="line">        service.shutdown();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p><strong>分享一道面试题</strong></p>
<p>请你告诉我启动线程的三种方式 ?<br>你说第一个：new Thread().start()； 第二个: new Thread(Runnable).start() 这没问题 ；那第三个呢，要回答线程池也是用的这两种之一，他这么问有些吹毛求疵的意思，你就可以说通过线程池也可以启动一个新的线程 3:Executors.newCachedThreadPool()或者FutureTask + Callable</p>
<h2 id="4-线程同步的基本概念"><a href="#4-线程同步的基本概念" class="headerlink" title="4.线程同步的基本概念"></a>4.线程同步的基本概念</h2><p><strong>synchronized</strong></p>
<p>下面我们来讲synchronized关键字，有不少同学已经耳熟能详了，不过作为复习还是要复习一下。第一个是多个线程去访问同一个资源的时候对这个资源上锁。</p>
<p>为什么要上锁呢？访问某一段代码或者某临界资源的时候是需要有一把锁的概念在这儿的。</p>
<p><img src="img/01_04.jpg" alt="01_04"></p>
<p>比如：我们对一个数字做递增，两个程序对它一块儿来做递增，递增就是把一个程序往上加1啊，如果两个线程共同访问的时候，第一个线程一读它是0，然后把它加1，在自己线程内部内存里面算还没有写回去的时候而第二个线程读到了它还是0，加1在写回去，本来加了两次，但还是1，那么我们在对这个数字递增的过程当中就上把锁，就是说第一个线程对这个数字访问的时候是独占的，不允许别的线程来访问，不允许别的线程来对它计算，我必须加完1收释放锁，其他线程才能对它继续加。</p>
<p>实质上，这把锁并不是对数字进行锁定的， 你可以任意指定，想锁谁就锁谁。</p>
<p>我第一个小程序是这么写的 ，如果说你想上了把锁之后才能对count进行减减访问，你可以new一个Object，所以这里锁定就是o，当我拿到这把锁的时候才能执行这段代码。是锁定的某一个对象，synchronized有一个锁升级的概念，我们一会儿会讲到</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">*synchronized关键字</span></span><br><span class="line"><span class="comment">*对某个对象加锁</span></span><br><span class="line"><span class="comment">*<span class="doctag">@author</span> mashibing</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">package</span> com.mashibing.juc.c_001;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">T</span> </span>&#123;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">int</span> count = <span class="number">10</span>;</span><br><span class="line">	<span class="keyword">private</span> Object o = <span class="keyword">new</span> Object();</span><br><span class="line">	</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">m</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">synchronized</span>(o) &#123; <span class="comment">//任何线程要想执行下面的代码，必须先拿到o的锁</span></span><br><span class="line">			count--;</span><br><span class="line">			System.out.println(Thread.currentThread().getName() + <span class="string">" count = "</span> + count);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>​       </p>
<p>我们来谈一下synchronized它的一些特性。如果说你每次都定义个一个锁的对象Object o 把它new出来那加锁的时候太麻烦每次都要new一个新的对象出来，所以呢，有一个简单的方式就是<strong>synchronized(this)</strong>锁定当前对象就行</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * synchronized关键字</span></span><br><span class="line"><span class="comment"> * 对某个对象加锁</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> mashibing</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">package</span> com.mashibing.juc.c_002;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">T</span> </span>&#123;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">int</span> count = <span class="number">10</span>;</span><br><span class="line">	</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">m</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">synchronized</span>(<span class="keyword">this</span>) &#123; ߳<span class="comment">//任何线程想要执行那个下面的代码，必须先要拿到this的锁</span></span><br><span class="line">      count--;</span><br><span class="line">			System.out.println(Thread.currentThread().getName() + <span class="string">" count = "</span> + count);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>如果你要是锁定当前对象呢，你也可以写成如下方法。synchronized方法和synchronized(this)执行这段代码它是等值的</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.mashibing.juc.c_003;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">T</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">int</span> count = <span class="number">10</span>;</span><br><span class="line">	</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">m</span><span class="params">()</span> </span>&#123; <span class="comment">//等同于在方法的代码执行时要synchronized(this)</span></span><br><span class="line">		count--;</span><br><span class="line">		System.out.println(Thread.currentThread().getName() + <span class="string">" count = "</span> + count);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>我们知道静态方法static是没有this对象的，你不需要new出一个对象来就能执行这个方法，但如果这个这个上面加一个synchronized的话就代表synchronized(T.class)。这里这个synchronized(T.class)锁的就是T类的对象</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.mashibing.juc.c_004;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">T</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> count = <span class="number">10</span>;</span><br><span class="line">	</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">m</span><span class="params">()</span> </span>&#123; <span class="comment">//这里等同于synchronized(T.class)</span></span><br><span class="line">		count--;</span><br><span class="line">		System.out.println(Thread.currentThread().getName() + <span class="string">" count = "</span> + count);</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">mm</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">synchronized</span>(T<span class="class">.<span class="keyword">class</span>) </span>&#123; <span class="comment">//考虑一下这里写synchronized(this)是否可以？</span></span><br><span class="line">			count --;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p><strong>问题：T.class是单例的吗？</strong></p>
<p>一个class load到内存它是不是单例的，想想看。一般情况下是，如果是在同一个ClassLoader空间那它一定是。不是同一个类加载器就不是了，不同的类加载器互相之间也不能访问。所以说你能访问它，那他一定就是单例</p>
<p>下面程序：很有可能读不到别的线程修改过的内容，除了这点之外count减减完了之后下面的count输出和你减完的结果不对，很容易分析：如果有一个线程把它从10减到9了，然后又有一个线程在前面一个线程还没有输出呢进来了把9又减到了8，继续输出的8，而不是9。如果你想修正它，前面第一个是在上面加volatile，改了马上就能得到。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 分析一下这个程序的输出</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> mashibing</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">package</span> com.mashibing.juc.c_005;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">T</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">private</span> <span class="comment">/*volatile*/</span> <span class="keyword">int</span> count = <span class="number">100</span>;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">public</span> <span class="comment">/*synchronized*/</span> <span class="function"><span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123; </span><br><span class="line">		count--;</span><br><span class="line">		System.out.println(Thread.currentThread().getName() + <span class="string">" count = "</span> + count);</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">		T t = <span class="keyword">new</span> T();</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;<span class="number">100</span>; i++) &#123;</span><br><span class="line">			<span class="keyword">new</span> Thread(t, <span class="string">"THREAD"</span> + i).start();</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>另外这个之外还可以加synchronized，加了synchronized就没有必要在加volatile了，因为synchronized既保证了原子性，又保证了可见性。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//对比上一个小程序</span></span><br><span class="line"><span class="keyword">package</span> com.mashibing.juc.c_006;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">T</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">int</span> count = <span class="number">10</span>;</span><br><span class="line">	</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123; </span><br><span class="line">		count--;</span><br><span class="line">		System.out.println(Thread.currentThread().getName() + <span class="string">" count = "</span> + count);</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">		</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;<span class="number">5</span>; i++) &#123;</span><br><span class="line">			T t = <span class="keyword">new</span> T();</span><br><span class="line">			<span class="keyword">new</span> Thread(t, <span class="string">"THREAD"</span> + i).start();</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p>如下代码：同步方法和非同步方法是否可以同时调用？就是我有一个synchronized的m1方法，我调用m1的时候能不能调用m2，拿大腿想一想这个是肯定可以的，线程里面访问m1的时候需要加锁，可是访问m2的时候我又不需要加锁，所以允许执行m2。</p>
<p>这些小实验的设计是比较考验功力的，学习线程的时候自己要多动手进行试验，任何一个理论，都可以进行验证。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> *同步和非同步方法是否可以同时调用？</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> mashibing</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">package</span> com.mashibing.juc.c_007;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">T</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">m1</span><span class="params">()</span> </span>&#123; </span><br><span class="line">		System.out.println(Thread.currentThread().getName() + <span class="string">" m1 start..."</span>);</span><br><span class="line">		<span class="keyword">try</span> &#123;</span><br><span class="line">			Thread.sleep(<span class="number">10000</span>);</span><br><span class="line">		&#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">			e.printStackTrace();</span><br><span class="line">		&#125;</span><br><span class="line">		System.out.println(Thread.currentThread().getName() + <span class="string">" m1 end"</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">m2</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">try</span> &#123;</span><br><span class="line">			Thread.sleep(<span class="number">5000</span>);</span><br><span class="line">		&#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">			e.printStackTrace();</span><br><span class="line">		&#125;</span><br><span class="line">		System.out.println(Thread.currentThread().getName() + <span class="string">" m2 "</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">		T t = <span class="keyword">new</span> T();</span><br><span class="line">		</span><br><span class="line">		<span class="comment">/*new Thread(()-&gt;t.m1(), "t1").start();</span></span><br><span class="line"><span class="comment">		new Thread(()-&gt;t.m2(), "t2").start();*/</span></span><br><span class="line">		</span><br><span class="line">		<span class="keyword">new</span> Thread(t::m1, <span class="string">"t1"</span>).start();</span><br><span class="line">		<span class="keyword">new</span> Thread(t::m2, <span class="string">"t2"</span>).start();</span><br><span class="line">		</span><br><span class="line">		<span class="comment">/*</span></span><br><span class="line"><span class="comment">		//1.8之前的写法</span></span><br><span class="line"><span class="comment">		new Thread(new Runnable() &#123;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">			@Override</span></span><br><span class="line"><span class="comment">			public void run() &#123;</span></span><br><span class="line"><span class="comment">				t.m1();</span></span><br><span class="line"><span class="comment">			&#125;</span></span><br><span class="line"><span class="comment">		&#125;);</span></span><br><span class="line"><span class="comment">		*/</span></span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p>我们在来看一个synchronized应用的例子</p>
<p>我们定义了一个class账户，有名称、余额。写方法给哪个用户设置它多少余额，读方法通过这个名字得到余额值。如果我们给写方法加锁，给读方法不加锁，你的业务允许产生这种问题吗？业务说我中间读到了一些不太好的数据也没关系，如果不允许客户读到中间不好的数据那这个就有问题。正因为我们加了锁的方法和不加锁的方法可以同时运行。</p>
<p><strong>问题</strong>比如说：张三，给他设置100块钱启动了，睡了1毫秒之后呢去读它的值，然后再睡2秒再去读它的值这个时候你会看到读到的值有问题，原因是在设定的过程中this.name你中间睡了一下，这个过程当中我模拟了一个线程来读，这个时候调用的是getBalance方法，而调用这个方法的时候是不用加锁的，所以说我不需要等你整个过程执行完就可以读到你中间结果产生的内存，这个现象就叫做脏读。这问题的产生就是synchronized方法和非synchronized方法是同时运行的。<strong>解决</strong>就是把getBalance加上synchronized就可以了，如果你的业务允许脏读，就可以不用加锁，加锁之后的效率低下。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 面试题：模拟银行账户</span></span><br><span class="line"><span class="comment"> * 对业务写方法加锁</span></span><br><span class="line"><span class="comment"> * 对业务读方法不加锁</span></span><br><span class="line"><span class="comment"> * 这样行不行？</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 容易产生脏读问题（dirtyRead）</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">package</span> com.mashibing.juc.c_008;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.TimeUnit;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Account</span> </span>&#123;</span><br><span class="line">	String name;</span><br><span class="line">	<span class="keyword">double</span> balance;</span><br><span class="line">	</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">set</span><span class="params">(String name, <span class="keyword">double</span> balance)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">this</span>.name = name;</span><br><span class="line"></span><br><span class="line">		<span class="keyword">try</span> &#123;</span><br><span class="line">			Thread.sleep(<span class="number">2000</span>);</span><br><span class="line">		&#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">			e.printStackTrace();</span><br><span class="line">		&#125;</span><br><span class="line">		</span><br><span class="line">		<span class="keyword">this</span>.balance = balance;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">public</span> <span class="comment">/*synchronized*/</span> <span class="function"><span class="keyword">double</span> <span class="title">getBalance</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="keyword">this</span>.balance;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">		Account a = <span class="keyword">new</span> Account();</span><br><span class="line">		<span class="keyword">new</span> Thread(()-&gt;a.set(<span class="string">"zhangsan"</span>, <span class="number">100.0</span>)).start();</span><br><span class="line">		</span><br><span class="line">		<span class="keyword">try</span> &#123;</span><br><span class="line">			TimeUnit.SECONDS.sleep(<span class="number">1</span>);</span><br><span class="line">		&#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">			e.printStackTrace();</span><br><span class="line">		&#125;</span><br><span class="line">		</span><br><span class="line">		System.out.println(a.getBalance(<span class="string">"zhangsan"</span>));</span><br><span class="line">		</span><br><span class="line">		<span class="keyword">try</span> &#123;</span><br><span class="line">			TimeUnit.SECONDS.sleep(<span class="number">2</span>);</span><br><span class="line">		&#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">			e.printStackTrace();</span><br><span class="line">		&#125;</span><br><span class="line">		</span><br><span class="line">		System.out.println(a.getBalance(<span class="string">"zhangsan"</span>));</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p>再来看synchronized的另外一个属性：可重入，是synchronized必须了解的一个概念。</p>
<p>如果是一个同步方法调用另外一个同步方法，有一个方法加了锁，另外一个方法也需要加锁，加的是同一把锁也是同一个线程，那这个时候申请仍然会得到该对象的锁。比如说是synchronized可重入的，有一个方法m1 是synchronized有一个方法m2也是synchrionzed，m1里能不能调m2。我们m1开始的时候这个线程得到了这把锁，然后在m1里面调用m2，如果说这个时候不允许任何线程再来拿这把锁的时候就死锁了。这个时候调m2它发现是同一个线程，因为你m2也需要申请这把锁，它发现是同一个线程申请的这把锁，允许，可以没问题，这就叫可重入锁。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 一个同步方法可以调用另外一个同步方法，一个线程已经拥有某个对象的锁，再次申请的时候仍然会得到该对象的锁。</span></span><br><span class="line"><span class="comment"> * 也就是说synchronized获得锁是可重入的</span></span><br><span class="line"><span class="comment"> * synchronized</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> mashibing</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">package</span> com.mashibing.juc.c_009;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.TimeUnit;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">T</span> </span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">m1</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		System.out.println(<span class="string">"m1 start"</span>);</span><br><span class="line">		<span class="keyword">try</span> &#123;</span><br><span class="line">			TimeUnit.SECONDS.sleep(<span class="number">1</span>);</span><br><span class="line">		&#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">			e.printStackTrace();</span><br><span class="line">		&#125;</span><br><span class="line">		m2();</span><br><span class="line">		System.out.println(<span class="string">"m1 end"</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="function"><span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">m2</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">try</span> &#123;</span><br><span class="line">			TimeUnit.SECONDS.sleep(<span class="number">2</span>);</span><br><span class="line">		&#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">			e.printStackTrace();</span><br><span class="line">		&#125;</span><br><span class="line">		System.out.println(<span class="string">"m2"</span>);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">new</span> T().m1();</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p>模拟一个父类子类的概念，父类synchronized，子类调用super.m的时候必须得可重入，否则就会出问题（调用父类是同一把锁）。所谓的重入锁就是你拿到这把锁之后不停加锁加锁，加好几道，但锁定的还是同一个对象，去一道就减个1，就是这么个概念。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.mashibing.juc.c_010;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.TimeUnit;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">T</span> </span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">m</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		System.out.println(<span class="string">"m start"</span>);</span><br><span class="line">		<span class="keyword">try</span> &#123;</span><br><span class="line">			TimeUnit.SECONDS.sleep(<span class="number">1</span>);</span><br><span class="line">		&#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">			e.printStackTrace();</span><br><span class="line">		&#125;</span><br><span class="line">		System.out.println(<span class="string">"m end"</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">new</span> TT().m();</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TT</span> <span class="keyword">extends</span> <span class="title">T</span> </span>&#123;</span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">m</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		System.out.println(<span class="string">"child m start"</span>);</span><br><span class="line">		<span class="keyword">super</span>.m();</span><br><span class="line">		System.out.println(<span class="string">"child m end"</span>);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



]]></content>
  </entry>
  <entry>
    <title>使用数组实现最大堆结构</title>
    <url>/2020/03/14/%E4%BD%BF%E7%94%A8%E6%95%B0%E7%BB%84%E5%AE%9E%E7%8E%B0%E6%9C%80%E5%A4%A7%E5%A0%86%E7%BB%93%E6%9E%84/</url>
    <content><![CDATA[<h1 id="使用数组实现最大堆结构"><a href="#使用数组实现最大堆结构" class="headerlink" title="使用数组实现最大堆结构"></a>使用数组实现最大堆结构</h1><p>​    二叉堆实质上一个完全二叉树</p>
<p>最大堆: 队中的每个节点的值总是不大于其父结点的值</p>
<p>最小堆：堆中的每个节点的值总是大于其父结点的值</p>
<p>使用数组实现最大堆，从零开始存储，</p>
<p>　　完全二叉树具有以下特性</p>
<p>　parent(i) = (i - 2)/2;</p>
<p>​    left child(i) = 2*i +1 ;</p>
<p>​    left child(i) = 2*i +2 ;</p>
<a id="more"></a>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> datastructure.heap;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> datastructure.arraydemo.Array;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>：    使用数组实现最大堆</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: LFH</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span>: 2020/2/29  下午6:38</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Maxheap</span>&lt;<span class="title">E</span> <span class="keyword">extends</span> <span class="title">Comparable</span>&lt;<span class="title">E</span>&gt;&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Array&lt;E&gt; data;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Maxheap</span><span class="params">(<span class="keyword">int</span> capacity)</span></span>&#123;</span><br><span class="line">        data = <span class="keyword">new</span> Array&lt;&gt;(capacity);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Maxheap</span><span class="params">()</span></span>&#123;</span><br><span class="line">        data = <span class="keyword">new</span> Array&lt;&gt;();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 将一个数组中的元素放进一个堆中，</span></span><br><span class="line"><span class="comment">     *  １．可以将数组中的每一个值取出来加入堆中，每一个直插入去找位置</span></span><br><span class="line"><span class="comment">     *  ２．heapify　，数组中的索引就按照堆基本排放，</span></span><br><span class="line"><span class="comment">     *      对于每个节点的父亲节点进行遍历，看看是否需要ｓｉｆｔＤｏｗｎ</span></span><br><span class="line"><span class="comment">     *      然后再对堆的顺序进行调整</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> arr</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Maxheap</span><span class="params">(E[] arr)</span></span>&#123;</span><br><span class="line">        data = <span class="keyword">new</span> Array&lt;&gt;(arr);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = parent(arr.length-<span class="number">1</span>); i &gt;= <span class="number">0</span> ; i--) &#123;</span><br><span class="line">            siftDown(i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">size</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span>  data.getSize();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isEmpty</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> data.getSize() == <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 找出父亲节点</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> index</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">int</span> <span class="title">parent</span><span class="params">(<span class="keyword">int</span> index)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (index == <span class="number">0</span>)</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"index - 0 doesn't have parent"</span>);</span><br><span class="line">        <span class="keyword">return</span> (index-<span class="number">1</span>) / <span class="number">2</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 通过在数组中的索引找到左孩子的索引</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> index</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">int</span> <span class="title">leftChild</span><span class="params">(<span class="keyword">int</span> index)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> index * <span class="number">2</span> + <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 通过数组中的索引找到右孩子的索引</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> index</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">int</span> <span class="title">rightChild</span><span class="params">(<span class="keyword">int</span> index)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> index * <span class="number">2</span> + <span class="number">2</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(E e)</span></span>&#123;</span><br><span class="line">        data.addLast(e);</span><br><span class="line">        siftUp(data.getSize()-<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 向堆中添加元素上浮，</span></span><br><span class="line"><span class="comment">     *      直接向堆的最后一个位置插入元素，如果这个值大于父亲节点的值</span></span><br><span class="line"><span class="comment">     *      进行置换，如果还大于父亲节点的值，继续置换</span></span><br><span class="line"><span class="comment">     *      每一次上浮都要交换值的大小，</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> k</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">siftUp</span><span class="params">(<span class="keyword">int</span> k)</span></span>&#123;</span><br><span class="line">        <span class="keyword">while</span>( k&gt;<span class="number">0</span> &amp;&amp; data.get(parent(k)).compareTo(data.get(k)) &lt; <span class="number">0</span>)&#123;</span><br><span class="line">            <span class="comment">//与父亲节点的位置交换，</span></span><br><span class="line">            data.swap(k,parent(k));</span><br><span class="line">            <span class="comment">//k 作为一个变量，代表置换后的值的索引（原来父亲节点的索引）去进行下一次的循环，</span></span><br><span class="line">            k = parent(k);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> E <span class="title">findMax</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (data.getSize() == <span class="number">0</span>)</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"Can not findMax when heap is empty"</span>);</span><br><span class="line">        <span class="keyword">return</span> data.get(<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 取出最大值</span></span><br><span class="line"><span class="comment">     * * 从堆中取出最大元素,</span></span><br><span class="line"><span class="comment">     *      *  将最后一个元素和最大元素进行换位，</span></span><br><span class="line"><span class="comment">     *      　　比较这个元素和左右孩子的大小，</span></span><br><span class="line"><span class="comment">     *      　找出左右孩子中最大的，然后交换位置</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> E <span class="title">extractMax</span><span class="params">()</span></span>&#123;</span><br><span class="line">        E ret = findMax();</span><br><span class="line">        data.swap(<span class="number">0</span>,data.getSize()-<span class="number">1</span>);</span><br><span class="line">        data.removeLast();</span><br><span class="line">        siftDown(<span class="number">0</span>);</span><br><span class="line">        <span class="keyword">return</span> ret;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">siftDown</span><span class="params">(<span class="keyword">int</span> k)</span></span>&#123;</span><br><span class="line">        <span class="keyword">while</span>( leftChild(k) &lt; data.getSize())&#123;</span><br><span class="line">            <span class="keyword">int</span> j = leftChild(k);</span><br><span class="line">            <span class="keyword">if</span> (j + <span class="number">1</span> &lt; data.getSize() &amp;&amp;</span><br><span class="line">                        data.get(j+<span class="number">1</span>).compareTo(data.get(j)) &lt; <span class="number">0</span> )</span><br><span class="line">                j = rightChild(k);</span><br><span class="line">            <span class="keyword">if</span> (data.get(k).compareTo(data.get(j)) &gt;= <span class="number">0</span> )</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            data.swap(k,j);</span><br><span class="line">            k = j;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 取出堆中的最大元素病接替换成元素ｅ</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> e</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> E <span class="title">replace</span><span class="params">(E e)</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        E ret = findMax();</span><br><span class="line">        data.set(<span class="number">0</span>,e);</span><br><span class="line">        siftDown(<span class="number">0</span>);</span><br><span class="line">        <span class="keyword">return</span>  ret;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>数据结构</category>
        <category>树形结构</category>
      </categories>
      <tags>
        <tag>最大堆</tag>
      </tags>
  </entry>
  <entry>
    <title>二分搜索树的基本实现</title>
    <url>/2020/03/14/%E4%BA%8C%E5%88%86%E6%90%9C%E7%B4%A2%E6%A0%91%E7%9A%84%E5%9F%BA%E6%9C%AC%E5%AE%9E%E7%8E%B0/</url>
    <content><![CDATA[<hr>
<p>categories：<br>          - 数据结构<br>          - 树形结构<br>tags：<br>          - 二分搜索树</p>
<hr>
<h1 id="二分搜索树的基本实现"><a href="#二分搜索树的基本实现" class="headerlink" title="二分搜索树的基本实现"></a>二分搜索树的基本实现</h1><p>​    二分搜索树的加入，包含，增家删除查询等工呢过深度优先的三种遍历，广度优先的层序遍历,</p>
<a id="more"></a>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> datastructure.binarySerchTree;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.LinkedList;</span><br><span class="line"><span class="keyword">import</span> java.util.Queue;</span><br><span class="line"><span class="keyword">import</span> java.util.Stack;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>：    二分搜索树的加入，包含，增家删除查询等工呢过深度优先的三种遍历，广度优先的层序遍历,</span></span><br><span class="line"><span class="comment"> *              　　　中序遍历可以用来排序。</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: LFH</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span>: 2020/2/27  上午11:43</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BinarySerchTree</span>&lt;<span class="title">E</span> <span class="keyword">extends</span> <span class="title">Comparable</span>&lt;<span class="title">E</span>&gt;&gt;  </span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="class"><span class="keyword">class</span> <span class="title">Node</span></span>&#123;</span><br><span class="line">        <span class="keyword">private</span> E e;</span><br><span class="line">        <span class="keyword">private</span> Node left,right;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">Node</span><span class="params">(E e)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.e = e;</span><br><span class="line">            <span class="keyword">this</span>.left = <span class="keyword">null</span>;</span><br><span class="line">            <span class="keyword">this</span>.right = <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Node root;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> size;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">BinarySerchTree</span><span class="params">()</span></span>&#123;</span><br><span class="line">        root = <span class="keyword">null</span>;</span><br><span class="line">        size = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getSize</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> size;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isEmpty</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> size == <span class="number">0</span>;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     *  添加节点的递归实现</span></span><br><span class="line"><span class="comment">     *  以node为根的二分搜索树进行插入</span></span><br><span class="line"><span class="comment">     *      正常添加的步骤：</span></span><br><span class="line"><span class="comment">     *      １．判断根节点是否为空,在上一部已经完成</span></span><br><span class="line"><span class="comment">     *      ２．判断是否小于根节点&gt;选择插入左子树&gt;</span></span><br><span class="line"><span class="comment">     *                              左子树的根节点为空，插入根节点　不为空&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;重新进入函数</span></span><br><span class="line"><span class="comment">     *                                      &#125;</span></span><br><span class="line"><span class="comment">     *          判断大于根节点&gt; 插入右子树&gt;</span></span><br><span class="line"><span class="comment">     *                                右子树的根节点为空，插入根节点　不为空&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;继续进行函数</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> node 根据判断可判断为做孩子节点还是右孩子节点</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> e　传入元素</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 向二叉树中插入元素</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> e</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(E e)</span></span>&#123;</span><br><span class="line">        root= add(root,e);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 私有的ａｄｄ函数向以node为根节点的二分搜索树中增添新的节点</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> node</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> e</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 返回插入新节点后二分树的根</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> Node <span class="title">add</span><span class="params">(Node node,E e)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//递归终止条件对空的节点插入元素.</span></span><br><span class="line">        <span class="keyword">if</span> (node == <span class="keyword">null</span>) &#123;</span><br><span class="line">            size++;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> Node(e);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (e.compareTo(node.e) &lt; <span class="number">0</span>) &#123;</span><br><span class="line">            node.left = add(node.left, e);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>  <span class="keyword">if</span> (e.compareTo(node.e) &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                node.right = add(node.right, e);</span><br><span class="line">            &#125;</span><br><span class="line">        <span class="keyword">return</span> node;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 判断二叉树中是否包含某个元素</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> e</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">contains</span><span class="params">(E e)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> contains(root,e);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 私有的方法,查询以node为节点的二叉树是否有一个相同的元素,递归查询</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> node</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> e</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">contains</span><span class="params">(Node node,E e)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (node == <span class="keyword">null</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        <span class="keyword">if</span> (e.compareTo(node.e) == <span class="number">0</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (e.compareTo(node.e) &lt; <span class="number">0</span>)</span><br><span class="line">            <span class="keyword">return</span> contains(node.left,e);</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            <span class="keyword">return</span> contains(node.right,e);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     *  搜索二叉树的前序遍历</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">preOrder</span><span class="params">()</span></span>&#123;</span><br><span class="line">        preOrder(root);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">preOrder</span><span class="params">(Node node)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span> ( node == <span class="keyword">null</span>)</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        System.out.println(node.e);</span><br><span class="line">        preOrder(node.left);</span><br><span class="line">        preOrder(node.right);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 前序遍历的非递归实现，使用栈来完成</span></span><br><span class="line"><span class="comment">     * 如果栈空则遍历结束了</span></span><br><span class="line"><span class="comment">     * 每次先取出中节点，如果右孩子不空在压入右孩子，</span></span><br><span class="line"><span class="comment">     * 左孩子不为空压入左孩子，</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">preOrderNR</span><span class="params">()</span></span>&#123;</span><br><span class="line">        Stack&lt;Node&gt; stack = <span class="keyword">new</span> Stack&lt;&gt;();</span><br><span class="line">        stack.push(root);</span><br><span class="line">        <span class="keyword">while</span> (!stack.isEmpty())&#123;</span><br><span class="line">            Node cur = stack.pop();</span><br><span class="line">            System.out.println(cur.e);</span><br><span class="line">            <span class="keyword">if</span> (cur.right != <span class="keyword">null</span>)</span><br><span class="line">                stack.push(cur.right);</span><br><span class="line">            <span class="keyword">if</span> (cur.left != <span class="keyword">null</span>)</span><br><span class="line">                stack.push(cur.left);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     *  //中序遍历 返回值为按序排列的,排序树</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">inOrder</span><span class="params">()</span></span>&#123;</span><br><span class="line">        inOrder(root);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">inOrder</span><span class="params">(Node node)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span> ( node == <span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        inOrder(node.left);</span><br><span class="line">        System.out.println(node.e);</span><br><span class="line">        inOrder(node.right);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">postOrder</span><span class="params">()</span></span>&#123;</span><br><span class="line">        postOrder(root);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">postOrder</span><span class="params">(Node node)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span> ( node == <span class="keyword">null</span>)</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        postOrder(node.left);</span><br><span class="line">        postOrder(node.right);</span><br><span class="line">        System.out.println(node.e);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 使用队列来实现层序遍历 ，首先根节点进入队列，</span></span><br><span class="line"><span class="comment">     * 如果队列不为空，　取出当前节点。　对于取出的节点，他的左孩子，右孩子依次加入队列。</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">levelOrder</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Queue&lt;Node&gt; queue = <span class="keyword">new</span> LinkedList&lt;Node&gt;();</span><br><span class="line">        queue.add(root);</span><br><span class="line">        <span class="keyword">while</span> (!queue.isEmpty())&#123;</span><br><span class="line">            Node cur = queue.remove();</span><br><span class="line">            System.out.println(cur.e);</span><br><span class="line">            <span class="keyword">if</span> ( cur.left != <span class="keyword">null</span>)</span><br><span class="line">                queue.add(cur.left);</span><br><span class="line">            <span class="keyword">if</span> ( cur.right != <span class="keyword">null</span>)</span><br><span class="line">                queue.add(cur.right);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 使用递归方法找到搜索二叉树的最小元素</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> E <span class="title">minimun</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (size == <span class="number">0</span>)</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"　二叉树为空，没有最小值"</span>);</span><br><span class="line">        <span class="keyword">return</span> minimun(root).e;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> Node <span class="title">minimun</span><span class="params">(Node node)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (node.left == <span class="keyword">null</span>)</span><br><span class="line">            <span class="keyword">return</span> node;</span><br><span class="line">        <span class="keyword">return</span> minimun(node.left);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 使用递归算法找出二叉树中的最大值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> E <span class="title">maximun</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span> ( size == <span class="number">0</span> )</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">" 二叉树为空，没有最大值"</span>);</span><br><span class="line">        <span class="keyword">return</span> maximun(root).e;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> Node <span class="title">maximun</span><span class="params">(Node node)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span> ( node.right == <span class="keyword">null</span>)</span><br><span class="line">            <span class="keyword">return</span> node;</span><br><span class="line">        <span class="keyword">return</span> maximun(node.right);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 删除二叉树中的最小节点并返回</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> E <span class="title">removeMin</span><span class="params">()</span></span>&#123;</span><br><span class="line">        E res = minimun();</span><br><span class="line">        root = removeMin(root);</span><br><span class="line">        <span class="keyword">return</span>  res;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> Node <span class="title">removeMin</span><span class="params">(Node node)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span> ( node.left == <span class="keyword">null</span>)&#123;</span><br><span class="line">            size --;</span><br><span class="line">            <span class="keyword">return</span> node.right;</span><br><span class="line">        &#125;</span><br><span class="line">        node.left = removeMin(node.left);</span><br><span class="line">        <span class="keyword">return</span> node;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 使用递归的方法删除二叉树中的最大节点并返回</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> E <span class="title">removeMax</span><span class="params">()</span></span>&#123;</span><br><span class="line">        E res = maximun();</span><br><span class="line">        root = removeMax(root);</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> Node <span class="title">removeMax</span><span class="params">(Node node)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> ( node.right == <span class="keyword">null</span>)&#123;</span><br><span class="line">            size --;</span><br><span class="line">            <span class="keyword">return</span> node.left;</span><br><span class="line">        &#125;</span><br><span class="line">        node.right = removeMax(node.right);</span><br><span class="line">        <span class="keyword">return</span> node;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 使用递归删除二叉树中的某个节点</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> e</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">remove</span><span class="params">(E e)</span></span>&#123;</span><br><span class="line">        root = remove(root,e);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 实现删除二叉树中的指定节点的元素，有以下的情况。</span></span><br><span class="line"><span class="comment">     *  １．左子树为空，只需要将右孩子节点返回</span></span><br><span class="line"><span class="comment">     *  ２．右子树为空，讲左子树节点返回</span></span><br><span class="line"><span class="comment">     *  ３．左右都不为空：</span></span><br><span class="line"><span class="comment">     *          找出右子树的最小元素，从右子树中删除最小节点</span></span><br><span class="line"><span class="comment">     *          使用最小元素去代替原先的被删除元素。</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> node</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> e</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Node <span class="title">remove</span><span class="params">(Node node,E e)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span> ( node ==  <span class="keyword">null</span> )</span><br><span class="line">           <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">if</span> (e.compareTo(node.e) &lt; <span class="number">0</span>)&#123;</span><br><span class="line">            node.left = remove(node.left,e);</span><br><span class="line">            <span class="keyword">return</span> node;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (e.compareTo(node.e) &gt; <span class="number">0</span>)&#123;</span><br><span class="line">            node.right =remove(node.right,e);</span><br><span class="line">            <span class="keyword">return</span> node;</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;<span class="comment">//e.compareTo(node.e)=0</span></span><br><span class="line">            <span class="keyword">if</span> (node.left == <span class="keyword">null</span>)&#123;</span><br><span class="line">                size--;</span><br><span class="line">                <span class="keyword">return</span> node.right;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (node.right == <span class="keyword">null</span>)&#123;</span><br><span class="line">                size--;</span><br><span class="line">                <span class="keyword">return</span> node.left;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> &#123;</span><br><span class="line">                Node successor = minimun(node.right);</span><br><span class="line">                <span class="comment">//removeMin是一个有返回值的函数，找出右子树的最小元素</span></span><br><span class="line">                successor.right = removeMin(node.right);</span><br><span class="line">                successor.left = node.left;</span><br><span class="line">                <span class="keyword">return</span> successor;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span></span>&#123;</span><br><span class="line">        StringBuilder res = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">        generateBSTString(root,<span class="number">0</span>,res);</span><br><span class="line">        <span class="keyword">return</span> res.toString();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">generateBSTString</span><span class="params">(Node node, <span class="keyword">int</span> depth, StringBuilder res)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (node == <span class="keyword">null</span>) &#123;</span><br><span class="line">            res.append(generateDepthString(depth) + <span class="string">"null\n"</span>);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        res.append(generateDepthString(depth)+ node.e+<span class="string">"\n"</span>);</span><br><span class="line">        generateBSTString(node.left,depth+<span class="number">1</span>,res);</span><br><span class="line">        generateBSTString(node.right,depth+<span class="number">1</span>,res);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> String <span class="title">generateDepthString</span><span class="params">(<span class="keyword">int</span> depth)</span></span>&#123;</span><br><span class="line">        StringBuilder res = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; depth; i++) &#123;</span><br><span class="line">            res.append(<span class="string">"--"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res.toString();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//debug看一下添加的整个过程；</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Test</span> <span class="params">()</span> </span>&#123;</span><br><span class="line">        BinarySerchTree&lt;Integer&gt; bst = <span class="keyword">new</span> BinarySerchTree&lt;&gt;();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span>[] arr = &#123;<span class="number">15</span>,<span class="number">13</span>,<span class="number">10</span>,<span class="number">10</span>&#125;;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">            bst.add(arr[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        bst.levelOrder();</span><br><span class="line">        bst.remove(<span class="number">10</span>);<span class="comment">//如果二叉树中存在着相同的元素，那么只会删除第一个找到的元素</span></span><br><span class="line">        bst.levelOrder();</span><br><span class="line">        <span class="comment">//System.out.println("最小元素"+bst.minimun().toString());</span></span><br><span class="line">        <span class="comment">//bst.removeMin();</span></span><br><span class="line">        <span class="comment">//System.out.println("最小元素"+bst.minimun().toString());</span></span><br><span class="line">        <span class="comment">//System.out.println("最大元素"+bst.maximun().toString());</span></span><br><span class="line">        <span class="comment">//System.out.println("移除最大元素后");</span></span><br><span class="line">        <span class="comment">//bst.removeMax();</span></span><br><span class="line">        <span class="comment">//System.out.println("最大元素"+bst.maximun().toString());</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">//System.out.println(bst.contains(5));</span></span><br><span class="line">        <span class="comment">//bst.preOrder();</span></span><br><span class="line">        <span class="comment">//System.out.println(bst.toString());</span></span><br><span class="line">        <span class="comment">//bst.inOrder();</span></span><br><span class="line">        <span class="comment">//System.out.println("---------后序遍历");</span></span><br><span class="line">        <span class="comment">//bst.postOrder();</span></span><br><span class="line">        <span class="comment">//System.out.println("------------");</span></span><br><span class="line">        <span class="comment">//bst.preOrderNR();</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
  </entry>
  <entry>
    <title>Mybatis简单应用</title>
    <url>/2020/03/14/%E4%B8%80%E4%B8%AA%E7%AE%80%E5%8D%95%E7%9A%84Mybatis%E5%BA%94%E7%94%A8/</url>
    <content><![CDATA[<h2 id="1-构建一个基本的mybatis"><a href="#1-构建一个基本的mybatis" class="headerlink" title="1.构建一个基本的mybatis"></a>1.构建一个基本的mybatis</h2><h3 id="1-1mybatis的基本工作流程"><a href="#1-1mybatis的基本工作流程" class="headerlink" title="1.1mybatis的基本工作流程"></a>1.1mybatis的基本工作流程</h3><h4 id="a-Mybatis读取配置文件和映射文件"><a href="#a-Mybatis读取配置文件和映射文件" class="headerlink" title="a.Mybatis读取配置文件和映射文件"></a>a.Mybatis读取配置文件和映射文件</h4><h4 id="b-生成SqlSessionFactory对象"><a href="#b-生成SqlSessionFactory对象" class="headerlink" title="b.生成SqlSessionFactory对象"></a>b.生成SqlSessionFactory对象</h4><h4 id="c-SqlSession封装了所有的操作数据库方法-实际上SqlSession通过调用Executor接口来操作数据-库"><a href="#c-SqlSession封装了所有的操作数据库方法-实际上SqlSession通过调用Executor接口来操作数据-库" class="headerlink" title="c.SqlSession封装了所有的操作数据库方法,实际上SqlSession通过调用Executor接口来操作数据                            库."></a>c.SqlSession封装了所有的操作数据库方法,实际上SqlSession通过调用Executor接口来操作数据                            库.</h4><h4 id="d-Excutor执行器将要处理的Sql信息封装发哦MappedStatement对象中"><a href="#d-Excutor执行器将要处理的Sql信息封装发哦MappedStatement对象中" class="headerlink" title="d.Excutor执行器将要处理的Sql信息封装发哦MappedStatement对象中"></a>d.Excutor执行器将要处理的Sql信息封装发哦MappedStatement对象中</h4><h3 id="1-2-Mybatis简单应用"><a href="#1-2-Mybatis简单应用" class="headerlink" title="1.2.Mybatis简单应用"></a>1.2.Mybatis简单应用</h3><h4 id="1-2-1搭建开发环境"><a href="#1-2-1搭建开发环境" class="headerlink" title="1.2.1搭建开发环境"></a>1.2.1搭建开发环境</h4><h4 id="1-导入文件依赖"><a href="#1-导入文件依赖" class="headerlink" title="1.导入文件依赖"></a>1.导入文件依赖</h4><a id="more"></a>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">   </span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.4.6<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>8.0.17<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>log4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>log4j<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.12<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.10<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.18.8<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--配置资源过滤,否则不能加载配置文件--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">resources</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">resource</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">directory</span>&gt;</span>src/main/java<span class="tag">&lt;/<span class="name">directory</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">includes</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*.properties<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*.xml<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">includes</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">filtering</span>&gt;</span>false<span class="tag">&lt;/<span class="name">filtering</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">resource</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">resource</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">directory</span>&gt;</span>src/main/resources<span class="tag">&lt;/<span class="name">directory</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">includes</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*.properties<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*.xml<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">includes</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">filtering</span>&gt;</span>false<span class="tag">&lt;/<span class="name">filtering</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">resource</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">resources</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="2-创建数据库"><a href="#2-创建数据库" class="headerlink" title="2.创建数据库"></a>2.创建数据库</h4><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">Drop</span> <span class="keyword">database</span> <span class="keyword">if</span> <span class="keyword">exists</span> mybatis_demo;</span><br><span class="line"><span class="keyword">create</span> <span class="keyword">database</span> mybatis_demo;</span><br><span class="line"><span class="keyword">use</span> mybatis_demo;</span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> student(</span><br><span class="line">    <span class="keyword">sid</span> <span class="built_in">int</span> primary <span class="keyword">key</span> auto_increment,</span><br><span class="line">    sname <span class="built_in">varchar</span>(<span class="number">20</span>),</span><br><span class="line">    age <span class="built_in">varchar</span>(<span class="number">20</span>),</span><br><span class="line">    major <span class="built_in">varchar</span>(<span class="number">20</span>)</span><br><span class="line">)<span class="keyword">ENGINE</span>=<span class="keyword">INNODB</span> <span class="keyword">DEFAULT</span> <span class="keyword">CHARSET</span>=utf8;</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> student(sname, age, major) <span class="keyword">VALUES</span> (<span class="string">'张三'</span>,<span class="string">'20'</span>,<span class="string">'网络工程'</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> student(sname, age, major) <span class="keyword">VALUES</span> (<span class="string">'李四'</span>,<span class="string">'21'</span>,<span class="string">'软件工程'</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> student(sname, age, major) <span class="keyword">VALUES</span> (<span class="string">'王五'</span>,<span class="string">'22'</span>,<span class="string">'信息技术'</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> student(sname, age, major) <span class="keyword">VALUES</span> (<span class="string">'马六'</span>,<span class="string">'20'</span>,<span class="string">'物联网'</span>);</span><br></pre></td></tr></table></figure>

<h4 id="3-创建POJO类"><a href="#3-创建POJO类" class="headerlink" title="3.创建POJO类"></a>3.创建POJO类</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Student</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> sid;</span><br><span class="line">    <span class="keyword">private</span> String sname;</span><br><span class="line">    <span class="keyword">private</span> String age;</span><br><span class="line">    <span class="keyword">private</span> String major;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="4-创建数据库链接文件"><a href="#4-创建数据库链接文件" class="headerlink" title="4.创建数据库链接文件"></a>4.创建数据库链接文件</h4><figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="meta">jdbc.driver</span>=<span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line"><span class="meta">jdbc.url</span>=<span class="string">jdbc:mysql://localhost:3306/mybatis_demo?useUnicode=true&amp;characterEncoding=utf8&amp;serverTimezone=GMT%2B8&amp;useSSL=false</span></span><br><span class="line"><span class="meta">jdbc.username</span>=<span class="string">root</span></span><br><span class="line"><span class="meta">jdbc.password</span>=<span class="string">root</span></span><br></pre></td></tr></table></figure>

<h4 id="4-创建配置文件mybatis-config-xml"><a href="#4-创建配置文件mybatis-config-xml" class="headerlink" title="4.创建配置文件mybatis-config.xml"></a>4.创建配置文件mybatis-config.xml</h4><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">configuration</span></span></span><br><span class="line"><span class="meta">        <span class="meta-keyword">PUBLIC</span> <span class="meta-string">"-//mybatis.org//DTD Config 3.0//EN"</span></span></span><br><span class="line"><span class="meta">        <span class="meta-string">"http://mybatis.org/dtd/mybatis-3-config.dtd"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--  导入数据库配置文件 --&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">properties</span> <span class="attr">resource</span>=<span class="string">"database.properties"</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--    配置数据库连接池基本环境--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">environments</span> <span class="attr">default</span>=<span class="string">"mysql"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">environment</span> <span class="attr">id</span>=<span class="string">"mysql"</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--        事务管理器          --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">transactionManager</span> <span class="attr">type</span>=<span class="string">"JDBC"</span>&gt;</span><span class="tag">&lt;/<span class="name">transactionManager</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--   POOLED表示使用数据库连接池     --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dataSource</span> <span class="attr">type</span>=<span class="string">"POOLED"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"driver"</span> <span class="attr">value</span>=<span class="string">"$&#123;jdbc.driver&#125;"</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"url"</span> <span class="attr">value</span>=<span class="string">"$&#123;jdbc.url&#125;"</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"username"</span> <span class="attr">value</span>=<span class="string">"$&#123;jdbc.username&#125;"</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">value</span>=<span class="string">"$&#123;jdbc.password&#125;"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dataSource</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">environment</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">environments</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--    配置映射文件的位置--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">resource</span>=<span class="string">"xust/lfh/dao/StudentMapper.xml"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="5-配置StudnetMapper-xml映射文件"><a href="#5-配置StudnetMapper-xml映射文件" class="headerlink" title="5.配置StudnetMapper.xml映射文件"></a>5.配置StudnetMapper.xml映射文件</h4><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">mapper</span></span></span><br><span class="line"><span class="meta">        <span class="meta-keyword">PUBLIC</span> <span class="meta-string">"-//mybatis.org//DTD Mapper 3.0//EN"</span></span></span><br><span class="line"><span class="meta">        <span class="meta-string">"http://mybatis.org/dtd/mybatis-3-mapper.dtd"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">"student"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"findStudentBySid"</span> <span class="attr">parameterType</span>=<span class="string">"int"</span> <span class="attr">resultType</span>=<span class="string">"xust.lfh.pojo.Student"</span>&gt;</span></span><br><span class="line">        select * from Student where sid = #&#123;sid&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="6-导入log4j-properties配置"><a href="#6-导入log4j-properties配置" class="headerlink" title="6.导入log4j.properties配置"></a>6.导入log4j.properties配置</h4><figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="meta">log4j.rootLogger</span>=<span class="string">DEBUG, Console</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#Console</span></span><br><span class="line"><span class="meta">log4j.appender.Console</span>=<span class="string">org.apache.log4j.ConsoleAppender</span></span><br><span class="line"><span class="meta">log4j.appender.Console.layout</span>=<span class="string">org.apache.log4j.PatternLayout</span></span><br><span class="line"><span class="meta">log4j.appender.Console.layout.ConversionPattern</span>=<span class="string">%d [%t] %-5p [%c] - %m%n</span></span><br><span class="line"></span><br><span class="line"><span class="meta">log4j.logger.java.sql.ResultSet</span>=<span class="string">INFO</span></span><br><span class="line"><span class="meta">log4j.logger.org.apache</span>=<span class="string">INFO</span></span><br><span class="line"><span class="meta">log4j.logger.java.sql.Connection</span>=<span class="string">DEBUG</span></span><br><span class="line"><span class="meta">log4j.logger.java.sql.Statement</span>=<span class="string">DEBUG</span></span><br><span class="line"><span class="meta">log4j.logger.java.sql.PreparedStatement</span>=<span class="string">DEBUG</span></span><br></pre></td></tr></table></figure>

<p>​                            7.测试程序</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestFindBySid</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        String resource = <span class="string">"mybatis-config.xml"</span>;</span><br><span class="line">        <span class="comment">//1.读取mybatis_config.xml配置文件</span></span><br><span class="line">        InputStream in = Resources.getResourceAsStream(resource);</span><br><span class="line">        <span class="comment">//2.创建SqlSessionFactory</span></span><br><span class="line">        SqlSessionFactory factory =</span><br><span class="line">                <span class="keyword">new</span> SqlSessionFactoryBuilder().build(in);</span><br><span class="line">        <span class="comment">//3.创建SqlSession对象使用openSession()方法查询</span></span><br><span class="line">        SqlSession sqlSession = factory.openSession();</span><br><span class="line">        <span class="comment">//4.调用SqlSession对象的selectOne查询</span></span><br><span class="line">        Student student = sqlSession.selectOne(<span class="string">"student.findStudentBySid"</span>, <span class="number">1</span>);</span><br><span class="line">        System.out.println(student.toString());</span><br><span class="line">        <span class="comment">//关闭SqlSession</span></span><br><span class="line">        sqlSession.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>​    <img src="image/image-01.png" alt="image-20200222144337953"></p>
<h2 id=""><a href="#" class="headerlink" title=""></a></h2><hr>
]]></content>
      <categories>
        <category>mybatis</category>
      </categories>
      <tags>
        <tag>mybatis</tag>
      </tags>
  </entry>
  <entry>
    <title>ubuntu系统下使用git上传文件</title>
    <url>/2020/03/14/ubuntu%E7%B3%BB%E7%BB%9F%E4%B8%8B%E4%BD%BF%E7%94%A8git%E4%B8%8A%E4%BC%A0%E6%96%87%E4%BB%B6/</url>
    <content><![CDATA[<h1 id="ubuntu系统下使用git上传文件"><a href="#ubuntu系统下使用git上传文件" class="headerlink" title="ubuntu系统下使用git上传文件"></a>ubuntu系统下使用git上传文件</h1><p>1.在文件所在位置打开终端，输入如下命令,进行git全局设置：**</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git config --global user.name "用户名"</span><br><span class="line">git config --global user.email "用户邮箱"</span><br></pre></td></tr></table></figure>

<p><strong>2. 安装如下命令创建新的仓库，网址为自己新建项目的网址，cd转到自己要上传的项目文件夹：</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git clone https://git.aiiage.com:9999/song.yl/ReID.git</span><br><span class="line">cd ReID</span><br><span class="line">touch README.md</span><br><span class="line">git add README.md</span><br><span class="line">git commit -m "add README"</span><br><span class="line">git push -u origin master</span><br></pre></td></tr></table></figure>

<ol start="3">
<li>对已经存在的文件夹进行操作, 可以不用cd命令转到文件夹，直接到文件夹下打开终端执行如下命令,其中git commit命令后引号里面的内容可以自己命名：</li>
</ol>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cd existing_folder</span><br><span class="line">git init </span><br><span class="line">git remote add origin https:&#x2F;&#x2F;git.aiiage.com:9999&#x2F;song.yl&#x2F;ReID.git</span><br><span class="line">git add .</span><br><span class="line">git commit -m &quot;Initial commit&quot;</span><br><span class="line">git push -u origin master</span><br></pre></td></tr></table></figure>

<p><strong>4. 对存在的git仓库进行操作。依然可以直接在所在文件夹直接打开终端执行命令：</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cd existing_foloder</span><br><span class="line">git remote rename origin old-origin</span><br><span class="line">git remote add origin https://git.aiiage.com:9999/song.yl/ReID.git</span><br><span class="line">git push -u origin --all</span><br><span class="line">git push -u origin --tags</span><br><span class="line">git pull --allow-unrelated-histories</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Git</category>
      </categories>
      <tags>
        <tag>Git</tag>
      </tags>
  </entry>
  <entry>
    <title>springboot+vue图书管理</title>
    <url>/2020/03/14/springboot+vue%E5%9B%BE%E4%B9%A6%E7%AE%A1%E7%90%86/</url>
    <content><![CDATA[<h1 id="简单的使用springboot-vue进行前后端分离开发"><a href="#简单的使用springboot-vue进行前后端分离开发" class="headerlink" title="简单的使用springboot+vue进行前后端分离开发"></a>简单的使用springboot+vue进行前后端分离开发</h1><h1 id="1-创建Vue项目"><a href="#1-创建Vue项目" class="headerlink" title="1.创建Vue项目"></a>1.创建Vue项目</h1><h2 id="1-1安装配置"><a href="#1-1安装配置" class="headerlink" title="1.1安装配置"></a>1.1安装配置</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"> 1.[下载node.js](&#39;http:&#x2F;&#x2F;nodejs.cn&#x2F;download&#x2F;&#39;)</span><br><span class="line"></span><br><span class="line"> 2.全局安装脚手架工具vue-cli，命令如下：</span><br><span class="line"></span><br><span class="line">npm install --global vue-cli</span><br><span class="line"> 3.安装依赖</span><br><span class="line">  	npm install</span><br><span class="line"> 4.创建项目进入UI界面</span><br><span class="line">  	vue ui</span><br><span class="line"> 5.直接打开localhost:8080进入界面创建vue项目</span><br><span class="line"> 6.运行vue工程</span><br><span class="line">      npm run serve</span><br></pre></td></tr></table></figure>
<a id="more"></a>
<h2 id="1-2数据库"><a href="#1-2数据库" class="headerlink" title="1.2数据库"></a>1.2数据库</h2><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- MySQL dump 10.13  Distrib 8.0.11, for macos10.13 (x86_64)</span></span><br><span class="line"><span class="comment">--</span></span><br><span class="line"><span class="comment">-- Host: 127.0.0.1    Database: library</span></span><br><span class="line"><span class="comment">-- ------------------------------------------------------</span></span><br><span class="line"><span class="comment">-- Server version  8.0.11</span></span><br><span class="line"><span class="keyword">create</span> vuebook;</span><br><span class="line">user vuebook;</span><br><span class="line"><span class="comment">/*!40101 SET @OLD_CHARACTER_SET_CLIENT=@@CHARACTER_SET_CLIENT */</span>;</span><br><span class="line"><span class="comment">/*!40101 SET @OLD_CHARACTER_SET_RESULTS=@@CHARACTER_SET_RESULTS */</span>;</span><br><span class="line"><span class="comment">/*!40101 SET @OLD_COLLATION_CONNECTION=@@COLLATION_CONNECTION */</span>;</span><br><span class="line"> <span class="keyword">SET</span> <span class="keyword">NAMES</span> utf8mb4 ;</span><br><span class="line"><span class="comment">/*!40103 SET @OLD_TIME_ZONE=@@TIME_ZONE */</span>;</span><br><span class="line"><span class="comment">/*!40103 SET TIME_ZONE='+00:00' */</span>;</span><br><span class="line"><span class="comment">/*!40014 SET @OLD_UNIQUE_CHECKS=@@UNIQUE_CHECKS, UNIQUE_CHECKS=0 */</span>;</span><br><span class="line"><span class="comment">/*!40014 SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0 */</span>;</span><br><span class="line"><span class="comment">/*!40101 SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE='NO_AUTO_VALUE_ON_ZERO' */</span>;</span><br><span class="line"><span class="comment">/*!40111 SET @OLD_SQL_NOTES=@@SQL_NOTES, SQL_NOTES=0 */</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">--</span></span><br><span class="line"><span class="comment">-- Table structure for table `book`</span></span><br><span class="line"><span class="comment">--</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> <span class="keyword">IF</span> <span class="keyword">EXISTS</span> <span class="string">`book`</span>;</span><br><span class="line"><span class="comment">/*!40101 SET @saved_cs_client     = @@character_set_client */</span>;</span><br><span class="line"> <span class="keyword">SET</span> character_set_client = utf8mb4 ;</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="string">`book`</span> (</span><br><span class="line">  <span class="string">`id`</span> <span class="built_in">int</span>(<span class="number">10</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> AUTO_INCREMENT,</span><br><span class="line">  <span class="string">`name`</span> <span class="built_in">varchar</span>(<span class="number">20</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span>,</span><br><span class="line">  <span class="string">`author`</span> <span class="built_in">varchar</span>(<span class="number">20</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span>,</span><br><span class="line">  <span class="string">`publish`</span> <span class="built_in">varchar</span>(<span class="number">20</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span>,</span><br><span class="line">  <span class="string">`pages`</span> <span class="built_in">int</span>(<span class="number">10</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span>,</span><br><span class="line">  <span class="string">`price`</span> <span class="built_in">float</span>(<span class="number">10</span>,<span class="number">2</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span>,</span><br><span class="line">  <span class="string">`bookcaseid`</span> <span class="built_in">int</span>(<span class="number">10</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span>,</span><br><span class="line">  <span class="string">`abled`</span> <span class="built_in">int</span>(<span class="number">10</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span>,</span><br><span class="line">  PRIMARY <span class="keyword">KEY</span> (<span class="string">`id`</span>),</span><br><span class="line">  <span class="keyword">KEY</span> <span class="string">`FK_ieh6qsxp6q7oydadktc9oc8t2`</span> (<span class="string">`bookcaseid`</span>),</span><br><span class="line">  <span class="keyword">CONSTRAINT</span> <span class="string">`FK_ieh6qsxp6q7oydadktc9oc8t2`</span> <span class="keyword">FOREIGN</span> <span class="keyword">KEY</span> (<span class="string">`bookcaseid`</span>) <span class="keyword">REFERENCES</span> <span class="string">`bookcase`</span> (<span class="string">`id`</span>)</span><br><span class="line">) <span class="keyword">ENGINE</span>=<span class="keyword">InnoDB</span> AUTO_INCREMENT=<span class="number">119</span> <span class="keyword">DEFAULT</span> <span class="keyword">CHARSET</span>=utf8;</span><br><span class="line"><span class="comment">/*!40101 SET character_set_client = @saved_cs_client */</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">--</span></span><br><span class="line"><span class="comment">-- Dumping data for table `book`</span></span><br><span class="line"><span class="comment">--</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">LOCK</span> <span class="keyword">TABLES</span> <span class="string">`book`</span> WRITE;</span><br><span class="line"><span class="comment">/*!40000 ALTER TABLE `book` DISABLE KEYS */</span>;</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="string">`book`</span> <span class="keyword">VALUES</span> (<span class="number">1</span>,<span class="string">'解忧杂货店'</span>,<span class="string">'东野圭吾'</span>,<span class="string">'电子工业出版社'</span>,<span class="number">102</span>,<span class="number">27.30</span>,<span class="number">9</span>,<span class="number">1</span>),(<span class="number">2</span>,<span class="string">'追风筝的人'</span>,<span class="string">'卡勒德·胡赛尼'</span>,<span class="string">'中信出版社'</span>,<span class="number">330</span>,<span class="number">26.00</span>,<span class="number">1</span>,<span class="number">1</span>),(<span class="number">3</span>,<span class="string">'人间失格'</span>,<span class="string">'太宰治'</span>,<span class="string">'作家出版社'</span>,<span class="number">150</span>,<span class="number">17.30</span>,<span class="number">1</span>,<span class="number">1</span>),(<span class="number">4</span>,<span class="string">'这就是二十四节气'</span>,<span class="string">'高春香'</span>,<span class="string">'电子工业出版社'</span>,<span class="number">220</span>,<span class="number">59.00</span>,<span class="number">3</span>,<span class="number">1</span>),(<span class="number">5</span>,<span class="string">'白夜行'</span>,<span class="string">'东野圭吾'</span>,<span class="string">'南海出版公司'</span>,<span class="number">300</span>,<span class="number">27.30</span>,<span class="number">4</span>,<span class="number">1</span>),(<span class="number">6</span>,<span class="string">'摆渡人'</span>,<span class="string">'克莱儿·麦克福尔'</span>,<span class="string">'百花洲文艺出版社'</span>,<span class="number">225</span>,<span class="number">22.80</span>,<span class="number">1</span>,<span class="number">1</span>),(<span class="number">7</span>,<span class="string">'暖暖心绘本'</span>,<span class="string">'米拦弗特毕'</span>,<span class="string">'湖南少儿出版社'</span>,<span class="number">168</span>,<span class="number">131.60</span>,<span class="number">5</span>,<span class="number">1</span>),(<span class="number">8</span>,<span class="string">'天才在左疯子在右'</span>,<span class="string">'高铭'</span>,<span class="string">'北京联合出版公司'</span>,<span class="number">330</span>,<span class="number">27.50</span>,<span class="number">6</span>,<span class="number">1</span>),(<span class="number">9</span>,<span class="string">'我们仨'</span>,<span class="string">'杨绛'</span>,<span class="string">'生活.读书.新知三联书店'</span>,<span class="number">89</span>,<span class="number">17.20</span>,<span class="number">7</span>,<span class="number">1</span>),(<span class="number">10</span>,<span class="string">'活着'</span>,<span class="string">'余华'</span>,<span class="string">'作家出版社'</span>,<span class="number">100</span>,<span class="number">100.00</span>,<span class="number">6</span>,<span class="number">1</span>),(<span class="number">11</span>,<span class="string">'水浒传'</span>,<span class="string">'施耐庵'</span>,<span class="string">'三联出版社'</span>,<span class="number">300</span>,<span class="number">50.00</span>,<span class="number">1</span>,<span class="number">1</span>),(<span class="number">12</span>,<span class="string">'三国演义'</span>,<span class="string">'罗贯中'</span>,<span class="string">'三联出版社'</span>,<span class="number">300</span>,<span class="number">50.00</span>,<span class="number">2</span>,<span class="number">1</span>),(<span class="number">13</span>,<span class="string">'红楼梦'</span>,<span class="string">'曹雪芹'</span>,<span class="string">'三联出版社'</span>,<span class="number">300</span>,<span class="number">50.00</span>,<span class="number">5</span>,<span class="number">1</span>),(<span class="number">14</span>,<span class="string">'西游记'</span>,<span class="string">'吴承恩'</span>,<span class="string">'三联出版社'</span>,<span class="number">300</span>,<span class="number">60.00</span>,<span class="number">3</span>,<span class="number">1</span>);</span><br><span class="line"><span class="comment">/*!40000 ALTER TABLE `book` ENABLE KEYS */</span>;</span><br><span class="line"><span class="keyword">UNLOCK</span> <span class="keyword">TABLES</span>;</span><br><span class="line"><span class="comment">/*!40103 SET TIME_ZONE=@OLD_TIME_ZONE */</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*!40101 SET SQL_MODE=@OLD_SQL_MODE */</span>;</span><br><span class="line"><span class="comment">/*!40014 SET FOREIGN_KEY_CHECKS=@OLD_FOREIGN_KEY_CHECKS */</span>;</span><br><span class="line"><span class="comment">/*!40014 SET UNIQUE_CHECKS=@OLD_UNIQUE_CHECKS */</span>;</span><br><span class="line"><span class="comment">/*!40101 SET CHARACTER_SET_CLIENT=@OLD_CHARACTER_SET_CLIENT */</span>;</span><br><span class="line"><span class="comment">/*!40101 SET CHARACTER_SET_RESULTS=@OLD_CHARACTER_SET_RESULTS */</span>;</span><br><span class="line"><span class="comment">/*!40101 SET COLLATION_CONNECTION=@OLD_COLLATION_CONNECTION */</span>;</span><br><span class="line"><span class="comment">/*!40111 SET SQL_NOTES=@OLD_SQL_NOTES */</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- Dump completed on 2020-02-07 15:53:18</span></span><br></pre></td></tr></table></figure>

<h1 id="2-创建Book-vue"><a href="#2-创建Book-vue" class="headerlink" title="2.创建Book.vue"></a>2.创建Book.vue</h1><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h1</span>&gt;</span>&#123;&#123;msg&#125;&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">table</span> &gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span>编号<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span>图书名称<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span>作者<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">tr</span> <span class="attr">v-for</span>=<span class="string">"item in books"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span>&#123;&#123;item.id&#125;&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span>&#123;&#123;item.name&#125;&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span>&#123;&#123;item.author&#125;&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="actionscript">        name: <span class="string">"Book"</span>,</span></span><br><span class="line">        data()&#123;</span><br><span class="line"><span class="actionscript">            <span class="keyword">return</span>&#123;</span></span><br><span class="line"><span class="actionscript">                msg: <span class="string">"hello,Vue"</span>,</span></span><br><span class="line">                books:[</span><br><span class="line">                    &#123;</span><br><span class="line">                        id : 1,</span><br><span class="line"><span class="actionscript">                        name : <span class="string">'Java'</span>,</span></span><br><span class="line"><span class="actionscript">                        author : <span class="string">'张三'</span>,</span></span><br><span class="line">                    &#125;,</span><br><span class="line">                    &#123;</span><br><span class="line">                        id : 2,</span><br><span class="line"><span class="actionscript">                        name :  <span class="string">'水浒传'</span>,</span></span><br><span class="line"><span class="actionscript">                        author: <span class="string">'施耐恩'</span>,</span></span><br><span class="line">                    &#125;,</span><br><span class="line">                    &#123;</span><br><span class="line">                        id : 3,</span><br><span class="line"><span class="actionscript">                        name :  <span class="string">'三国演义'</span>,</span></span><br><span class="line"><span class="actionscript">                        author : <span class="string">'罗贯中'</span>,</span></span><br><span class="line">                    &#125;</span><br><span class="line">                ]</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        created() &#123;</span><br><span class="line"> </span><br><span class="line"><span class="handlebars"><span class="xml">     <span class="comment">&lt;!--获取后台的数据，并且返回到前台--&gt;</span>         axios.get('http://localhost:8181/book/findAll').then(resp =&gt; this.books=resp.data)</span></span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">scoped</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="2-1引入路由设置"><a href="#2-1引入路由设置" class="headerlink" title="2.1引入路由设置"></a>2.1引入路由设置</h2><figure class="highlight"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    path: '/book',</span><br><span class="line">    component:()=&gt;import('../views/Book.vue')</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>

<h1 id="3-编写springboot后台代码"><a href="#3-编写springboot后台代码" class="headerlink" title="3.编写springboot后台代码"></a>3.编写springboot后台代码</h1><h2 id="3-1创建Book实体类"><a href="#3-1创建Book实体类" class="headerlink" title="3.1创建Book实体类"></a>3.1创建Book实体类</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Entity</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Book</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Id</span></span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> String author;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="3-2创建BookReposity接口"><a href="#3-2创建BookReposity接口" class="headerlink" title="3.2创建BookReposity接口"></a>3.2创建BookReposity接口</h2><p>继承JPA去是实现查找功能</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">BookReposity</span> <span class="keyword">extends</span> <span class="title">JpaRepository</span>&lt;<span class="title">Book</span>,<span class="title">Integer</span>&gt; </span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="3-3后台返回数据的路径Controller"><a href="#3-3后台返回数据的路径Controller" class="headerlink" title="3.3后台返回数据的路径Controller"></a>3.3后台返回数据的路径Controller</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/book"</span>)</span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BookController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> BookReposity bookReposity;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"/findAll"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;Book&gt; <span class="title">findAll</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> bookReposity.findAll();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="3-4application-yml"><a href="#3-4application-yml" class="headerlink" title="3.4application.yml"></a>3.4application.yml</h2><figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">datasource:</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">jdbc:mysql://localhost:3306/vuebook?useUnicode=true&amp;characterEncoding=UTF-8&amp;serverTimezone=Asia/Shanghai</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">    <span class="attr">password:</span> <span class="string">root</span></span><br><span class="line">    <span class="attr">driver-class-name:</span> <span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line">  <span class="attr">jpa:</span></span><br><span class="line">    <span class="attr">show-sql:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">properties:</span></span><br><span class="line">      <span class="attr">hibernate:</span></span><br><span class="line">        <span class="attr">format_sql:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8181</span></span><br></pre></td></tr></table></figure>

<h5 id="3-5对于前后端不同地址访问，需要进行跨域配置"><a href="#3-5对于前后端不同地址访问，需要进行跨域配置" class="headerlink" title="3.5对于前后端不同地址访问，需要进行跨域配置"></a>3.5对于前后端不同地址访问，需要进行跨域配置</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 跨域配置</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CrosConfig</span> <span class="keyword">implements</span> <span class="title">WebMvcConfigurer</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addCorsMappings</span><span class="params">(CorsRegistry registry)</span> </span>&#123;</span><br><span class="line">        registry.addMapping(<span class="string">"/**"</span>)</span><br><span class="line">                .allowedOrigins(<span class="string">"*"</span>)</span><br><span class="line">                .allowedMethods(<span class="string">"GET"</span>,<span class="string">"POST"</span>,<span class="string">"DELETE"</span>,<span class="string">"PUT"</span>)</span><br><span class="line">                .allowCredentials(<span class="keyword">true</span>)</span><br><span class="line">                .maxAge(<span class="number">3600</span>)</span><br><span class="line">                .allowedHeaders(<span class="string">"*"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>前后端分离</category>
      </categories>
      <tags>
        <tag>springboot</tag>
        <tag>vue</tag>
      </tags>
  </entry>
  <entry>
    <title>springIOC 控制反转</title>
    <url>/2020/03/14/SpringIOC/</url>
    <content><![CDATA[<p>ioc控制反转是一种设计模式 </p>
<p> aop 面向切面</p>
<p>对与pojo均是使用依赖注入的方式 ，需要在pojo中使用set方法</p>
<p>1.Spring 中对于bean的配置通过applicationContext.xml进行配置</p>
<p>jopo文件</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Student</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> sid;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> String age;</span><br><span class="line">    <span class="keyword">private</span> String course;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Student</span><span class="params">(<span class="keyword">int</span> sid, String name, String age, String course)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.sid = sid;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">        <span class="keyword">this</span>.course = course;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<a id="more"></a>
<p>applicationContext.xml文件</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"student"</span> <span class="attr">class</span>=<span class="string">"pojo.Student"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">name</span>=<span class="string">"sid"</span> <span class="attr">value</span>=<span class="string">"1"</span> &gt;</span><span class="tag">&lt;/<span class="name">constructor-arg</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">name</span>=<span class="string">"name"</span> <span class="attr">value</span>=<span class="string">"zhangSan"</span>&gt;</span><span class="tag">&lt;/<span class="name">constructor-arg</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">name</span>=<span class="string">"age"</span> <span class="attr">value</span>=<span class="string">"18"</span>&gt;</span><span class="tag">&lt;/<span class="name">constructor-arg</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">name</span>=<span class="string">"course"</span> <span class="attr">value</span>=<span class="string">"Java"</span>&gt;</span><span class="tag">&lt;/<span class="name">constructor-arg</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"teacher"</span> <span class="attr">class</span>=<span class="string">"pojo.Teacher"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"tid"</span> <span class="attr">value</span>=<span class="string">"1"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"name"</span> <span class="attr">value</span>=<span class="string">"LiSi"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>  2.对于集合的配置</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Mix</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> List&lt;String&gt; myList;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Map&lt;String ,String &gt; myMap;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String[] myArray;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setMyList</span><span class="params">(List&lt;String&gt; myList)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.myList = myList;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setMyMap</span><span class="params">(Map&lt;String, String&gt; myMap)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.myMap = myMap;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setMyArray</span><span class="params">(String[] myArray)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.myArray = myArray;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>​    相关配置<br>&lt; !–more–&gt;     </p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"mix"</span> <span class="attr">class</span>=<span class="string">"pojo.Mix"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"myList"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">list</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">value</span>&gt;</span>list01<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">value</span>&gt;</span>list02<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">list</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"myMap"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">map</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">entry</span> <span class="attr">key</span>=<span class="string">"key01"</span> <span class="attr">value</span>=<span class="string">"map01"</span>&gt;</span><span class="tag">&lt;/<span class="name">entry</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">entry</span> <span class="attr">key</span>=<span class="string">"key02"</span> <span class="attr">value</span>=<span class="string">"map02"</span>&gt;</span><span class="tag">&lt;/<span class="name">entry</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">map</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"myArray"</span> &gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">array</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">value</span>&gt;</span>arryay01<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">value</span>&gt;</span>arryay02<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">array</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>spring</category>
      </categories>
      <tags>
        <tag>IOC</tag>
      </tags>
  </entry>
  <entry>
    <title>springAOP 面向切面编程</title>
    <url>/2020/03/14/Spring%20AOP%E9%9D%A2%E5%90%91%E5%88%87%E9%9D%A2%E7%BC%96%E7%A8%8B/</url>
    <content><![CDATA[<h1 id="1-Spring-AOP面向切面编程"><a href="#1-Spring-AOP面向切面编程" class="headerlink" title="1. Spring AOP面向切面编程"></a>1. Spring AOP面向切面编程</h1><p>categories：</p>
<ul>
<li>spring<br>tags：</li>
<li>AOP</li>
</ul>
<h2 id="1-1aop的基本术语"><a href="#1-1aop的基本术语" class="headerlink" title="1.1aop的基本术语"></a>1.1aop的基本术语</h2><h3 id="a-连接点-Joinpoint"><a href="#a-连接点-Joinpoint" class="headerlink" title="a.连接点(Joinpoint)"></a>a.连接点(Joinpoint)</h3><pre><code>本质上就定，是一个类或者是一段代码拥有边界性质的特定点都可以被作为连接点。</code></pre><h3 id="b-通知（Advice"><a href="#b-通知（Advice" class="headerlink" title="b.通知（Advice)"></a>b.通知（Advice)</h3><p>​                    前置通知（Before) 在目标方法被调用之前调用通知</p>
<p>​                    后置通知（After） 在目标方法被调用之后同值</p>
<p>​                    返回通知(After-returning)  在目标方法成功执行后调用通知</p>
<p>​                    异常通知(After-throwing)在目标方法抛出异常后调用通知</p>
<p>​                    环绕通知(Around)在被通知的方法调用前和调用后执行自定义的行为</p>
<h3 id="c-切点-Pointcut"><a href="#c-切点-Pointcut" class="headerlink" title="c.切点(Pointcut)"></a>c.切点(Pointcut)</h3><p>​                     匹配连接点的断言，AOP通过切点来定位特定的连接点，切入点表达式如何和连接点匹配</p>
<p>​        目标对象，引介，切面，织入，代理</p>
<a id="more"></a>
<h1 id="2-基于XML开发Spring-AOP"><a href="#2-基于XML开发Spring-AOP" class="headerlink" title="2.基于XML开发Spring AOP"></a>2.基于XML开发Spring AOP</h1><h2 id="2-1XML配置Spring-AOP的元素"><a href="#2-1XML配置Spring-AOP的元素" class="headerlink" title="2.1XML配置Spring AOP的元素"></a>2.1XML配置Spring AOP的元素</h2><p><img src="https://img-blog.csdn.net/20180509140538702?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dfbGludXg=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt="这里写图片描述"></p>
<h2 id="2-2具体实例"><a href="#2-2具体实例" class="headerlink" title="2.2具体实例"></a>2.2具体实例</h2><h4 id="a-创建一个UserService接口"><a href="#a-创建一个UserService接口" class="headerlink" title="a.创建一个UserService接口"></a>a.创建一个UserService接口</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserService</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">insert</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">delete</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">update</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">select</span><span class="params">()</span></span>;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="b-实现接口"><a href="#b-实现接口" class="headerlink" title="b.实现接口"></a>b.实现接口</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserServiceImpl</span> <span class="keyword">implements</span> <span class="title">UserService</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">insert</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"添加用户信息"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">delete</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"删除用户信息"</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">update</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"更新用户信息"</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">select</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"查询用户信息"</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="c-创建一个切面类"><a href="#c-创建一个切面类" class="headerlink" title="c.创建一个切面类"></a>c.创建一个切面类</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">XmlAdvice</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">before</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"这是前置通知"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">afterReturning</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"这是后置通知,不出现异常是调用"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">around</span><span class="params">(ProceedingJoinPoint point)</span> <span class="keyword">throws</span></span></span><br><span class="line"><span class="function">            Throwable</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"这是环绕通知之前的部分"</span>);</span><br><span class="line">        Object object = point.proceed();</span><br><span class="line">        System.out.println(<span class="string">"这是环绕通知之后的部分"</span>);</span><br><span class="line">        <span class="keyword">return</span> object;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">afterException</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"异常通知"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">after</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"这是后置通知"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="d-进行xml配置"><a href="#d-进行xml配置" class="headerlink" title="d.进行xml配置"></a>d.进行xml配置</h4><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:aop</span>=<span class="string">"http://www.springframework.org/schema/aop"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">"</span></span></span><br><span class="line"><span class="tag"><span class="string">                   http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="tag"><span class="string">                   http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">                   http://www.springframework.org/schema/aop</span></span></span><br><span class="line"><span class="tag"><span class="string">                   http://www.springframework.org/schema/aop/spring-aop.xsd"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">name</span>=<span class="string">"userService"</span> <span class="attr">class</span>=<span class="string">"demo.UserServiceImpl"</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">name</span>=<span class="string">"xmlAdvice"</span> <span class="attr">class</span>=<span class="string">"demo.XmlAdvice"</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">aop:config</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">aop:pointcut</span> <span class="attr">id</span>=<span class="string">"pointcut"</span> <span class="attr">expression</span>=<span class="string">"execution(* demo.UserServiceImpl*.*(..))"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">aop:aspect</span> <span class="attr">ref</span>=<span class="string">"xmlAdvice"</span>&gt;</span></span><br><span class="line">				</span><br><span class="line">                <span class="tag">&lt;<span class="name">aop:before</span> <span class="attr">method</span>=<span class="string">"before"</span> <span class="attr">pointcut-ref</span>=<span class="string">"pointcut"</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">aop:after-returning</span> <span class="attr">method</span>=<span class="string">"afterReturning"</span> <span class="attr">pointcut-ref</span>=<span class="string">"pointcut"</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">aop:around</span> <span class="attr">method</span>=<span class="string">"around"</span> <span class="attr">pointcut-ref</span>=<span class="string">"pointcut"</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">aop:after-throwing</span> <span class="attr">method</span>=<span class="string">"afterException"</span> <span class="attr">pointcut-ref</span>=<span class="string">"pointcut"</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">aop:after</span> <span class="attr">method</span>=<span class="string">"after"</span> <span class="attr">pointcut-ref</span>=<span class="string">"pointcut"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">aop:aspect</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">aop:config</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="tag">&lt;<span class="name">aop:aspectj-autoproxy</span>&gt;</span><span class="tag">&lt;/<span class="name">aop:aspectj-autoproxy</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h4 id="e-编写测试类"><a href="#e-编写测试类" class="headerlink" title="e.编写测试类"></a>e.编写测试类</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestXml</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        ClassPathXmlApplicationContext context = <span class="keyword">new</span></span><br><span class="line">                ClassPathXmlApplicationContext(<span class="string">"applicationContext_xml.xml"</span>);</span><br><span class="line"></span><br><span class="line">        UserService userService = context.getBean(<span class="string">"userService"</span>, UserService<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">        userService.delete();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="f-结果"><a href="#f-结果" class="headerlink" title="f.结果"></a>f.结果</h4><p><img src="C:%5CUsers%5CLFH%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5C1581523063510.png" alt="1581523063510"></p>
<h1 id="3-基于注解开发Spring-AOP"><a href="#3-基于注解开发Spring-AOP" class="headerlink" title="3.基于注解开发Spring AOP"></a>3.基于注解开发Spring AOP</h1><h2 id="3-1Spring-AOP支持的注解"><a href="#3-1Spring-AOP支持的注解" class="headerlink" title="3.1Spring AOP支持的注解"></a>3.1Spring AOP支持的注解</h2><p>​            @Aspect                                     切面</p>
<p>​            @Pointcut                                   切点    </p>
<p>​            @Before                                     前置通知</p>
<p>​            @After                                        后置通知</p>
<p>​            @Around                                    环绕通知</p>
<p>​            @AfterReturning                         返回通知</p>
<p>​            @AfterThrowing                          异常通知</p>
<h2 id="3-2-具体的一个实例"><a href="#3-2-具体的一个实例" class="headerlink" title="3.2 具体的一个实例"></a>3.2 具体的一个实例</h2><h4 id="a-创建一个UserService接口-1"><a href="#a-创建一个UserService接口-1" class="headerlink" title="a.创建一个UserService接口"></a>a.创建一个UserService接口</h4><h4 id="b-实现接口-1"><a href="#b-实现接口-1" class="headerlink" title="b.实现接口"></a>b.实现接口</h4><h4 id="c-创建一个切面"><a href="#c-创建一个切面" class="headerlink" title="c.创建一个切面"></a>c.创建一个切面</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Aspect</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AnnoAdvice</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Pointcut</span>(<span class="string">"execution( * demo.UserServiceImpl*.*(..))"</span>) </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">pointcut</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Before</span>(<span class="string">"pointcut()"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">before</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"这是前置通知"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@AfterReturning</span>(<span class="string">"pointcut()"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">afterReturning</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"这是后置通知,不出现异常是调用"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Around</span>(<span class="string">"pointcut()"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">around</span><span class="params">(ProceedingJoinPoint point)</span> <span class="keyword">throws</span></span></span><br><span class="line"><span class="function">            Throwable</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"这是环绕通知之前的部分"</span>);</span><br><span class="line">        Object object = point.proceed();</span><br><span class="line">        System.out.println(<span class="string">"这是环绕通知之后的部分"</span>);</span><br><span class="line">        <span class="keyword">return</span> object;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@AfterThrowing</span>(<span class="string">"pointcut()"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">afterException</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"异常通知"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@After</span>(<span class="string">"pointcut()"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">after</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"这是后置通知"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="d-配置applicationContext-xml文件"><a href="#d-配置applicationContext-xml文件" class="headerlink" title="d.配置applicationContext.xml文件"></a>d.配置applicationContext.xml文件</h4><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:aop</span>=<span class="string">"http://www.springframework.org/schema/aop"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">" </span></span></span><br><span class="line"><span class="tag"><span class="string">                   http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="tag"><span class="string">                   http://www.springframework.org/schema/beans/spring-beans.xsd                                        http://www.springframework.org/schema/aop </span></span></span><br><span class="line"><span class="tag"><span class="string">                    http://www.springframework.org/schema/aop/spring-aop.xsd"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">name</span>=<span class="string">"userService"</span> <span class="attr">class</span>=<span class="string">"demo.UserServiceImpl"</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">name</span>=<span class="string">"annoAdvice"</span> <span class="attr">class</span>=<span class="string">"demo.AnnoAdvice"</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">aop:aspectj-autoproxy</span>&gt;</span><span class="tag">&lt;/<span class="name">aop:aspectj-autoproxy</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="e-编写测试类-1"><a href="#e-编写测试类-1" class="headerlink" title="e.编写测试类"></a>e.编写测试类</h4><p>​            </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        ClassPathXmlApplicationContext context = <span class="keyword">new</span></span><br><span class="line">                ClassPathXmlApplicationContext(<span class="string">"applicationContext_demo.xml"</span>);</span><br><span class="line"></span><br><span class="line">        UserService userService = context.getBean(<span class="string">"userService"</span>, UserService<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">        userService.insert();</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="f-测试结果"><a href="#f-测试结果" class="headerlink" title="f.测试结果"></a>f.测试结果</h4><p><img src="C:%5CUsers%5CLFH%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5C1581520209378.png" alt="1581520209378"></p>
<p>根据测试结果我们可以知道面向切面编程的本质就是在你的切点上进行前后添加一些操作，这样极大的方便了我们在不需要对原来的代码进行修改，通过加上切点可以实现添加新的功能。</p>
<h1 id="4-切面的优先级"><a href="#4-切面的优先级" class="headerlink" title="4. 切面的优先级"></a>4. 切面的优先级</h1><h4 id="4-1-通过注解添加优先级"><a href="#4-1-通过注解添加优先级" class="headerlink" title="4.1 通过注解添加优先级"></a>4.1 通过注解添加优先级</h4><p>​        直接在切面上添加注解@Order(0)  ,@Order(1) 来表示优先级顺序</p>
<p>​        优先级高的切面它包含的通知先执行后退出</p>
<h4 id="42通过Ordered接口配置"><a href="#42通过Ordered接口配置" class="headerlink" title="42通过Ordered接口配置"></a>42通过Ordered接口配置</h4><p>​    可以通过重写getOrder方法修改返回值来决定顺序</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> aspect Aspect implements Ordered &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getOrder</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="4-3通过XML进行配置"><a href="#4-3通过XML进行配置" class="headerlink" title="4.3通过XML进行配置"></a>4.3通过XML进行配置</h4><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">name</span>=<span class="string">"aspect01"</span> <span class="attr">class</span>=<span class="string">"demo.Aspect01"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">name</span>=<span class="string">"aspect02"</span> <span class="attr">class</span>=<span class="string">"demo.Aspect02"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">aop:config</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--指定切点--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">aop:pointcut</span> <span class="attr">id</span>=<span class="string">"pointcut"</span> <span class="attr">expression</span>=<span class="string">"execution(* demo.UserServiceImpl*.*(..))"</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--配置第一个切面--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">aop:aspect</span> <span class="attr">ref</span>=<span class="string">"aspect01"</span> <span class="attr">order</span>=<span class="string">"1"</span>&gt;</span></span><br><span class="line">        </span><br><span class="line">        <span class="tag">&lt;<span class="name">aop:before</span> <span class="attr">method</span>=<span class="string">"before"</span> <span class="attr">pointcut-ref</span>=<span class="string">"pointcut"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">aop:after</span> <span class="attr">method</span>=<span class="string">"after"</span> <span class="attr">pointcut-ref</span>=<span class="string">"pointcut"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">aop:aspect</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--配置第二个切面--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">aop:aspect</span> <span class="attr">ref</span>=<span class="string">"aspect01"</span> <span class="attr">order</span>=<span class="string">"0"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">aop:before</span> <span class="attr">method</span>=<span class="string">"before"</span> <span class="attr">pointcut-ref</span>=<span class="string">"pointcut"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">aop:after</span> <span class="attr">method</span>=<span class="string">"after"</span> <span class="attr">pointcut-ref</span>=<span class="string">"pointcut"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">aop:aspect</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">aop:config</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">aop:aspectj-autoproxy</span>&gt;</span><span class="tag">&lt;/<span class="name">aop:aspectj-autoproxy</span>&gt;</span></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>spring</category>
      </categories>
      <tags>
        <tag>IOC</tag>
      </tags>
  </entry>
  <entry>
    <title>Mybatis中多对多的关系</title>
    <url>/2020/03/14/Mybatis%E4%B8%AD%E5%A4%9A%E5%AF%B9%E5%A4%9A%E7%9A%84%E5%85%B3%E7%B3%BB/</url>
    <content><![CDATA[<h1 id="Mbatis中多对多的关系"><a href="#Mbatis中多对多的关系" class="headerlink" title="Mbatis中多对多的关系"></a>Mbatis中多对多的关系</h1><p>多对多的关系使用一对多时候的<collection>标签进行处理</p>
<h2 id="1-1数据库准备"><a href="#1-1数据库准备" class="headerlink" title="1.1数据库准备"></a>1.1数据库准备</h2><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">use</span> relationship;</span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> class_info(</span><br><span class="line">    cid <span class="built_in">int</span> primary <span class="keyword">key</span> auto_increment,</span><br><span class="line">    cname <span class="built_in">varchar</span>(<span class="number">20</span>),</span><br><span class="line">    <span class="keyword">sum</span> <span class="built_in">int</span></span><br><span class="line">)<span class="keyword">engine</span> = <span class="keyword">innodb</span> <span class="keyword">default</span> <span class="keyword">charset</span>=utf8;</span><br><span class="line"></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> teach_info(</span><br><span class="line">    tid <span class="built_in">int</span> primary <span class="keyword">key</span> auto_increment,</span><br><span class="line">    tname <span class="built_in">varchar</span>(<span class="number">20</span>),</span><br><span class="line">    age <span class="built_in">varchar</span>(<span class="number">20</span>),</span><br><span class="line">    course <span class="built_in">varchar</span>(<span class="number">20</span>)</span><br><span class="line">)<span class="keyword">engine</span> = <span class="keyword">innodb</span> <span class="keyword">default</span> <span class="keyword">charset</span>=utf8;</span><br><span class="line"><span class="comment">#班级插入信息</span></span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> class_info(cname,<span class="keyword">sum</span>) <span class="keyword">values</span>(<span class="string">'Java1801'</span>,<span class="number">50</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> class_info(cname,<span class="keyword">sum</span>) <span class="keyword">values</span>(<span class="string">'Java1802'</span>,<span class="number">48</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> class_info(cname,<span class="keyword">sum</span>) <span class="keyword">values</span>(<span class="string">'Java1803'</span>,<span class="number">45</span>);</span><br><span class="line"><span class="comment">#教师表插入信息</span></span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> teach_info(tname, age, course) <span class="keyword">VALUES</span> (<span class="string">'张三'</span>,<span class="string">'28'</span>,<span class="string">'JavaSE'</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> teach_info(tname, age, course) <span class="keyword">VALUES</span> (<span class="string">'李四'</span>,<span class="string">'30'</span>,<span class="string">'JavaEE'</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> teach_info(tname, age, course) <span class="keyword">VALUES</span> (<span class="string">'张三'</span>,<span class="string">'25'</span>,<span class="string">'大数据'</span>);</span><br></pre></td></tr></table></figure>

<p>​    通过具有多个外键的表将他们联系起来</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">#教授信息表,中间表</span></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> class_teach(</span><br><span class="line">    <span class="keyword">id</span> <span class="built_in">int</span> primary <span class="keyword">key</span> auto_increment,</span><br><span class="line">    class_id <span class="built_in">int</span> , <span class="comment">#班级ID</span></span><br><span class="line">    teach_id <span class="built_in">int</span> , <span class="comment">#教师ID</span></span><br><span class="line">    <span class="keyword">foreign</span> <span class="keyword">key</span> (class_id) <span class="keyword">references</span> class_info(cid),</span><br><span class="line">    <span class="keyword">foreign</span> <span class="keyword">key</span> (teach_id) <span class="keyword">references</span> teach_info(tid)</span><br><span class="line">)<span class="keyword">engine</span>=<span class="keyword">innodb</span> <span class="keyword">default</span> <span class="keyword">charset</span>=utf8;</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> class_teach(class_id, teach_id) <span class="keyword">VALUES</span> (<span class="string">'1'</span>,<span class="string">'1'</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> class_teach(class_id, teach_id) <span class="keyword">VALUES</span> (<span class="string">'1'</span>,<span class="string">'2'</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> class_teach(class_id, teach_id) <span class="keyword">VALUES</span> (<span class="string">'2'</span>,<span class="string">'1'</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> class_teach(class_id, teach_id) <span class="keyword">VALUES</span> (<span class="string">'1'</span>,<span class="string">'3'</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> class_teach(class_id, teach_id) <span class="keyword">VALUES</span> (<span class="string">'3'</span>,<span class="string">'2'</span>);</span><br></pre></td></tr></table></figure>
<a id="more"></a>
<h2 id="1-2创建实体类"><a href="#1-2创建实体类" class="headerlink" title="1.2创建实体类"></a>1.2创建实体类</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//班级信息类</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ClassInfo</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> cid;</span><br><span class="line">    <span class="keyword">private</span> String cname;</span><br><span class="line">    <span class="keyword">private</span> String sum;</span><br><span class="line">    <span class="keyword">private</span> List&lt;TeachInfo&gt; teachInfoList;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//教师信息类</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TeachInfo</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> tid;</span><br><span class="line">    <span class="keyword">private</span> String tname;</span><br><span class="line">    <span class="keyword">private</span> String age;</span><br><span class="line">    <span class="keyword">private</span> String course;</span><br><span class="line">    <span class="keyword">private</span> List&lt;ClassInfo&gt; classInfoList;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="3-3配置ClassInfoMapper-xml"><a href="#3-3配置ClassInfoMapper-xml" class="headerlink" title="3.3配置ClassInfoMapper.xml"></a>3.3配置ClassInfoMapper.xml</h2><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">mapper</span></span></span><br><span class="line"><span class="meta">        <span class="meta-keyword">PUBLIC</span> <span class="meta-string">"-//mybatis.org//DTD Mapper 3.0//EN"</span></span></span><br><span class="line"><span class="meta">        <span class="meta-string">"http://mybatis.org/dtd/mybatis-3-mapper.dtd"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">"xust.lfh.pojo.ClassInfo"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"findClassInfoByCid"</span>  <span class="attr">resultMap</span>=<span class="string">"classInfoResultMap"</span>&gt;</span></span><br><span class="line">        select c.* ,t.tid,t.tname,t.age,t.course</span><br><span class="line">        from relationship.class_info c</span><br><span class="line">        left outer join relationship.class_teach ct on  ct.class_id = c.cid</span><br><span class="line">        left outer join relationship.teach_info t on ct.teach_id = t.tid</span><br><span class="line">        where cid = #&#123;cid&#125;</span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">"classInfoResultMap"</span> <span class="attr">type</span>=<span class="string">"xust.lfh.pojo.ClassInfo"</span> &gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">id</span> <span class="attr">column</span>=<span class="string">"cid"</span> <span class="attr">property</span>=<span class="string">"cid"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"cname"</span> <span class="attr">property</span>=<span class="string">"cname"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"sum"</span> <span class="attr">property</span>=<span class="string">"sum"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">collection</span> <span class="attr">property</span>=<span class="string">"teachInfoList"</span> <span class="attr">ofType</span>=<span class="string">"xust.lfh.pojo.TeachInfo"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">id</span> <span class="attr">column</span>=<span class="string">" tid"</span> <span class="attr">property</span>=<span class="string">"tid"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"tname"</span> <span class="attr">property</span>=<span class="string">"tname"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"age"</span> <span class="attr">property</span>=<span class="string">"age"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"course"</span> <span class="attr">property</span>=<span class="string">"course"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">collection</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="1-4编写测试类"><a href="#1-4编写测试类" class="headerlink" title="1.4编写测试类"></a>1.4编写测试类</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestManyToMany</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            InputStream in =</span><br><span class="line">                    Resources.getResourceAsStream(<span class="string">"mybatis-config.xml"</span>);</span><br><span class="line">            SqlSessionFactory factory = <span class="keyword">new</span> SqlSessionFactoryBuilder().build(in);</span><br><span class="line">            SqlSession sqlSession = factory.openSession();</span><br><span class="line">            List&lt;ClassInfo&gt; list = sqlSession.selectList(<span class="string">"xust.lfh.pojo.ClassInfo.findClassInfoByCid"</span>,<span class="number">2</span>);</span><br><span class="line">            <span class="keyword">for</span> (ClassInfo classInfo:list)&#123;</span><br><span class="line">                System.out.println(classInfo);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="1-5测试结果"><a href="#1-5测试结果" class="headerlink" title="1.5测试结果"></a>1.5测试结果</h2><p>输入2<img src="/image/image-5.png" alt="image-20200223022720770"></p>
<p>运行结果也是有一条</p>
<p><img src="/image/image-06.png" alt="image-20200223022827929"></p>
<p>输入1</p>
<p><img src="/image/image-07.png" alt="image-20200223022941967"></p>
<p>结果:</p>
<p><img src="/image/image-08.png" alt="image-20200223023905310"></p>
<p>问题在于老师的id并不能显示出来.</p>
]]></content>
      <categories>
        <category>mybatis</category>
      </categories>
      <tags>
        <tag>mybatis</tag>
      </tags>
  </entry>
  <entry>
    <title>Mybaties的关联映射</title>
    <url>/2020/03/14/Mybaties%E7%9A%84%E5%85%B3%E8%81%94%E6%98%A0%E5%B0%84/</url>
    <content><![CDATA[<hr>
<p>categories:<br>           - mybatis<br>tags:<br>           - mybatis</p>
<hr>
<h1 id="Mybaties的关联映射"><a href="#Mybaties的关联映射" class="headerlink" title="Mybaties的关联映射"></a>Mybaties的关联映射</h1><h2 id="1-一对一关系"><a href="#1-一对一关系" class="headerlink" title="1.一对一关系"></a>1.一对一关系</h2><p>一对一处理的是两个实体之间的一个属性相同.</p>
<p>​    一对一的关系处理需要在Mybatis的映射文件中加入<association>元素主要属性作用如下：</p>
<ul>
<li>property：java对象名称</li>
<li><strong>javaType：java对象类型</strong></li>
<li>colmun：当前表对应的外键字段名称</li>
<li>seelct：另一个数据集的名称</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">""</span> <span class="attr">type</span>=<span class="string">""</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">id</span> <span class="attr">property</span>=<span class="string">""</span> <span class="attr">column</span>=<span class="string">""</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">""</span> <span class="attr">column</span>=<span class="string">""</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">association</span> <span class="attr">property</span>=<span class="string">""</span> <span class="attr">column</span>=<span class="string">""</span> <span class="attr">javaType</span>=<span class="string">""</span> <span class="attr">select</span>=<span class="string">""</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">association</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>resuletMap 结果的返回格式,association用于连接连接外表的查询结果.将整个返回结合在一起</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">学生卡信息   stu_card (cid,balance)</span><br></pre></td></tr></table></figure>

<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">学生信息    stu(sid,sname, age, course, carid)</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">组合后的而返回类型根据resultMap改造为你自己需要的类型</span><br><span class="line">sid,sname, age, course, carid,balance</span><br></pre></td></tr></table></figure>

<p>根据之前的配置搭建好环境,现在只需要对数据库进行修改</p>
<a id="more"></a>
<h3 id="1-1数据准备"><a href="#1-1数据准备" class="headerlink" title="1.1数据准备"></a>1.1数据准备</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">drop</span> <span class="keyword">database</span> <span class="keyword">if</span> <span class="keyword">exists</span> relationship;</span><br><span class="line"><span class="keyword">create</span> <span class="keyword">database</span> relationship;</span><br><span class="line"><span class="keyword">use</span> relationship;</span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> stu_card(</span><br><span class="line">    cid <span class="built_in">int</span> primary <span class="keyword">key</span> auto_increment, <span class="comment">#学生ID</span></span><br><span class="line">    balance <span class="keyword">double</span>  <span class="comment">#余额</span></span><br><span class="line">)<span class="keyword">ENGINE</span>=<span class="keyword">INNODB</span> <span class="keyword">DEFAULT</span> <span class="keyword">CHARSET</span>=utf8;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> stu(</span><br><span class="line">    <span class="keyword">sid</span> <span class="built_in">int</span> primary <span class="keyword">key</span> auto_increment,</span><br><span class="line">    sname <span class="built_in">varchar</span>(<span class="number">20</span>),</span><br><span class="line">    age <span class="built_in">varchar</span>(<span class="number">20</span>),</span><br><span class="line">    course <span class="built_in">varchar</span>(<span class="number">20</span>),  <span class="comment">#课程</span></span><br><span class="line">    carid <span class="built_in">int</span> <span class="keyword">unique</span> ,  <span class="comment">#校园卡ID</span></span><br><span class="line">    <span class="keyword">foreign</span> <span class="keyword">key</span>(carid) <span class="keyword">references</span> stu_card(cid)  <span class="comment">#外键</span></span><br><span class="line">)<span class="keyword">ENGINE</span>=<span class="keyword">INNODB</span> <span class="keyword">DEFAULT</span> <span class="keyword">CHARSET</span>=utf8;</span><br><span class="line"></span><br><span class="line"><span class="comment">#向学生卡表中插入数据</span></span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> stu_card (balance) <span class="keyword">value</span> (<span class="number">1000.0</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> stu_card (balance) <span class="keyword">value</span> (<span class="number">1500.0</span>);</span><br><span class="line"><span class="comment">#向学生信息表中增添数据</span></span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> stu(sname, age, course, carid) <span class="keyword">VALUES</span> (<span class="string">'张三丰'</span>,<span class="string">'20'</span>,<span class="string">'Java'</span>,<span class="string">'1'</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> stu(sname, age, course, carid) <span class="keyword">VALUES</span> (<span class="string">'张无忌'</span>,<span class="string">'22'</span>,<span class="string">'Python'</span>,<span class="string">'2'</span>);</span><br></pre></td></tr></table></figure>

<h3 id="1-2创建对应的POJO类"><a href="#1-2创建对应的POJO类" class="headerlink" title="1.2创建对应的POJO类"></a>1.2创建对应的POJO类</h3><h4 id="Stu"><a href="#Stu" class="headerlink" title="Stu"></a>Stu</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Stu</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> sid;</span><br><span class="line">    <span class="keyword">private</span> String sname;</span><br><span class="line">    <span class="keyword">private</span> String age;</span><br><span class="line">    <span class="keyword">private</span> String course;</span><br><span class="line">    <span class="keyword">private</span> StuCard sc;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="StuCard"><a href="#StuCard" class="headerlink" title="StuCard"></a>StuCard</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StuCard</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> cid;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">double</span> balance;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="1-3创建映射文件"><a href="#1-3创建映射文件" class="headerlink" title="1.3创建映射文件"></a>1.3创建映射文件</h3><h4 id="StuMapper-xml"><a href="#StuMapper-xml" class="headerlink" title="StuMapper.xml"></a>StuMapper.xml</h4><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8" ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">mapper</span></span></span><br><span class="line"><span class="meta">        <span class="meta-keyword">PUBLIC</span> <span class="meta-string">"-//mybatis.org//DTD Mapper 3.0//EN"</span></span></span><br><span class="line"><span class="meta">        <span class="meta-string">"http://mybatis.org/dtd/mybatis-3-mapper.dtd"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">"xust.lfh.pojo.Stu"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"findStudentBySid"</span> <span class="attr">parameterType</span>=<span class="string">"int"</span> <span class="attr">resultMap</span>=<span class="string">"stuResultMap"</span>&gt;</span></span><br><span class="line">        select s.* ,c.balance from relationship.stu s ,relationship.stu_card c</span><br><span class="line">        where s.carid = c.cid and s.sid = #&#123;sid&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">"stuResultMap"</span> <span class="attr">type</span>=<span class="string">"xust.lfh.pojo.Stu"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">id</span> <span class="attr">column</span>=<span class="string">"sid"</span> <span class="attr">property</span>=<span class="string">"sid"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"sname"</span> <span class="attr">property</span>=<span class="string">"sname"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"age"</span> <span class="attr">property</span>=<span class="string">"age"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"course"</span> <span class="attr">property</span>=<span class="string">"course"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">association</span> <span class="attr">property</span>=<span class="string">"sc"</span> <span class="attr">javaType</span>=<span class="string">"xust.lfh.pojo.StuCard"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">id</span> <span class="attr">column</span>=<span class="string">"cid"</span> <span class="attr">property</span>=<span class="string">"cid"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"balance"</span> <span class="attr">property</span>=<span class="string">"balance"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">association</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="StuCardMapper-xml"><a href="#StuCardMapper-xml" class="headerlink" title="StuCardMapper.xml"></a>StuCardMapper.xml</h4><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">mapper</span></span></span><br><span class="line"><span class="meta">        <span class="meta-keyword">PUBLIC</span> <span class="meta-string">"-//mybatis.org//DTD Mapper 3.0//EN"</span></span></span><br><span class="line"><span class="meta">        <span class="meta-string">"http://mybatis.org/dtd/mybatis-3-mapper.dtd"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">"stuCard"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"findStuCardBycid"</span> <span class="attr">parameterType</span>=<span class="string">"int"</span> <span class="attr">resultMap</span>=<span class="string">"xust.lfh.pojo.StuCard"</span>&gt;</span></span><br><span class="line">        select * from relationship.stu_card</span><br><span class="line">        where cid = #&#123;cid&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="1-4测试代码"><a href="#1-4测试代码" class="headerlink" title="1.4测试代码"></a>1.4测试代码</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestOneToOne</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line"></span><br><span class="line">        InputStream in =</span><br><span class="line">                Resources.getResourceAsStream(<span class="string">"mybatis-config.xml"</span>);</span><br><span class="line">        SqlSessionFactory factory = <span class="keyword">new</span></span><br><span class="line">                SqlSessionFactoryBuilder().build(in);</span><br><span class="line">        SqlSession sqlSession = factory.openSession();</span><br><span class="line">        Stu stu = sqlSession.selectOne(<span class="string">"xust.lfh.pojo.Stu.findStudentBySid"</span>, <span class="number">1</span>);</span><br><span class="line">        System.out.println(stu);</span><br><span class="line">        sqlSession.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>1.5结果展示</p>
<p><img src="/image/image-02.png" alt="image-20200222164146147"></p>
<h2 id="2-一对多关系"><a href="#2-一对多关系" class="headerlink" title="2.一对多关系"></a>2.一对多关系</h2><p>一对多关系,一个实体对象被当成了另一个实体对象的属性.</p>
<p>一对多关系需要加入<collection>标签</p>
<h3 id="2-1-MyBatis中一对多关联查询使用-标签来实现关联，主要属性作用如下："><a href="#2-1-MyBatis中一对多关联查询使用-标签来实现关联，主要属性作用如下：" class="headerlink" title="2.1  MyBatis中一对多关联查询使用 标签来实现关联，主要属性作用如下："></a>2.1  MyBatis中一对多关联查询使用 <clloection>标签来实现关联，主要属性作用如下：</h3><p>`property ： java对象名称</p>
<p>ofType ：java对象的类型`</p>
<p>column：当前表对应的外键字段名称`</p>
<p>select：另一个数据集的名称`</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">""</span> <span class="attr">property</span>=<span class="string">" "</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">collection</span>&gt;</span></span><br></pre></td></tr></table></figure>





<h3 id="2-2数据准备"><a href="#2-2数据准备" class="headerlink" title="2.2数据准备"></a>2.2数据准备</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">use relationship;</span><br><span class="line">create table stu_class(</span><br><span class="line">    cid int primary key auto_increment, #班级ID</span><br><span class="line">    cname varchar(20), #班级名</span><br><span class="line">    sum int  #班级人数</span><br><span class="line"></span><br><span class="line">)engine &#x3D; innodb default charset&#x3D;utf8;</span><br><span class="line"></span><br><span class="line">create table stu_info(</span><br><span class="line">    sid int primary key auto_increment,</span><br><span class="line">    sname varchar(20),</span><br><span class="line">    age varchar(20),</span><br><span class="line">    course varchar(20), #课程</span><br><span class="line">    classid int,    #班级id</span><br><span class="line">    foreign key(classid) references stu_class(cid) #外键</span><br><span class="line">)engine &#x3D; innodb default charset&#x3D;utf8;</span><br><span class="line">#班级信息表插入信息</span><br><span class="line">insert into stu_class(cname, sum) VALUES (&#39;网工1701&#39;,&#39;30&#39;);</span><br><span class="line">insert into stu_class(cname, sum) VALUES (&#39;软工1701&#39;,&#39;30&#39;);</span><br><span class="line">#学生信息表插入信息</span><br><span class="line">insert into stu_info(sname, age, course, classid) VALUES (&#39;张三&#39;,&#39;20&#39;,&#39;Java&#39;,&#39;1&#39;);</span><br><span class="line">insert into stu_info(sname, age, course, classid) VALUES (&#39;李四&#39;,&#39;20&#39;,&#39;Java&#39;,&#39;1&#39;);</span><br><span class="line">insert into stu_info(sname, age, course, classid) VALUES (&#39;王五&#39;,&#39;20&#39;,&#39;Java&#39;,&#39;1&#39;);</span><br><span class="line">insert into stu_info(sname, age, course, classid) VALUES (&#39;马六&#39;,&#39;20&#39;,&#39;Java&#39;,&#39;1&#39;);</span><br></pre></td></tr></table></figure>



<h3 id="2-3-Sql直接查询"><a href="#2-3-Sql直接查询" class="headerlink" title="2.3 Sql直接查询"></a>2.3 Sql直接查询</h3><p><img src="image/image-03.png" alt="image-20200222171407868"></p>
<h3 id="2-4创建对应的POJO类"><a href="#2-4创建对应的POJO类" class="headerlink" title="2.4创建对应的POJO类"></a>2.4创建对应的POJO类</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StuInfo</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> sid;</span><br><span class="line">    <span class="keyword">private</span> String sname;</span><br><span class="line">    <span class="keyword">private</span> String age;</span><br><span class="line">    <span class="keyword">private</span> String course;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> classid;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>​    </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StuClass</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> cid;</span><br><span class="line">    <span class="keyword">private</span> String cname;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> sum;</span><br><span class="line">    <span class="keyword">private</span> List&lt;StuInfo&gt; stuInfoList;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="2-5创建配置文件StuClassMapper-xml"><a href="#2-5创建配置文件StuClassMapper-xml" class="headerlink" title="2.5创建配置文件StuClassMapper.xml,"></a>2.5创建配置文件StuClassMapper.xml,</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">mapper</span></span></span><br><span class="line"><span class="meta">        <span class="meta-keyword">PUBLIC</span> <span class="meta-string">"-//mybatis.org//DTD Mapper 3.0//EN"</span></span></span><br><span class="line"><span class="meta">        <span class="meta-string">"http://mybatis.org/dtd/mybatis-3-mapper.dtd"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">"xust.lfh.pojo.StuClass"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"findStuClassByCid"</span> <span class="attr">parameterType</span>=<span class="string">"Integer"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">resultMap</span>=<span class="string">"stuClassResultMap"</span>&gt;</span></span><br><span class="line">        select c.*,s.sid,s.sname,s.age,s.course,s.classid</span><br><span class="line">        from relationship.stu_class c,relationship.stu_info s</span><br><span class="line">        where s.classid = c.cid and cid = #&#123;cid&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">"stuClassResultMap"</span> <span class="attr">type</span>=<span class="string">"xust.lfh.pojo.StuClass"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">id</span> <span class="attr">column</span>=<span class="string">"cid"</span> <span class="attr">property</span>=<span class="string">"cid"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"cname"</span> <span class="attr">property</span>=<span class="string">"cname"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"sum"</span>   <span class="attr">property</span>=<span class="string">"sum"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">collection</span> <span class="attr">property</span>=<span class="string">"stuInfoList"</span> <span class="attr">ofType</span>=<span class="string">"xust.lfh.pojo.StuInfo"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">id</span> <span class="attr">column</span>=<span class="string">"sid"</span> <span class="attr">property</span>=<span class="string">"sid"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"sname"</span> <span class="attr">property</span>=<span class="string">"sname"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"age"</span> <span class="attr">property</span>=<span class="string">"age"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"course"</span> <span class="attr">property</span>=<span class="string">"course"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"classid"</span> <span class="attr">property</span>=<span class="string">"classid"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">collection</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="2-6mybatis-config中添加映射"><a href="#2-6mybatis-config中添加映射" class="headerlink" title="2.6mybatis-config中添加映射"></a>2.6mybatis-config中添加映射</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">resource</span>=<span class="string">"xust/lfh/dao/StuClassMapper.xml"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="2-7编写测试类"><a href="#2-7编写测试类" class="headerlink" title="2.7编写测试类"></a>2.7编写测试类</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestOneToMany</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            InputStream in = Resources.getResourceAsStream(<span class="string">"mybatis-config.xml"</span>);</span><br><span class="line">            SqlSessionFactory sqlSessionFactory =</span><br><span class="line">                    <span class="keyword">new</span> SqlSessionFactoryBuilder().build(in);</span><br><span class="line">            SqlSession sqlSession = sqlSessionFactory.openSession();</span><br><span class="line">            StuClass stuClass =</span><br><span class="line">                    sqlSession.selectOne(<span class="string">"xust.lfh.pojo.StuClass.findStuClassByCid"</span>, <span class="number">1</span>);</span><br><span class="line">            System.out.println(<span class="string">"班级ID:"</span>+stuClass.getCid()+<span class="string">"\n班级名:"</span>+stuClass.getCname()+<span class="string">"\n总人数:"</span>+stuClass.getSum());</span><br><span class="line">            <span class="keyword">for</span> (StuInfo stu: stuClass.getStuInfoList()) &#123;</span><br><span class="line">                System.out.println(stu.toString());</span><br><span class="line">            &#125;</span><br><span class="line">            sqlSession.close();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="2-8测试结果"><a href="#2-8测试结果" class="headerlink" title="2.8测试结果"></a>2.8测试结果</h3><p><img src="image/image-04.png" alt="image-20200222182035663"></p>
<p>​    </p>
<h3 id=""><a href="#" class="headerlink" title=""></a></h3><h3 id="-1"><a href="#-1" class="headerlink" title=""></a></h3>]]></content>
  </entry>
  <entry>
    <title>Mybaties-gennerator 逆向工程</title>
    <url>/2020/03/14/Mybaties-gennerator%20%E8%BF%9B%E8%A1%8C%E7%94%9F%E6%88%90%E4%BB%A3%E7%A0%81/</url>
    <content><![CDATA[<p>1.在pom.xml中添加依赖</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- mybatis-generator自动生成代码插件 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis.generator<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-generator-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.3.6<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">   </span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.2.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--此处使用和自己匹配的数据库版本--&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>8.0.17<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis.generator<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-generator-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.3.6<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure>
<a id="more"></a>
<p>2.generatorConfig.xml</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version='1.0' encoding='UTF-8'?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">generatorConfiguration</span></span></span><br><span class="line"><span class="meta">        <span class="meta-keyword">PUBLIC</span> <span class="meta-string">"-//mybatis.org//DTD MyBatis Generator Configuration 1.0//EN"</span></span></span><br><span class="line"><span class="meta">        <span class="meta-string">"http://mybatis.org/dtd/mybatis-generator-config_1_0.dtd"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">generatorConfiguration</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">context</span> <span class="attr">id</span>=<span class="string">"Tables"</span> <span class="attr">targetRuntime</span>=<span class="string">"MyBatis3"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">commentGenerator</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 是否去除自动生成的注释 true：是 ： false:否 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"suppressAllComments"</span> <span class="attr">value</span>=<span class="string">"true"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">commentGenerator</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!--连接数据库配置--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">jdbcConnection</span> <span class="attr">driverClass</span>=<span class="string">"com.mysql.cj.jdbc.Driver"</span></span></span><br><span class="line"><span class="tag">                        <span class="attr">connectionURL</span>=<span class="string">"jdbc:mysql://localhost:3306/ssm_atguigu_crud?useUnicode=true<span class="symbol">&amp;amp;</span>characterEncoding=utf8<span class="symbol">&amp;amp;</span>serverTimezone=GMT%2B8<span class="symbol">&amp;amp;</span>useSSL=false"</span></span></span><br><span class="line"><span class="tag">                        <span class="attr">userId</span>=<span class="string">"root"</span></span></span><br><span class="line"><span class="tag">                        <span class="attr">password</span>=<span class="string">"1234"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">jdbcConnection</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">javaTypeResolver</span> &gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"forceBigDecimals"</span> <span class="attr">value</span>=<span class="string">"false"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">javaTypeResolver</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--生成bean的位置--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">javaModelGenerator</span> <span class="attr">targetPackage</span>=<span class="string">"xust.lfh.pojo"</span> <span class="attr">targetProject</span>=<span class="string">"./src/main/java"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"enableSubPackages"</span> <span class="attr">value</span>=<span class="string">"true"</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"trimStrings"</span> <span class="attr">value</span>=<span class="string">"true"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">javaModelGenerator</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!--指定sql映射文件生成位置--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">sqlMapGenerator</span> <span class="attr">targetPackage</span>=<span class="string">"xust.lfh.mapper"</span>  <span class="attr">targetProject</span>=<span class="string">"./src/main/java"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"enableSubPackages"</span> <span class="attr">value</span>=<span class="string">"true"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">sqlMapGenerator</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!--指定dao接口生成的位置--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">javaClientGenerator</span> <span class="attr">type</span>=<span class="string">"XMLMAPPER"</span> <span class="attr">targetPackage</span>=<span class="string">"xust.lfh.dao"</span>  <span class="attr">targetProject</span>=<span class="string">"./src/main/java"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"enableSubPackages"</span> <span class="attr">value</span>=<span class="string">"true"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">javaClientGenerator</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--table来指定每个表的生成策略,此处的表明一定要和数据库的表名一致--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">table</span> <span class="attr">tableName</span>=<span class="string">"t_employee"</span> <span class="attr">domainObjectName</span>=<span class="string">"Employee"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">table</span> <span class="attr">tableName</span>=<span class="string">"t_department"</span> <span class="attr">domainObjectName</span>=<span class="string">"Department"</span>/&gt;</span></span><br><span class="line">        </span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">context</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">generatorConfiguration</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>3.</p>
<p>运行代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Generator</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">generator</span><span class="params">()</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">        List&lt;String&gt; warnings = <span class="keyword">new</span> ArrayList&lt;String&gt;();</span><br><span class="line">        <span class="keyword">boolean</span> overwrite = <span class="keyword">true</span>;</span><br><span class="line">        <span class="comment">/**指向逆向工程配置文件*/</span></span><br><span class="line">        File configFile = <span class="keyword">new</span> File(<span class="string">"D:/lfh/JavaProject/mybaties_generator/src/main/resources/generatorConfig.xml"</span>);</span><br><span class="line">        ConfigurationParser parser = <span class="keyword">new</span> ConfigurationParser(warnings);</span><br><span class="line">        Configuration config = parser.parseConfiguration(configFile);</span><br><span class="line">        DefaultShellCallback callback = <span class="keyword">new</span> DefaultShellCallback(overwrite);</span><br><span class="line">        MyBatisGenerator myBatisGenerator = <span class="keyword">new</span> MyBatisGenerator(config,</span><br><span class="line">                callback, warnings);</span><br><span class="line">        myBatisGenerator.generate(<span class="keyword">null</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Generator generatorSqlmap = <span class="keyword">new</span> Generator();</span><br><span class="line">            generatorSqlmap.generator();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>mybatis</category>
      </categories>
      <tags>
        <tag>mybatis</tag>
      </tags>
  </entry>
  <entry>
    <title>Lambda表达式的使用</title>
    <url>/2020/03/14/Lambda%E8%A1%A8%E8%BE%BE%E5%BC%8F%E7%9A%84%E4%BD%BF%E7%94%A8/</url>
    <content><![CDATA[<h1 id="Lambda表达式的基本使用"><a href="#Lambda表达式的基本使用" class="headerlink" title="Lambda表达式的基本使用"></a>Lambda表达式的基本使用</h1><h2 id="1-使用方法"><a href="#1-使用方法" class="headerlink" title="1.使用方法"></a>1.使用方法</h2><p>(parameters) -&gt; expression 或 (parameters) -&gt;{ statements; }</p>
<p> 接口名 对象 = (参数,参数) -&gt; { 代码块}</p>
<p>并不是所有接口都可以使用Lambda表达式,只有函数式接口可以。</p>
<p>按照Java8函数式接口的定义,其只能有一个抽象方法,否则就不是函数时接口,就无法用Lambda表达式。</p>
<p>可以使用@FunctionalInterface标注函数式接口,在编译时提前发现错误。</p>
<a id="more"></a>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> thread;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>: 介绍Lambda的使用</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: LFH</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span>: 2020/2/21  下午1:22</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LambdaDemo</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">interface</span> <span class="title">MathOperation</span></span>&#123;</span><br><span class="line">        <span class="function"><span class="keyword">int</span> <span class="title">operation</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span></span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 不使用Lambda,需要实现类继承接口,再在方法中new一个对象出来调用</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Division</span> <span class="keyword">implements</span> <span class="title">MathOperation</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">operation</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> (a / b);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 类中声明Lambda定义的方法</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">static</span> MathOperation multiplication = (<span class="keyword">int</span> a, <span class="keyword">int</span> b) -&gt; &#123; <span class="keyword">return</span> a * b; &#125;;</span><br><span class="line">    <span class="keyword">static</span> MathOperation subtraction = (a, b) -&gt; a - b;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 将对象和,参数都传递进去,使用对象调用函数直接传进函数的参数</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> a</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> b</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> mathOperation</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">int</span> <span class="title">operate</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b, MathOperation mathOperation)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> mathOperation.operation(a, b);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 实现类new对象调用方法</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        Division division = <span class="keyword">new</span> Division();</span><br><span class="line">        System.out.println(<span class="string">"10 / 5 = "</span> + division.operation(<span class="number">10</span>, <span class="number">5</span>));</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * lambda 相当于直接new出对象,直接调用</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        MathOperation addition = (<span class="keyword">int</span> a,<span class="keyword">int</span> b) -&gt;&#123; <span class="keyword">return</span> (a + b);&#125;;</span><br><span class="line">        <span class="keyword">int</span> addResult = addition.operation(<span class="number">1</span>, <span class="number">2</span>);</span><br><span class="line">        System.out.println(<span class="string">"10 + 5 = "</span>+addResult);</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         *静态方法中只能使用静态对象,可以使用传进参数,将参数二次传递.</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        LambdaDemo lambdaDemo = <span class="keyword">new</span> LambdaDemo();</span><br><span class="line">        System.out.println(<span class="string">"10 - 5 = "</span> + lambdaDemo.operate(<span class="number">10</span>, <span class="number">5</span>, subtraction));</span><br><span class="line">        System.out.println(<span class="string">"10 x 5 = "</span> + lambdaDemo.operate(<span class="number">10</span>, <span class="number">5</span>, multiplication));</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="变量作用域"><a href="#变量作用域" class="headerlink" title="变量作用域"></a>变量作用域</h2><p>lambda 表达式只能引用标记了 final 的外层局部变量，这就是说不能在 lambda 内部修改定义在域外的局部变量，否则会编译错误。</p>
]]></content>
      <categories>
        <category>java基础</category>
      </categories>
      <tags>
        <tag>Lambda</tag>
      </tags>
  </entry>
  <entry>
    <title>AVL 平衡二叉树</title>
    <url>/2020/03/14/AVL%20%E5%B9%B3%E8%A1%A1%E4%BA%8C%E5%8F%89%E6%A0%91/</url>
    <content><![CDATA[<h1 id="AVL-平衡二叉树"><a href="#AVL-平衡二叉树" class="headerlink" title="AVL 平衡二叉树"></a>AVL 平衡二叉树</h1><h2 id="1-AVL平衡树的定义："><a href="#1-AVL平衡树的定义：" class="headerlink" title="1.AVL平衡树的定义："></a>1.AVL平衡树的定义：</h2><p>​    AVL数是一种自平衡的二叉查找树，在AVL树中人和街店的两个字数的高度差不能超过1，就是相当于在二叉搜索树的基础上，再插入和删除的时候进行了平衡处理。</p>
<p>  平衡二叉树节点的高度由左右子树中的最高的决定，下面的二叉树高度标出</p>
<pre><code>4        k1              
        /  \           
3      k2   z  1  
      /  \    
2    x    y  1    
    //    /     
1   o</code></pre><h2 id="1对于平衡树中存在的不平衡的四种情况"><a href="#1对于平衡树中存在的不平衡的四种情况" class="headerlink" title="1对于平衡树中存在的不平衡的四种情况"></a>1对于平衡树中存在的不平衡的四种情况</h2><h3 id="LL"><a href="#LL" class="headerlink" title="LL"></a>LL</h3><p>k1的左子树存在高度为4，右子树高度为2，不满足平衡术的概念进行如下处理</p>
<p>调整的时候发现，x和 o 的相对连接关系一直没变，所以o是x的左孩子还是右孩子无所谓了,都是LL处理方式。o 如果是 x的左孩子，处理方式和步骤一模一样。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">     k1                 k2</span><br><span class="line">     &#x2F;  \               &#x2F;  \</span><br><span class="line">    k2   z    LL单转   x    k1</span><br><span class="line">   &#x2F;  \       ----\   &#x2F;    &#x2F; \</span><br><span class="line">  x    y      ----&#x2F;  o    y   z</span><br><span class="line"> &#x2F;&#x2F;    &#x2F;      k1右旋</span><br><span class="line">o</span><br></pre></td></tr></table></figure>

<h3 id="RR"><a href="#RR" class="headerlink" title="RR"></a>RR</h3><p>同理只需要移动k2，将y作为k1的右孩子即可</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">对如下的RR情况</span><br><span class="line"></span><br><span class="line">        k1                      k2                            </span><br><span class="line">       &#x2F;  \                    &#x2F;  \                                  </span><br><span class="line">      x    k2      RR单转     k1   k3</span><br><span class="line">          &#x2F; \      ----\     &#x2F; \    \</span><br><span class="line">         y   k3    ----&#x2F;    x   y    z</span><br><span class="line">              \    k1左旋</span><br><span class="line">               z</span><br></pre></td></tr></table></figure>

<h3 id="LR"><a href="#LR" class="headerlink" title="LR"></a>LR</h3><p>对于k2进行左旋，在对k1进行右旋即可</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">对如下的LR情况</span><br><span class="line">     k1                k1                k3</span><br><span class="line">    &#x2F;  \              &#x2F;  \              &#x2F;  \</span><br><span class="line">   k2   z  RR单转    k3   z   LL单转    k2  k1</span><br><span class="line">  &#x2F;  \     -----\   &#x2F; \      -----\   &#x2F; \  &#x2F; \</span><br><span class="line"> w   k3    -----&#x2F;  k2  y     -----&#x2F;  w  x y   z</span><br><span class="line">    &#x2F;  \   k2左旋  &#x2F; \        k1右旋</span><br><span class="line">   x    y         w  x</span><br></pre></td></tr></table></figure>

<h3 id="RL"><a href="#RL" class="headerlink" title="RL"></a>RL</h3><p>对于k2进行右旋，在对k1进行左旋</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">对如下的RL情况</span><br><span class="line">   k1                k1                  k3</span><br><span class="line">  &#x2F;  \     LL单转    &#x2F; \      RR单旋     &#x2F;  \</span><br><span class="line"> w   k2    -----\   w  k3    -----\    k1  k2</span><br><span class="line">     &#x2F; \   -----&#x2F;     &#x2F; \    -----&#x2F;   &#x2F; \  &#x2F; \</span><br><span class="line">    k3  z  k2右旋     x  k2   k1左旋  w   x y  z</span><br><span class="line">   &#x2F; \                  &#x2F; \</span><br><span class="line">  x   y                y   z</span><br></pre></td></tr></table></figure>

<h2 id="3-代码实现"><a href="#3-代码实现" class="headerlink" title="3.代码实现"></a>3.代码实现</h2><a id="more"></a>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> datastructure.AVL;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>:</span></span><br><span class="line"><span class="comment"> *  AVL树是一种自平衡的二叉查找树，在AVL树中任何节点的两个子树的高度差不能超过1。就是相当于在二叉搜索树的基础上，在插入和删除时进行了平衡处理。</span></span><br><span class="line"><span class="comment"> *  主要是对于平衡的处理存在着四种平衡处理： LL、RR、LR、RL</span></span><br><span class="line"><span class="comment"> *  在这对于影响平衡的结果进行左旋，右旋</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: LFH</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span>: 2020/3/12  17:39</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AVLTree</span>&lt;<span class="title">Key</span> <span class="keyword">extends</span> <span class="title">Comparable</span>&lt;? <span class="title">super</span> <span class="title">Key</span>&gt;, <span class="title">Value</span>&gt; </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="class"><span class="keyword">class</span> <span class="title">Node</span> </span>&#123;</span><br><span class="line">        Key key;<span class="comment">//键，相当于词典里的单词</span></span><br><span class="line">        Value value;<span class="comment">//值，相当于词典里的单词解释</span></span><br><span class="line">        <span class="keyword">int</span> height;<span class="comment">//结点的高度，由左右子树中最高的决定</span></span><br><span class="line">        Node left;</span><br><span class="line">        Node right;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">Node</span><span class="params">(Key key, Value value)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.key = key;</span><br><span class="line">            <span class="keyword">this</span>.value = value;</span><br><span class="line">            <span class="keyword">this</span>.left = <span class="keyword">null</span>;</span><br><span class="line">            <span class="keyword">this</span>.right = <span class="keyword">null</span>;</span><br><span class="line">            <span class="keyword">int</span> height = <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Node root;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">AVLTree</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        root = <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">int</span> <span class="title">height</span><span class="params">(Node node)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (node != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> node.height;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 递归找出二叉树的高度</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">height</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> height(root);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">int</span> <span class="title">max</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> a &gt; b ? a : b;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">replaceNode</span><span class="params">(Node src, Node tar)</span> </span>&#123;</span><br><span class="line">        tar.key = src.key;</span><br><span class="line">        tar.value = src.value;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">        先序遍历，递归的私有方法</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">preOrder</span><span class="params">(Node node)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (node != <span class="keyword">null</span>) &#123;</span><br><span class="line">            System.out.println(node.key);</span><br><span class="line">            preOrder(node.left);</span><br><span class="line">            preOrder(node.right);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     使用递归的方法进行对二叉树先序遍历</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">preOrder</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        preOrder(root);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">inOrder</span><span class="params">(Node node)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (node != <span class="keyword">null</span>) &#123;</span><br><span class="line">            inOrder(node.left);</span><br><span class="line">            System.out.println(node.key);</span><br><span class="line">            inOrder(node.right);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * 递归实现中序遍历</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">inOrder</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        inOrder(root);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">postOrder</span><span class="params">(Node node)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (node != <span class="keyword">null</span>) &#123;</span><br><span class="line">            postOrder(node.left);</span><br><span class="line">            postOrder(node.right);</span><br><span class="line">            System.out.println(node.key);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 递归实现后续遍历</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">postOrder</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        postOrder(root);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> Node <span class="title">search</span><span class="params">(Node node, Key key)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (node == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (key.compareTo(node.key) == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> node;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (key.compareTo(node.key) &lt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> search(node.left, key);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;<span class="comment">//key.compareTo(node.key) &gt; 0</span></span><br><span class="line">            <span class="keyword">return</span> search(node.right, key);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Node <span class="title">search</span><span class="params">(Key key)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> search(root, key);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> Node <span class="title">minNode</span><span class="params">(Node node)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (node == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (node.left == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> node;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> minNode(node.left);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 找出最小的节点，必存在于左子树</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Node <span class="title">minNode</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> minNode(root);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> Node <span class="title">maxNode</span><span class="params">(Node node)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (node == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (node.right == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> node;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> maxNode(node.right);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Node <span class="title">maxNode</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> maxNode(root);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 对如下的LL情况</span></span><br><span class="line">    <span class="comment">//</span></span><br><span class="line">    <span class="comment">//         k1                 k2</span></span><br><span class="line">    <span class="comment">//        /  \               /  \</span></span><br><span class="line">    <span class="comment">//       k2   z    LL单转   x    k1</span></span><br><span class="line">    <span class="comment">//      /  \       ----\   /    / \</span></span><br><span class="line">    <span class="comment">//     x    y      ----/  o    y   z</span></span><br><span class="line">    <span class="comment">//    //    /      k1右旋</span></span><br><span class="line">    <span class="comment">//   o</span></span><br><span class="line">    <span class="comment">//</span></span><br><span class="line">    <span class="comment">//   或</span></span><br><span class="line">    <span class="comment">//</span></span><br><span class="line">    <span class="comment">//         k1                 k2</span></span><br><span class="line">    <span class="comment">//        /  \               /  \</span></span><br><span class="line">    <span class="comment">//       k2   z    LL单转    x   k1</span></span><br><span class="line">    <span class="comment">//      /  \       ----\     \  / \</span></span><br><span class="line">    <span class="comment">//     x    y      ----/      o y  z</span></span><br><span class="line">    <span class="comment">//      \          k1右旋</span></span><br><span class="line">    <span class="comment">//       o</span></span><br><span class="line">    <span class="comment">//</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> Node <span class="title">leftLeftRotation</span><span class="params">(Node k1)</span> </span>&#123;</span><br><span class="line">        Node k2 = k1.left; <span class="comment">//k2是k1的左子树</span></span><br><span class="line"></span><br><span class="line">        k1.left = k2.right;<span class="comment">//k2的右子树 变为 k1 的左子树</span></span><br><span class="line">        k2.right = k1; <span class="comment">//k1变为k2的右子树</span></span><br><span class="line"></span><br><span class="line">        k1.height = max(height(k1.left), height(k1.right)) + <span class="number">1</span>;<span class="comment">//计算k1的高度</span></span><br><span class="line">        k2.height = max(height(k2.left), k1.height) + <span class="number">1</span>;<span class="comment">//计算k2的高度</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> k2;<span class="comment">//返回新的根k2</span></span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//     对如下的RR情况</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//             k1                      k2</span></span><br><span class="line"><span class="comment">//            /  \                    /  \</span></span><br><span class="line"><span class="comment">//           x    k2      RR单转     k1   k3</span></span><br><span class="line"><span class="comment">//               / \      ----\     / \    \</span></span><br><span class="line"><span class="comment">//              y   k3    ----/    x   y    z</span></span><br><span class="line"><span class="comment">//                   \    k1左旋</span></span><br><span class="line"><span class="comment">//                    z</span></span><br><span class="line">    <span class="comment">//</span></span><br><span class="line">    <span class="comment">//   或</span></span><br><span class="line">    <span class="comment">//</span></span><br><span class="line">    <span class="comment">//         k1                      k2</span></span><br><span class="line">    <span class="comment">//        /  \                    /  \</span></span><br><span class="line">    <span class="comment">//       x    k2      RR单转       k1   k3</span></span><br><span class="line">    <span class="comment">//           / \      ----\     / \   /</span></span><br><span class="line">    <span class="comment">//          y  k3     ----/    x   y z</span></span><br><span class="line">    <span class="comment">//             /      k1左旋</span></span><br><span class="line">    <span class="comment">//            z</span></span><br><span class="line">    <span class="comment">//</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Node <span class="title">rightRightRotation</span><span class="params">(Node k1)</span> </span>&#123;</span><br><span class="line">        Node k2 = k1.right;</span><br><span class="line"></span><br><span class="line">        k1.right = k2.left;</span><br><span class="line">        k2.left = k1;</span><br><span class="line"></span><br><span class="line">        k1.height = max(height(k1.left), height(k1.right)) + <span class="number">1</span>;</span><br><span class="line">        k2.height = max(k1.height, height(k2.right)) + <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> k2;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//     对如下的LR情况</span></span><br><span class="line"><span class="comment">//          k1                k1                k3</span></span><br><span class="line"><span class="comment">//         /  \              /  \              /  \</span></span><br><span class="line"><span class="comment">//        k2   z  RR单转    k3   z   LL单转    k2  k1</span></span><br><span class="line"><span class="comment">//       /  \     -----\   / \      -----\   / \  / \</span></span><br><span class="line"><span class="comment">//      w   k3    -----/  k2  y     -----/  w  x y   z</span></span><br><span class="line"><span class="comment">//         /  \   k2左旋  / \        k1右旋</span></span><br><span class="line"><span class="comment">//        x    y         w  x</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Node <span class="title">leftRightRotation</span><span class="params">(Node k1)</span> </span>&#123;</span><br><span class="line">        k1.left = rightRightRotation(k1.left);</span><br><span class="line">        <span class="keyword">return</span> leftLeftRotation(k1);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//     对如下的RL情况</span></span><br><span class="line"><span class="comment">//        k1                k1                  k3</span></span><br><span class="line"><span class="comment">//       /  \     LL单转    / \      RR单旋     /  \</span></span><br><span class="line"><span class="comment">//      w   k2    -----\   w  k3    -----\    k1  k2</span></span><br><span class="line"><span class="comment">//          / \   -----/     / \    -----/   / \  / \</span></span><br><span class="line"><span class="comment">//         k3  z  k2右旋     x  k2   k1左旋  w   x y  z</span></span><br><span class="line"><span class="comment">//        / \                  / \</span></span><br><span class="line"><span class="comment">//       x   y                y   z</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Node <span class="title">rightLeftRotation</span><span class="params">(Node k1)</span> </span>&#123;</span><br><span class="line">        k1.right = leftLeftRotation(k1.right);</span><br><span class="line">        <span class="keyword">return</span> rightRightRotation(k1);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//插入</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> Node <span class="title">insert</span><span class="params">(Node node, Key key, Value value)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (node == <span class="keyword">null</span>) <span class="keyword">return</span> <span class="keyword">new</span> Node(key, value);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (key.compareTo(node.key) == <span class="number">0</span>) &#123;<span class="comment">//如果key相同则更新该节点</span></span><br><span class="line"></span><br><span class="line">            node.value = value;</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (key.compareTo(node.key) &lt; <span class="number">0</span>) &#123;<span class="comment">//如果key比当前根小，则去左子树找。即一步Left</span></span><br><span class="line"></span><br><span class="line">            node.left = insert(node.left, key, value);</span><br><span class="line">            <span class="keyword">if</span> (height(node.left) - height(node.right) == <span class="number">2</span>) &#123;<span class="comment">//插在左边所以肯定是左-右，高度差2表示已经不平衡</span></span><br><span class="line">                <span class="keyword">if</span> (key.compareTo(node.left.key) &lt; <span class="number">0</span>) &#123;<span class="comment">// 又一步Left，所以是LeftLeft</span></span><br><span class="line">                    node = leftLeftRotation(node);</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123; <span class="comment">//一步Right，所以是LeftRight</span></span><br><span class="line">                    node = leftRightRotation(node);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;   <span class="comment">// node.key &lt; key,那么去右子树找.即一步Right</span></span><br><span class="line"></span><br><span class="line">            node.right = insert(node.right, key, value);</span><br><span class="line">            <span class="keyword">if</span> (height(node.right) - height(node.left) == <span class="number">2</span>) &#123;<span class="comment">//插在右边所以肯定是右-左，高度差2表示已经不平衡</span></span><br><span class="line">                <span class="keyword">if</span> (key.compareTo(node.right.key) &gt; <span class="number">0</span>) &#123;<span class="comment">//又一步Right,所以是RightRight</span></span><br><span class="line">                    node = rightRightRotation(node);</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;<span class="comment">//一步Left，所以是RightLeft</span></span><br><span class="line">                    node = rightLeftRotation(node);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        node.height = max(height(node.left), height(node.right)) + <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">return</span> node;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">insert</span><span class="params">(Key key, Value value)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.root = insert(<span class="keyword">this</span>.root, key, value);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//删除</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> node   当前子树根节点</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> target 要删除的结点</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 删除后的新的子树根</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> Node <span class="title">remove</span><span class="params">(Node node, Node target)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (node == <span class="keyword">null</span> || target == <span class="keyword">null</span>) <span class="keyword">return</span> node;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (target.key.compareTo(node.key) &lt; <span class="number">0</span>) &#123;<span class="comment">//待删除key的比根的key小，那么继续在左子树查找</span></span><br><span class="line"></span><br><span class="line">            node.left = remove(node.left, target);</span><br><span class="line">            <span class="keyword">if</span> (height(node.right) - height(node.left) == <span class="number">2</span>) &#123;<span class="comment">//如果在删除后失去平衡</span></span><br><span class="line">                <span class="keyword">if</span> (height(node.right.left) &lt;= height(node.right.right)) &#123;</span><br><span class="line">                    node = rightRightRotation(node);</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    node = rightLeftRotation(node);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (node.key.compareTo(target.key) &lt; <span class="number">0</span>) &#123;<span class="comment">//待删除key的比根的key大，那么继续在右子树查找</span></span><br><span class="line"></span><br><span class="line">            node.right = remove(node.right, target);</span><br><span class="line">            <span class="keyword">if</span> (height(node.left) - height(node.right) == <span class="number">2</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span> (height(node.left.right) &lt;= height(node.left.left)) &#123;</span><br><span class="line">                    node = leftLeftRotation(node);</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    node = rightRightRotation(node);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">else</span> &#123; <span class="comment">// node.key == target.key</span></span><br><span class="line">            <span class="keyword">if</span> (node.left == <span class="keyword">null</span>) &#123; <span class="comment">// 如果node的左子树为空，那么删除node后，新的根就是node.right</span></span><br><span class="line">                <span class="keyword">return</span> node.right;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (node.right == <span class="keyword">null</span>) &#123;<span class="comment">// 如果node的右子树为空，那么删除node后，新的根就是node.left</span></span><br><span class="line">                <span class="keyword">return</span> node.left;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123; <span class="comment">// 如果node既有左子树，又有右子树</span></span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> (height(node.left) &gt; height(node.right)) &#123;<span class="comment">//如果左子树比右子树深</span></span><br><span class="line">                    Node predecessor = maxNode(node.left);<span class="comment">//找node的前继结点predecessor</span></span><br><span class="line">                    replaceNode(predecessor, node);<span class="comment">//predecessor替换node</span></span><br><span class="line">                    node.left = remove(node.left, predecessor);<span class="comment">//再把原来的predecessor删掉</span></span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;<span class="comment">//如果右子树比左子树深(一样深的话无所谓了)</span></span><br><span class="line">                    Node successor = minNode(node.right);<span class="comment">//找node的后继结点successor</span></span><br><span class="line">                    replaceNode(successor, node);<span class="comment">//successor替换node</span></span><br><span class="line">                    node.right = remove(node.right, successor);<span class="comment">//再把原来的successor删掉</span></span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> node;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">remove</span><span class="params">(Key key)</span> </span>&#123;</span><br><span class="line">        Node z;</span><br><span class="line">        <span class="keyword">if</span> ((z = search(root, key)) != <span class="keyword">null</span>)</span><br><span class="line">            root = remove(root, z);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">destroy</span><span class="params">(Node node)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (node == <span class="keyword">null</span>)</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (node.left != <span class="keyword">null</span>)</span><br><span class="line">            destroy(node.left);</span><br><span class="line">        <span class="keyword">if</span> (node.right != <span class="keyword">null</span>)</span><br><span class="line">            destroy(node.right);</span><br><span class="line"></span><br><span class="line">        node = <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">destroy</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        destroy(root);</span><br><span class="line">        System.out.println(<span class="string">"销毁完毕"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">print</span><span class="params">(Node tree, Key key, String pos)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (tree != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (pos.equals(<span class="string">""</span>))    <span class="comment">// tree是根节点</span></span><br><span class="line">                System.out.printf(<span class="string">"%2d is root\n"</span>, tree.key);</span><br><span class="line">            <span class="keyword">else</span>                <span class="comment">// tree是分支节点</span></span><br><span class="line">                System.out.printf(<span class="string">"%2d is %2d's %6s child\n"</span>, tree.key, key, pos);</span><br><span class="line"></span><br><span class="line">            print(tree.left, tree.key, <span class="string">"left"</span>);</span><br><span class="line">            print(tree.right, tree.key, <span class="string">"right"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">print</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (root != <span class="keyword">null</span>) print(root, root.key, <span class="string">""</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//***************************************************************</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> arr[] = &#123;<span class="number">3</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">16</span>, <span class="number">15</span>, <span class="number">14</span>, <span class="number">13</span>, <span class="number">12</span>, <span class="number">11</span>, <span class="number">10</span>, <span class="number">8</span>, <span class="number">9</span>&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> i;</span><br><span class="line">        AVLTree&lt;Integer, Integer&gt; tree = <span class="keyword">new</span> AVLTree&lt;&gt;();</span><br><span class="line"></span><br><span class="line">        System.out.printf(<span class="string">"*******依次添加: "</span>);</span><br><span class="line">        <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">            System.out.printf(<span class="string">"%d "</span>, arr[i]);</span><br><span class="line">            tree.insert(arr[i], arr[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        System.out.print(<span class="string">"*******前序遍历: "</span>);</span><br><span class="line">        tree.preOrder();</span><br><span class="line">        System.out.println();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        System.out.print(<span class="string">"*******中序遍历: "</span>);</span><br><span class="line">        tree.inOrder();</span><br><span class="line">        System.out.println();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        System.out.print(<span class="string">"*******后序遍历: "</span>);</span><br><span class="line">        tree.postOrder();</span><br><span class="line">        System.out.println();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">"*******高度:"</span> + tree.height());</span><br><span class="line">        System.out.println(<span class="string">"*******最小值:"</span> + tree.minNode().key);</span><br><span class="line">        System.out.println(<span class="string">"*******最大值:"</span> + tree.maxNode().key);</span><br><span class="line">        System.out.println(<span class="string">"*******树的详细信息:"</span>);</span><br><span class="line">        tree.print();</span><br><span class="line">        System.out.println();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        i = <span class="number">8</span>;</span><br><span class="line">        System.out.printf(<span class="string">"*******删除根节点: %d"</span>, i);</span><br><span class="line">        tree.remove(i);</span><br><span class="line">        System.out.println();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">"*******高度:"</span> + tree.height());</span><br><span class="line">        System.out.println(<span class="string">"*******中序遍历: "</span>);</span><br><span class="line">        tree.inOrder();</span><br><span class="line">        System.out.println();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">"*******树的详细信息:"</span>);</span><br><span class="line">        tree.print();</span><br><span class="line">        System.out.println();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 销毁二叉树</span></span><br><span class="line">        tree.destroy();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>数据结构</category>
        <category>树形结构</category>
      </categories>
      <tags>
        <tag>AVL</tag>
        <tag>平衡二叉树</tag>
      </tags>
  </entry>
  <entry>
    <title>1.VLAN的配置</title>
    <url>/2020/03/14/1.VLAN%E7%9A%84%E9%85%8D%E7%BD%AE/</url>
    <content><![CDATA[<h2 id="1-VLAN的配置"><a href="#1-VLAN的配置" class="headerlink" title="1.VLAN的配置"></a>1.VLAN的配置</h2><p>​                使用eNSP进行对网络环境的配置</p>
<h3 id="1-1-对于交换机端口类型的介绍。"><a href="#1-1-对于交换机端口类型的介绍。" class="headerlink" title="1.1.对于交换机端口类型的介绍。"></a>1.1.对于交换机端口类型的介绍。</h3><p>   1.Access<br>   Access类型的端口只能属于1个VLAN，一般用于连接计算机的端口；</p>
<ol start="2">
<li>Trunk<br>Trunk类型的端口可以允许多个VLAN通过，可以接收和发送多个VLAN的报文，一般用于交换机之间连接的端口；</li>
<li>Hybrid<br> Hybrid类型的端口可以允许多个VLAN通过，可以接收和发送多个VLAN的报文，可以用于交换机之间连接，也可以用于连接用户的计算机。</li>
</ol>
<p>Hybrid端口和Trunk端口在接收数据时，处理方法一样，唯一不同之处在于发送数据时：Hybrid端口可以允许多个VLAN的报文发送时不打标签，而Trunk端口只允许缺省VLAN的报文发送时不打标签。</p>
<h3 id="1-1构造网络拓扑图"><a href="#1-1构造网络拓扑图" class="headerlink" title="1.1构造网络拓扑图"></a>1.1构造网络拓扑图</h3><p>  <img src="C:%5CUsers%5CLFH%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5C1582806229830.png" alt="1582806229830"></p>
<h3 id="2-1配置交换机"><a href="#2-1配置交换机" class="headerlink" title="2.1配置交换机"></a>2.1配置交换机</h3><h4 id="2-1-1创建Vlan端口2-，3"><a href="#2-1-1创建Vlan端口2-，3" class="headerlink" title="2.1.1创建Vlan端口2 ，3"></a>2.1.1创建Vlan端口2 ，3</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">&lt;Huawei&gt;sys</span><br><span class="line">Enter system view, return user view with Ctrl+Z.</span><br><span class="line">[Huawei]vlan 2</span><br><span class="line">[Huawei-vlan2]q</span><br><span class="line">[Huawei]vlan 3</span><br><span class="line">[Huawei-vlan3]q</span><br><span class="line">[Huawei]dis </span><br><span class="line">Feb 27 2020 20:22:31-08:00 Huawei DS&#x2F;4&#x2F;DATASYNC_CFGCHANGE:OID 1.3.6.1.4.1.2011.5</span><br><span class="line">.25.191.3.1 configurations have been changed. The current change number is 5, th</span><br><span class="line">e change loop count is 0, and the maximum number of records is 4095.vl</span><br><span class="line">The total number of vlans is : 3</span><br><span class="line">--------------------------------------------------------------------------------</span><br><span class="line">U: Up;         D: Down;         TG: Tagged;         UT: Untagged;</span><br><span class="line">MP: Vlan-mapping;               ST: Vlan-stacking;</span><br><span class="line">#: ProtocolTransparent-vlan;    *: Management-vlan;</span><br><span class="line">--------------------------------------------------------------------------------</span><br><span class="line"></span><br><span class="line">VID  Type    Ports                                                          </span><br><span class="line">--------------------------------------------------------------------------------</span><br><span class="line">1    common  UT:Eth0&#x2F;0&#x2F;1(D)     Eth0&#x2F;0&#x2F;2(D)     Eth0&#x2F;0&#x2F;3(D)     Eth0&#x2F;0&#x2F;4(D)     </span><br><span class="line">                Eth0&#x2F;0&#x2F;5(D)     Eth0&#x2F;0&#x2F;6(D)     Eth0&#x2F;0&#x2F;7(D)     Eth0&#x2F;0&#x2F;8(D)     </span><br><span class="line">                Eth0&#x2F;0&#x2F;9(D)     Eth0&#x2F;0&#x2F;10(D)    Eth0&#x2F;0&#x2F;11(D)    Eth0&#x2F;0&#x2F;12(D)    </span><br><span class="line">                Eth0&#x2F;0&#x2F;13(D)    Eth0&#x2F;0&#x2F;14(D)    Eth0&#x2F;0&#x2F;15(D)    Eth0&#x2F;0&#x2F;16(D)    </span><br><span class="line">                Eth0&#x2F;0&#x2F;17(D)    Eth0&#x2F;0&#x2F;18(D)    Eth0&#x2F;0&#x2F;19(D)    Eth0&#x2F;0&#x2F;20(D)    </span><br><span class="line">                Eth0&#x2F;0&#x2F;21(D)    Eth0&#x2F;0&#x2F;22(D)    GE0&#x2F;0&#x2F;1(D)      GE0&#x2F;0&#x2F;2(D)      </span><br><span class="line"></span><br><span class="line">2    common  </span><br><span class="line">3    common  </span><br><span class="line"></span><br><span class="line">VID  Status  Property      MAC-LRN Statistics Description      </span><br><span class="line">--------------------------------------------------------------------------------</span><br><span class="line"></span><br><span class="line">1    enable  default       enable  disable    VLAN 0001                         </span><br><span class="line">2    enable  default       enable  disable    VLAN 0002                         </span><br><span class="line">3    enable  default       enable  disable    VLAN 0003                         </span><br><span class="line">[Huawei]</span><br></pre></td></tr></table></figure>
<a id="more"></a>
<p>2.1.2测试主机之间的联通性</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">PC&gt;ping 192.168.2.3</span><br><span class="line"></span><br><span class="line">Ping 192.168.2.3: 32 data bytes, Press Ctrl_C to break</span><br><span class="line">From 192.168.2.3: bytes&#x3D;32 seq&#x3D;1 ttl&#x3D;128 time&#x3D;47 ms</span><br><span class="line"></span><br><span class="line">PC&gt;ping 192.168.2.4</span><br><span class="line"></span><br><span class="line">Ping 192.168.2.4: 32 data bytes, Press Ctrl_C to break</span><br><span class="line">From 192.168.2.4: bytes&#x3D;32 seq&#x3D;1 ttl&#x3D;128 time&#x3D;63 ms</span><br><span class="line"></span><br><span class="line">PC&gt;ping 192.168.2.5</span><br><span class="line"></span><br><span class="line">Ping 192.168.2.5: 32 data bytes, Press Ctrl_C to break</span><br><span class="line">From 192.168.2.5: bytes&#x3D;32 seq&#x3D;1 ttl&#x3D;128 time&#x3D;62 ms</span><br></pre></td></tr></table></figure>

<p>所属于同一个网段的网络都能ping通。</p>
<h4 id="2-1-3对交换机分别配置"><a href="#2-1-3对交换机分别配置" class="headerlink" title="2.1.3对交换机分别配置"></a>2.1.3对交换机分别配置</h4><p>   LSW1</p>
<p>将0/0/1和0/0/2设置为access类型</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[Huawei]interface Ethernet 0&#x2F;0&#x2F;1</span><br><span class="line">[Huawei-Ethernet0&#x2F;0&#x2F;1]port link-type access</span><br><span class="line">[Huawei-Ethernet0&#x2F;0&#x2F;1]prot default vlan 2</span><br><span class="line">[Huawei-Ethernet0&#x2F;0&#x2F;1]quit</span><br></pre></td></tr></table></figure>

<p>将0/0/3设置为trunk类型</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[Huawei]interface Ethernet 0&#x2F;0&#x2F;3</span><br><span class="line">[Huawei-Ethernet0&#x2F;0&#x2F;3]port link-type trunk</span><br><span class="line">[Huawei-Ethernet0&#x2F;0&#x2F;3]port trunk allow-pass vlan 2</span><br><span class="line">[Huawei-Ethernet0&#x2F;0&#x2F;3]port trunk allow-pass vlan 3</span><br><span class="line">[Huawei-Ethernet0&#x2F;0&#x2F;3]quit</span><br></pre></td></tr></table></figure>

<p>LSW2</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;Huawei&gt;system-view </span><br><span class="line">Enter system view, return user view with Ctrl+Z.</span><br><span class="line">[Huawei]interface Ethernet 0&#x2F;0&#x2F;1</span><br><span class="line">[Huawei-Ethernet0&#x2F;0&#x2F;1]port link-type access </span><br><span class="line">[Huawei-Ethernet0&#x2F;0&#x2F;1]port default vlan 3</span><br><span class="line">[Huawei-Ethernet0&#x2F;0&#x2F;1]quit</span><br><span class="line">[Huawei]interface Ethernet 0&#x2F;0&#x2F;2</span><br><span class="line">[Huawei-Ethernet0&#x2F;0&#x2F;2]port link-type access </span><br><span class="line">[Huawei-Ethernet0&#x2F;0&#x2F;2]port default vlan 2</span><br><span class="line">[Huawei-Ethernet0&#x2F;0&#x2F;2]quit </span><br><span class="line">[Huawei]interface Ethernet 0&#x2F;0&#x2F;3</span><br><span class="line">[Huawei-Ethernet0&#x2F;0&#x2F;3]port link-type trunk</span><br><span class="line">[Huawei-Ethernet0&#x2F;0&#x2F;3]port trunk allow-pass vlan 2</span><br><span class="line">[Huawei-Ethernet0&#x2F;0&#x2F;3]port trunk allow-pass vlan 3</span><br><span class="line">[Huawei-Ethernet0&#x2F;0&#x2F;3]quit </span><br><span class="line">[Huawei]display vlan </span><br><span class="line">The total number of vlans is : 3</span><br><span class="line">--------------------------------------------------------------------------------</span><br><span class="line">U: Up;         D: Down;         TG: Tagged;         UT: Untagged;</span><br><span class="line">MP: Vlan-mapping;               ST: Vlan-stacking;</span><br><span class="line">#: ProtocolTransparent-vlan;    *: Management-vlan;</span><br><span class="line">--------------------------------------------------------------------------------</span><br><span class="line"></span><br><span class="line">VID  Type    Ports                                                          </span><br><span class="line">--------------------------------------------------------------------------------</span><br><span class="line">1    common  UT:Eth0&#x2F;0&#x2F;3(U)     Eth0&#x2F;0&#x2F;4(D)     Eth0&#x2F;0&#x2F;5(D)     Eth0&#x2F;0&#x2F;6(D)     </span><br><span class="line">                Eth0&#x2F;0&#x2F;7(D)     Eth0&#x2F;0&#x2F;8(D)     Eth0&#x2F;0&#x2F;9(D)     Eth0&#x2F;0&#x2F;10(D)    </span><br><span class="line">                Eth0&#x2F;0&#x2F;11(D)    Eth0&#x2F;0&#x2F;12(D)    Eth0&#x2F;0&#x2F;13(D)    Eth0&#x2F;0&#x2F;14(D)    </span><br><span class="line">                Eth0&#x2F;0&#x2F;15(D)    Eth0&#x2F;0&#x2F;16(D)    Eth0&#x2F;0&#x2F;17(D)    Eth0&#x2F;0&#x2F;18(D)    </span><br><span class="line">                Eth0&#x2F;0&#x2F;19(D)    Eth0&#x2F;0&#x2F;20(D)    Eth0&#x2F;0&#x2F;21(D)    Eth0&#x2F;0&#x2F;22(D)    </span><br><span class="line">                GE0&#x2F;0&#x2F;1(D)      GE0&#x2F;0&#x2F;2(D)                                      </span><br><span class="line"></span><br><span class="line">2    common  UT:Eth0&#x2F;0&#x2F;2(U)                                                     </span><br><span class="line"></span><br><span class="line">             TG:Eth0&#x2F;0&#x2F;3(U)                                                     </span><br><span class="line"></span><br><span class="line">3    common  UT:Eth0&#x2F;0&#x2F;1(U)                                                     </span><br><span class="line"></span><br><span class="line">             TG:Eth0&#x2F;0&#x2F;3(U)                                                     </span><br><span class="line"></span><br><span class="line"></span><br><span class="line">VID  Status  Property      MAC-LRN Statistics Description      </span><br><span class="line">--------------------------------------------------------------------------------</span><br><span class="line"></span><br><span class="line">1    enable  default       enable  disable    VLAN 0001                         </span><br><span class="line">2    enable  default       enable  disable    VLAN 0002                         </span><br><span class="line">3    enable  default       enable  disable    VLAN 0003                         </span><br><span class="line">[Huawei]</span><br></pre></td></tr></table></figure>

<h2 id="3-测试网络的联通性"><a href="#3-测试网络的联通性" class="headerlink" title="3.测试网络的联通性"></a>3.测试网络的联通性</h2><p>​    在进行了端口配置之后可以看到，</p>
<p>pc1</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">PC&gt;ping 192.168.2.5</span><br><span class="line"></span><br><span class="line">Ping 192.168.2.5: 32 data bytes, Press Ctrl_C to break</span><br><span class="line">From 192.168.2.5: bytes&#x3D;32 seq&#x3D;1 ttl&#x3D;128 time&#x3D;63 ms</span><br><span class="line">From 192.168.2.5: bytes&#x3D;32 seq&#x3D;2 ttl&#x3D;128 time&#x3D;62 ms</span><br><span class="line">From 192.168.2.5: bytes&#x3D;32 seq&#x3D;3 ttl&#x3D;128 time&#x3D;63 ms</span><br><span class="line">From 192.168.2.5: bytes&#x3D;32 seq&#x3D;4 ttl&#x3D;128 time&#x3D;46 ms</span><br><span class="line">From 192.168.2.5: bytes&#x3D;32 seq&#x3D;5 ttl&#x3D;128 time&#x3D;63 ms</span><br><span class="line"></span><br><span class="line">--- 192.168.2.5 ping statistics ---</span><br><span class="line">  5 packet(s) transmitted</span><br><span class="line">  5 packet(s) received</span><br><span class="line">  0.00% packet loss</span><br><span class="line">  round-trip min&#x2F;avg&#x2F;max &#x3D; 46&#x2F;59&#x2F;63 ms</span><br><span class="line"></span><br><span class="line">PC&gt;</span><br><span class="line">PC&gt;</span><br><span class="line">PC&gt;ping 192.168.2.3</span><br><span class="line"></span><br><span class="line">Ping 192.168.2.3: 32 data bytes, Press Ctrl_C to break</span><br><span class="line">From 192.168.2.2: Destination host unreachable</span><br><span class="line">From 192.168.2.2: Destination host unreachable</span><br><span class="line">From 192.168.2.2: Destination host unreachable</span><br><span class="line">From 192.168.2.2: Destination host unreachable</span><br><span class="line">From 192.168.2.2: Destination host unreachable</span><br><span class="line"></span><br><span class="line">--- 192.168.2.3 ping statistics ---</span><br><span class="line">  5 packet(s) transmitted</span><br><span class="line">  0 packet(s) received</span><br><span class="line">  100.00% packet loss</span><br><span class="line"></span><br><span class="line">PC&gt;</span><br><span class="line">PC&gt;ping 192.168.2.4</span><br><span class="line"></span><br><span class="line">Ping 192.168.2.4: 32 data bytes, Press Ctrl_C to break</span><br><span class="line">From 192.168.2.2: Destination host unreachable</span><br><span class="line">From 192.168.2.2: Destination host unreachable</span><br><span class="line">From 192.168.2.2: Destination host unreachable</span><br><span class="line">From 192.168.2.2: Destination host unreachable</span><br><span class="line">From 192.168.2.2: Destination host unreachable</span><br><span class="line"></span><br><span class="line">--- 192.168.2.4 ping statistics ---</span><br><span class="line">  5 packet(s) transmitted</span><br><span class="line">  0 packet(s) received</span><br><span class="line">  100.00% packet loss</span><br></pre></td></tr></table></figure>

<p>pc2</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">PC&gt;ping 192.168.2.2</span><br><span class="line"></span><br><span class="line">Ping 192.168.2.2: 32 data bytes, Press Ctrl_C to break</span><br><span class="line">From 192.168.2.3: Destination host unreachable</span><br><span class="line">From 192.168.2.3: Destination host unreachable</span><br><span class="line">From 192.168.2.3: Destination host unreachable</span><br><span class="line">From 192.168.2.3: Destination host unreachable</span><br><span class="line">From 192.168.2.3: Destination host unreachable</span><br><span class="line"></span><br><span class="line">--- 192.168.2.2 ping statistics ---</span><br><span class="line">  5 packet(s) transmitted</span><br><span class="line">  0 packet(s) received</span><br><span class="line">  100.00% packet loss</span><br><span class="line"></span><br><span class="line">PC&gt;ping 192.168.2.4</span><br><span class="line"></span><br><span class="line">Ping 192.168.2.4: 32 data bytes, Press Ctrl_C to break</span><br><span class="line">From 192.168.2.4: bytes&#x3D;32 seq&#x3D;1 ttl&#x3D;128 time&#x3D;78 ms</span><br><span class="line">From 192.168.2.4: bytes&#x3D;32 seq&#x3D;2 ttl&#x3D;128 time&#x3D;47 ms</span><br><span class="line">From 192.168.2.4: bytes&#x3D;32 seq&#x3D;3 ttl&#x3D;128 time&#x3D;62 ms</span><br><span class="line">From 192.168.2.4: bytes&#x3D;32 seq&#x3D;4 ttl&#x3D;128 time&#x3D;63 ms</span><br><span class="line">From 192.168.2.4: bytes&#x3D;32 seq&#x3D;5 ttl&#x3D;128 time&#x3D;62 ms</span><br><span class="line"></span><br><span class="line">--- 192.168.2.4 ping statistics ---</span><br><span class="line">  5 packet(s) transmitted</span><br><span class="line">  5 packet(s) received</span><br><span class="line">  0.00% packet loss</span><br><span class="line">  round-trip min&#x2F;avg&#x2F;max &#x3D; 47&#x2F;62&#x2F;78 ms</span><br><span class="line"></span><br><span class="line">PC&gt;ping 192.168.2.5</span><br><span class="line"></span><br><span class="line">Ping 192.168.2.5: 32 data bytes, Press Ctrl_C to break</span><br><span class="line">From 192.168.2.3: Destination host unreachable</span><br><span class="line">From 192.168.2.3: Destination host unreachable</span><br><span class="line">From 192.168.2.3: Destination host unreachable</span><br><span class="line">From 192.168.2.3: Destination host unreachable</span><br><span class="line">From 192.168.2.3: Destination host unreachable</span><br><span class="line"></span><br><span class="line">--- 192.168.2.5 ping statistics ---</span><br><span class="line">  5 packet(s) transmitted</span><br><span class="line">  0 packet(s) received</span><br><span class="line">  100.00% packet loss</span><br></pre></td></tr></table></figure>

<p>划分在同一个vlan下的pc才能够相互连通</p>
]]></content>
      <categories>
        <category>网络配置</category>
      </categories>
      <tags>
        <tag>VLAN</tag>
      </tags>
  </entry>
  <entry>
    <title>1.Spring MVC</title>
    <url>/2020/03/14/1.Spring%20MVC/</url>
    <content><![CDATA[<h1 id="1-Spring-MVC"><a href="#1-Spring-MVC" class="headerlink" title="1.Spring MVC"></a>1.Spring MVC</h1><h2 id="1-1Spring-MVC的功能组件"><a href="#1-1Spring-MVC的功能组件" class="headerlink" title="1.1Spring MVC的功能组件"></a>1.1Spring MVC的功能组件</h2><p>​    DispatcherServlet    前端控制器</p>
<p>​    HandlerMapping        处理器映射器</p>
<p>​    Handler              处理器</p>
<p>​    HandlerAdapter        处理器适配器</p>
<p>​    ViewResolver        视图解析器</p>
<h1 id="2-第一个Spring-MVC程序"><a href="#2-第一个Spring-MVC程序" class="headerlink" title="2.第一个Spring MVC程序"></a>2.第一个Spring MVC程序</h1><p>​    </p>
<p>实现步骤其实非常的简单：</p>
<ol>
<li>新建一个web项目</li>
<li>导入相关jar包</li>
<li>编写web.xml , 注册DispatcherServlet</li>
<li>编写springmvc配置文件</li>
<li>接下来就是去创建对应的控制类 , controller</li>
<li>最后完善前端视图和controller之间的对应</li>
<li>测试运行调试.</li>
</ol>
<p>使用springMVC必须配置的三大件：</p>
<p><strong>处理器映射器、处理器适配器、视图解析器</strong></p>
<p>通常，我们只需要<strong>手动配置视图解析器</strong>，而<strong>处理器映射器</strong>和<strong>处理器适配器</strong>只需要开启<strong>注解驱动</strong>即可，而省去了大段的xml配置</p>
<p>在web。xml文件中加入</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--1.注册DispatcherServlet--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>springmvc<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>org.springframework.web.servlet.DispatcherServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--关联一个springmvc的配置文件:【servlet-name】-servlet.xml--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>contextConfigLocation<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>classpath:springmvc-servlet.xml<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--启动级别-1--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">load-on-startup</span>&gt;</span>1<span class="tag">&lt;/<span class="name">load-on-startup</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--/ 匹配所有的请求；（不包括.jsp）--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--/* 匹配所有的请求；（包括.jsp）--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>springmvc<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>springMVC</category>
      </categories>
      <tags>
        <tag>springMVC</tag>
      </tags>
  </entry>
  <entry>
    <title>java基础总结</title>
    <url>/2020/03/14/1.Java%E8%AF%AD%E8%A8%80%E6%98%AF%E8%B7%A8%E5%B9%B3%E5%8F%B0%E7%9A%84%EF%BC%8C%E8%AF%B7%E9%97%AE%E6%98%AF%E5%A6%82%E4%BD%95%E4%BF%9D%E8%AF%81%E7%9A%84%E5%91%A2/</url>
    <content><![CDATA[<p>1.Java语言是跨平台的，请问是如何保证的呢?<br>      因为它有虚拟机（JVM），JAVA程序不是直接在电脑上运行的，是在虚拟机上进行的，每个系统平<br>台都是有自己的虚拟机（JVM），所以JAVA语言能跨平台。.</p>
<p>2.JDK,JRE,JVM的作用及关系？</p>
<p>JVM:英文全称，Java Virtual Machine,是Java虚拟机，用来运行Java程序</p>
<p>JRE:英文全称，Java Runtime Environment,是Java运行时环境，里边包含了Java运行时所需要的类库。</p>
<p>JDK:英文全称，Java Development Kit,是Java开发工具包，里边包含了Java的开发工具。例如java,javac等。</p>
<p>JDK：JRE+java开发工具</p>
<p>JRE：JVM+类库（lib）</p>
<p>​       </p>
<pre><code>①SE(J2SE)，standard edition，标准版，是我们通常用的一个版本，从JDK 5.0开始，改名为Java SE。</code></pre><p>　　②EE(J2EE)，enterprise edition，企业版，使用这种JDK开发J2EE应用程序，从JDK 5.0开始，改名为Java EE。</p>
<p>　　③ME(J2ME)，micro edition，主要用于移动设备、嵌入式设备上的java应用程序，从JDK 5.0开始，改名为Java ME。</p>
<p>3.进制转换</p>
<p>(1)其他进制到十进制<br>        系数：就是每一个位上的数值<br>        基数：x进制的基数就是x<br>        权：对每一个位上的数据，从右，并且从0开始编号，对应的编号就是该数据的权。</p>
<pre><code>    结果：系数*基数^权次幂之和。
(2)十进制到其他进制
    除基取余，直到商为0，余数反转。</code></pre><p>另外：2&lt;&lt;3     ==2*2^3</p>
<p>4.数据类型转换<br>    (1)boolean类型不参与转换<br>    (2)默认转换<br>        A:从小到大<br>        B:byte,short,char – int – long – float – double<br>        C:byte,short,char之间不相互转换，直接转成int类型参与运算。<br>    (3)强制转换<br>        A:从大到小<br>        B:可能会有精度的损失，一般不建议这样使用。<br>        C:格式：<br>            目标数据类型 变量名 = (目标数据类型) (被转换的数据);<br>    (4)思考题和面试题：<br>        1:下面两种方式有区别吗?<br>            float f1 = 12.345f;<br>            float f2 = (float)12.345;<br>                前者12.345本身是一个float类型的数据，而后者12.345是个double类型的，经过强制转换赋值给f2<br>        2:下面的程序有问题吗，如果有，在哪里呢?<br>            byte b1 = 3;<br>            byte b2 = 4;<br>            byte b3 = b1 + b2;<br>            byte b4 = 3 + 4;<br>            第三行有问题，因为可能存在精度损失的情况。<br>        3:下面的操作结果是什么呢?<br>            byte b = (byte)130;//-126</p>
<ul>
<li><p>分析过程： 我们要想知道结果是什么，就应该知道是如何进行计算的。 而我们又知道计算机中数据的运算都是补码进行的。<br>而要得到补码，首先要计算出数据的二进制。<br>*</p>
</li>
<li><p>A:获取130这个数据的二进制。 00000000 00000000 00000000 10000010 这是130的原码，也是反码，还是补码。</p>
</li>
<li><p>B:做截取操作，截成byte类型的了。 10000010 这个结果是补码。</p>
</li>
<li><p>C:已知补码求原码。 符号位 数值位 补码： 1 0000010</p>
</li>
<li><p>反码： 1 0000001</p>
<ul>
<li>原码： 1 1111110    </li>
</ul>
<p>D:字符参与运算</p>
<pre><code>是查找ASCII里面的值
&apos;a&apos;        97
&apos;A&apos;        65
&apos;0&apos;        48

System.out.println(&apos;a&apos;);
System.out.println(&apos;a&apos; + 1);</code></pre></li>
</ul>
<p>E:字符串参与运算<br>            这里其实是字符串的连接<br>            System.out.println(“hello”+’a’+1);  //helloa1<br>            System.out.println(‘a’+1+”hello”);    //98hello<br>            System.out.println(“5+5=”+5+5);    //5+5=55<br>            System.out.println(5+5+”=5+5”);    //10=5+5</p>
<p>5.switch语句的表达式可以是byte吗?可以是long吗?可以是String吗?<br>         switch语句的表达式可以是byte，可以是long，jdk1.7之后可以是String。</p>
<p>6.for和while的区别？<br>            a:使用上的区别<br>                for语句的那个控制条件变量,在循环结束后不能在使用了。<br>                而while的可以继续使用。<br>            b:理解上的区别<br>                for适合于一个范围的判断<br>                while适合次数不明确的<br>                    举例:吃葡萄</p>
<p>7.Java的内存分配<br>1.寄存器：最快的存储区, 由编译器根据需求进行分配,我们在程序中无法控制.<br>2. 栈：存放基本类型的变量数据和对象的引用，但对象本身不存放在栈中，而是存放在堆（new 出来的对象）或者常量池中（字符串常量对象存放在常量池中。）<br>3. 堆：存放所有new出来的对象。<br>4. 静态域：存放静态成员（static定义的）<br>5. 常量池：存放字符串常量和基本类型常量（public static final）。<br>6. 非RAM存储：硬盘等永久存储空间</p>
<p>8:栈内存和堆内存的区别:？<br>                栈：数据使用完，会被垃圾回收器在空闲的时候回收。<br>                堆：每一个new出来的东西都有地址， 每一个变量都有默认值   </p>
<p>byte,short,int,long      默认 0</p>
<p>float,double     默认0.0<br>char                 默认’\u0000’<br>boolean           默认 false<br>引用类型         默认null<br>                常量池中维护的常量仅仅是【-128至127】而String型是先检测常量池中有没有对应字符串，如果有，则取出来；<br>如果没有，则把当前的添加进去。</p>
<p>9.Java程序的开发，设计和特征？<br>        A:开发：就是不断的创建对象，通过对象调用功能<br>        B:设计：就是管理和维护对象间的关系<br>        C:特征：a:封装 b:继承 c:多态 （d:抽象）</p>
<p>10.成员变量和局部变量的区别?</p>
<p> (1)在类中的位置不同<br>        成员变量：类中方法外，用来描述类。<br>        局部变量：方法定义中或者方法声明上<br>    (2)在内存中的位置不同<br>        成员变量：在堆中<br>        局部变量：在栈中<br>    (3)生命周期不同<br>        成员变量：随着对象的创建而存在，随着对象的消失而消失<br>        局部变量：随着方法的调用而存在，随着方法的调用完毕而消失<br>    (4)初始化值不同<br>        成员变量：有默认值<br>        局部变量：没有默认值，必须定义，赋值，然后才能使用</p>
<p>11.构造方法中可不可以有return语句呢?<br>        可以。而是我们写成这个样子就OK了：return;<br>        其实，在任何的void类型的方法的最后你都可以写上：return,代表方法结束;</p>
<p>12.Override和Overload的区别?Overload是否可以改变返回值类型?<br>        a.Overload是指重载，在同一个类中，存在方法名相同，参数列表不同的方法。</p>
<p>重载与返回值类型无关。Overload的方法可以改变返回值的类型，因为它与返回值类型无关。<br>        b. Override是指重写， 存在于子父类，或者子父接口中，方法声明相同   </p>
<p>13.this和super的区别和各自的作用?<br>            属性的区别：this访问本类中的属性，如果本类没有此属性则从父类中继续查找。super访问父类中的属性。<br>            方法的区别：this访问本类中的方法，如果本类没有此方法则从父类中继续查找。super访问父类中的方法。<br>            构造的区别：this调用本类构造，必须放在构造方法的首行。super调用父类构造，必须放在子类构造方法首行。<br>            其他区别：this表示当前对象。super不能表示父类对象</p>
<p>14.一个类的初始化过程<br>            加载：由类加载器执行，查找字节码并从字节码创建一个class对象。<br>            链接：在链接阶段将验证类中的字节码，为静态区域分配存储空间，并且如果必须的话，将解析这个类创建的对其他类的所有引用<br>            初始化：首先初始化静态代码块、静态变量、静态方法，如果该类有超类，则对其初始化执行顺序：</p>
<p>静态代码块 &gt; 构造代码块 &gt; 构造方法</p>
<p>15.final关键字<br>    (1)finall是最终的意思，可以修饰类，方法，变量。<br>    (2)特点：<br>        A:它修饰的类，不能被继承。<br>        B:它修饰的方法，不能被重写。<br>        C:它修饰的变量，是一个常量。</p>
<p>16.抽象类的特点<br>        A:抽象类和抽象方法必须用关键字abstract修饰<br>        B:抽象类中不一定有抽象方法,但是有抽象方法的类一定是抽象类<br>        C:抽象类不能实例化<br>        D:抽象类的子类<br>            a:是一个抽象类。<br>            b:是一个具体类。这个类必须重写抽象类中的所有抽象方法。</p>
<p>16.1 abstract不能和哪些关键字共存<br>            a:final    冲突<br>            b:private 冲突<br>            c:static 无意义</p>
<p>17.抽象类和接口的区别?<br>        A:成员区别<br>            抽象类：有变量，有常量，有构造方法，有抽象方法，可以有非抽象方法<br>           接口：成员变量只能是常量，默认public static final修饰，没有构造方法，成员方法只能是抽象方法默认修饰符：public abstract<br>        B:关系区别:<br>            类与类：继承<br>            类与接口：实现<br>            接口与接口：继承<br>        C:设计理念不同<br>            抽象类：is a，抽象类中定义的是共性功能。<br>            接口：like a，接口中定义的是扩展功能。</p>
<p>18.权限修饰符(四种权限修饰符在任意时刻只能出现一种)<br>                          本类         同一个包下    不同包下的子类    不同包下的无关类<br>        private          Y<br>        默认              Y                   Y<br>        protected      Y                   Y                      Y<br>        public            Y                   Y                      Y                             Y</p>
<p>19.内部类<br>        A:可以直接访问外部类的成员，包括私有<br>        B:外部类要想访问内部类成员，必须创建对象<br>        C:局部内部类访问局部变量必须加final修饰。<br>            因为局部变量使用完毕就消失，而堆内存的数据并不会立即消失。<br>            所以，堆内存还是用该变量，而改变量已经没有了。<br>            为了让该值还存在，就加final修饰。<br>            通过反编译工具我们看到了，加入final后，堆内存直接存储的是值，而不是变量名。</p>
<p>20.static关键字</p>
<pre><code>a.静态方法只能访问静态成员，非静态成员可以访问静态成员或者非静态成员。

b.非静态内部类中不允许定义静态成员

c.外部类的静态成员不可以直接使用非静态内部类

d.静态内部类，不能访问外部类的实例成员，只能访问外部类的静态成员</code></pre><p>21.==和equals()的区别?<br>            A:==<br>                基本类型：比较的是值是否相同<br>                引用类型：比较的是地址值是否相同<br>            B:equals()<br>                只能比较引用类型。默认情况下，比较的是地址值是否相同。<br>                但是，我们可以根据自己的需要重写该方法。</p>
<p>22.String和StringBuffer相互转换<br>            String –&gt;StringBuffer<br>                    String s = new String();<br>                方法1：    StringBuffer sb2 = new StringBuffer();<br>                    sb2.append(s);<br>                方法2：    StringBuffer sb2 = new StringBuffer(s);<br>            StringBuffer –&gt; String<br>                方法1 toString()方法:<br>                    String str2 = buffer.toString();<br>                方法2 通过构造方法：<br>                    String str = new String(buffer);//public String(String original)创建的字符串是该参数字符串的副本</p>
<p>23.String,StringBuffer,StringBuilder的区别<br>            String内容不可变；StringBuffer同步的，数据安全，效率低；StringBuilder：不同步的，数据不安全，效率高。</p>
<p>24.B:StringBuffer和数组的区别?<br>            二者都是可以看成一个容器装数据，StringBuffer最终数据是一个字符串，而数组可以放多种数据，但必须是同一个类型。</p>
<p>25.String和int的相互转换<br>A:String – int<br>        String s = “100”;<br>    // 方式1<br>        // String – Integer – int<br>        Integer ii = new Integer(s);<br>        // public int intValue()<br>        int x = ii.intValue();<br>        System.out.println(“x:” + x);<br>    //方式2<br>        //public static int parseInt(String s)<br>        int y = Integer.parseInt(s);    //这个方法最好<br>        System.out.println(“y:”+y);<br>B:int – String<br>    // 方式1<br>        String s1 = “” + number;<br>        System.out.println(“s1:” + s1);<br>    // 方式2<br>        String s2 = String.valueOf(number);    //这个方法最好<br>        System.out.println(“s2:” + s2);<br>    // 方式3<br>        // int – Integer – String<br>        Integer i = new Integer(number);<br>        String s3 = i.toString();<br>        System.out.println(“s3:” + s3);<br>    // 方式4<br>        // publuc static String toString(int i)<br>        String s4 = Integer.toString(number);<br>        System.out.println(“s4:” + s4);<br>        System.out.println(“—————–”);</p>
<ol start="26">
<li>++/–使用？<pre><code>**单独使用
    放在操作数据的前面和后面效果一样。
    a++或者++a效果一样。
**参与操作使用
    放在操作数的前面：先自增或者自减，再参与操作
        int a = 10;
        int b = ++a;
    放在操作数的后面：先参与操作，再自增或者自减
        int a = 10;
        int b = a++;</code></pre></li>
</ol>
<p>27.+ 以及+=区别？</p>
<p>1) short s1 = 1; s1 = s1+1;有什么错?// s1 = (short) (s1+1);系统提示要强制转换</p>
<p>2) short s1 = 1; s1 += 1;有错吗?//没错，由于+=是强制转换的。。</p>
<pre><code>+：在编译器将右边的表达式结果计算出来后，和左边的变量类型比较精度，如果左边的变量精度低于右边的结果的精度，编译器会显式的报错，告诉程序员去强制转型。（所以s1 = s1 + 1出错）最后将表达式的结果复制到变量所在的内存区。

+=：编译器自动隐式直接将+=运算符后面的操作数强制装换为前面变量的类型，然后在变量所在的内存区上直接根据右边的操作数修改左边变量内存存储的二进制数值（所以 s += 1不报错）最后达到和赋值运算符相同的目的。与前者相比，由于后者是位操作，效率也较前者高。</code></pre><ol start="28">
<li>Java中的参数传递问题？<pre><code>在Java中只有值传递。    
基本类型：形式参数的改变不影响实际参数
引用类型：形式参数的改变直接影响实际参数</code></pre></li>
</ol>
<p>29.一个类的初始化过程<br>            加载：由类加载器执行，查找字节码并从字节码创建一个class对象。<br>            链接：在链接阶段将验证类中的字节码，为静态区域分配存储空间，并且如果必须的话，将解析这个类创建的对其他类的所有引用<br>            初始化：首先初始化静态块、静态变量、静态方法，如果该类有超类，则对其初始化</p>
<p>30.子父类的构造执行过程<br>            执行父类的静态代码块。<br>            执行子类的静态代码块。<br>            执行父类的构造代码块。<br>            执行父类的不带参数的构造方法。<br>            执行子类的构造代码块。<br>            执行子类的不带参数的构造方法。</p>
<p>分层初始化<br>            1.父类静态代码块 （  java虚拟机加载类时，就会执行该块代码，故只执行一次）<br>            2 .子类静态代码块 （  java虚拟机加载类时，就会执行该块代码，故只执行一次）<br>            3. 父类属性对象初始化<br>            4.父类普通代码块（每次new,每次执行 ）<br>            5. 父类构造函数（每次new,每次执行）<br>            6.子 类 属性对象初始化<br>            7.子类普通代码块（每次new,每次执行 ）<br>            8.子 类构造函数（每次new,每次执行）</p>
<p>31.字符串的面试题(看程序写结果)<br>        A:==和equals()<br>            String s1 = new String(“hello”);<br>            String s2 = new String(“hello”);<br>            System.out.println(s1 == s2);// false    //同样是new出来的对象，在堆里的地址不一样    false<br>            System.out.println(s1.equals(s2));// true    //由于两个对象的内容一样，最终指向方法区常量池的地址是一样的true</p>
<pre><code>    String s3 = new String(&quot;hello&quot;);
    String s4 = &quot;hello&quot;;
    System.out.println(s3 == s4);// false    S3在堆内存中的地址和s4在常量池的地址不一样
    System.out.println(s3.equals(s4));// true    S3在堆内存中指向常量池hello，s4直接指向常量池的hello

    String s5 = &quot;hello&quot;;
    String s6 = &quot;hello&quot;;
    System.out.println(s5 == s6);// true    地址一样
    System.out.println(s5.equals(s6));// true    地址一样
B:字符串的拼接
    String s1 = &quot;hello&quot;;
    String s2 = &quot;world&quot;;
    String s3 = &quot;helloworld&quot;;
    System.out.println(s3 == s1 + s2);// false    地址值的比较不一样
    System.out.println(s3.equals((s1 + s2)));// true
    值得注意的是：字符串如果是变量相加，先开空间在拼接，如果是常量相加，先加，再去常量池找
        有就返回，没有就创建一个返回，如下
    System.out.println(s3 == &quot;hello&quot; + &quot;world&quot;);// false 这里我判断错了，实际上常量相加，结果应该是true
    System.out.println(s3.equals(&quot;hello&quot; + &quot;world&quot;));// true</code></pre><p>32.关于==和equals的问题</p>
<pre><code>equals()方法是ObjectA类的方法，String,Integer,Date都有覆盖这个方法；而==是java中的运算符；
==比较的是值类型，基本类型都是比较值是不是相等，比较引用类型的是比较的是不是同一个new出来的对象，String字符串常量是比较它指向常量池中字符串是不是相等。
equals()是用来比较两个对象的内容是不是一样，如果没有覆盖该方法，equals()返回的是==的判断，就是说判断他们是不是同一个new出来的对象。
String重写了equals()方法，先判断是不是==的，如果是就返回true,如果不是，就判断字符串中的字符相不相等，相等返回true.
Integerd 的equals方法会将Integer对象拆箱再用==进行比较内容。
其他：引用类型都是比较地址值，可以通过重写hastcode(),和equals()判断是不是一样的对象。</code></pre>]]></content>
      <categories>
        <category>java基础</category>
      </categories>
      <tags>
        <tag>java</tag>
      </tags>
  </entry>
</search>
